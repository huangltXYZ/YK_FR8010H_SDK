<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\ble_mesh.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\ble_mesh.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Jul 15 13:23:55 2021
<BR><P>
<H3>Maximum Stack Usage =        668 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
mesh_callback_func &rArr; sha256_gen_auth_value &rArr; sha256_update &rArr; sha256_transform
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[41a]">gapm_addr_renew_next_addr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[419]">gapm_addr_fsm</a><BR>
 <LI><a href="#[52b]">m_tb_key_set_node_identity</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[576]">m_lay_proxy_bearer_adv_ctrl</a><BR>
 <LI><a href="#[602]">m_fnd_hlths_process</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[603]">m_fnd_hlths_send_status</a><BR>
 <LI><a href="#[60a]">m_fnd_hlths_send_attention_status</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[604]">m_fnd_hlths_process_next</a><BR>
 <LI><a href="#[605]">m_fnd_hlths_handler_period</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[604]">m_fnd_hlths_process_next</a><BR>
 <LI><a href="#[616]">m_fnd_pbrs_process_next</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[60f]">m_fnd_pbrs_process</a><BR>
 <LI><a href="#[743]">smpc_tkdp_send_start</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[746]">smpc_tkdp_send_continue</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[262]">APP_Google_Task</a> from app_google.o(i.APP_Google_Task) referenced from yk_app.o(.data)
 <LI><a href="#[261]">APP_MEM_Task</a> from app_mem.o(i.APP_MEM_Task) referenced from yk_app.o(.data)
 <LI><a href="#[263]">APP_TC_OTA_Task</a> from app_tc_ota.o(i.APP_TC_OTA_Task) referenced from yk_app.o(.data)
 <LI><a href="#[24d]">BusFault_Handler</a> from syscall.txt(ABSOLUTE) referenced from app_boot_vectors.o(RESET)
 <LI><a href="#[250]">DebugMon_Handler</a> from syscall.txt(ABSOLUTE) referenced from app_boot_vectors.o(RESET)
 <LI><a href="#[9]">Google_gatt_msg_handler</a> from google_service.o(i.Google_gatt_msg_handler) referenced from google_service.o(i.Google_Gatt_Add_Service)
 <LI><a href="#[24b]">HardFault_Handler_Ram</a> from app_boot_vectors.o(ram_code) referenced from app_boot_vectors.o(RESET)
 <LI><a href="#[24c]">MemManage_Handler</a> from syscall.txt(ABSOLUTE) referenced from app_boot_vectors.o(RESET)
 <LI><a href="#[24a]">NMI_Handler</a> from syscall.txt(ABSOLUTE) referenced from app_boot_vectors.o(RESET)
 <LI><a href="#[251]">PendSV_Handler</a> from syscall.txt(ABSOLUTE) referenced from app_boot_vectors.o(RESET)
 <LI><a href="#[99]">Proc_AdjustBrightness</a> from app_google.o(i.Proc_AdjustBrightness) referenced from app_google.o(.constdata)
 <LI><a href="#[9e]">Proc_AdjustRGB</a> from app_google.o(i.Proc_AdjustRGB) referenced from app_google.o(.constdata)
 <LI><a href="#[9a]">Proc_AdjustTemperature</a> from app_google.o(i.Proc_AdjustTemperature) referenced from app_google.o(.constdata)
 <LI><a href="#[9b]">Proc_Blink</a> from app_google.o(i.Proc_Blink) referenced from app_google.o(.constdata)
 <LI><a href="#[a1]">Proc_Confirm</a> from app_tc_ota.o(i.Proc_Confirm) referenced from app_tc_ota.o(.constdata)
 <LI><a href="#[a3]">Proc_GetFwInfo</a> from app_tc_ota.o(i.Proc_GetFwInfo) referenced from app_tc_ota.o(.constdata)
 <LI><a href="#[a4]">Proc_ImageUpdate</a> from app_tc_ota.o(i.Proc_ImageUpdate) referenced from app_tc_ota.o(.constdata)
 <LI><a href="#[98]">Proc_OnOff</a> from app_google.o(i.Proc_OnOff) referenced from app_google.o(.constdata)
 <LI><a href="#[9c]">Proc_Provision</a> from app_google.o(i.Proc_Provision) referenced from app_google.o(.constdata)
 <LI><a href="#[a2]">Proc_Reset</a> from app_tc_ota.o(i.Proc_Reset) referenced from app_tc_ota.o(.constdata)
 <LI><a href="#[a0]">Proc_StartOTA</a> from app_tc_ota.o(i.Proc_StartOTA) referenced from app_tc_ota.o(.constdata)
 <LI><a href="#[9f]">Proc_SyncFwVersion</a> from app_tc_ota.o(i.Proc_SyncFwVersion) referenced from app_tc_ota.o(.constdata)
 <LI><a href="#[9d]">Proc_UnProvision</a> from app_google.o(i.Proc_UnProvision) referenced from app_google.o(.constdata)
 <LI><a href="#[6]">Reboot_Timer_Handler</a> from app_google.o(i.Reboot_Timer_Handler) referenced from app_google.o(i.APP_Google_Init)
 <LI><a href="#[a]">Reboot_timer_handler</a> from app_tc_ota.o(i.Reboot_timer_handler) referenced from app_tc_ota.o(i.Proc_Reset)
 <LI><a href="#[249]">Reset_Handler</a> from syscall.txt(ABSOLUTE) referenced from app_boot_vectors.o(RESET)
 <LI><a href="#[8]">Reset_Timer_Handler</a> from app_platfrom.o(i.Reset_Timer_Handler) referenced from app_platfrom.o(i.APP_Platfrom_Init)
 <LI><a href="#[24f]">SVC_Handler</a> from app_boot_vectors.o(ram_code) referenced from app_boot_vectors.o(RESET)
 <LI><a href="#[7]">Save_Timer_Handler</a> from app_mem.o(i.Save_Timer_Handler) referenced from app_mem.o(i.APP_MEM_Init)
 <LI><a href="#[252]">SysTick_Handler</a> from syscall.txt(ABSOLUTE) referenced from app_boot_vectors.o(RESET)
 <LI><a href="#[b]">TC_OTA_gatt_msg_handler</a> from tc_ota_service.o(i.TC_OTA_gatt_msg_handler) referenced from tc_ota_service.o(i.TC_OTA_gatt_add_service)
 <LI><a href="#[24e]">UsageFault_Handler</a> from syscall.txt(ABSOLUTE) referenced from app_boot_vectors.o(RESET)
 <LI><a href="#[260]">__asm___10_patch_rf_c_e73c1e89__rf_rssi_convert_patch</a> from patch_rf.o(ram_code) referenced from patch_rf.o(ram_code)
 <LI><a href="#[4]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[30]">actual_set_response</a> from light_lightness_setup_server.o(i.actual_set_response) referenced from light_lightness_setup_server.o(i.handle_actual_set)
 <LI><a href="#[25c]">adc_isr</a> from app_boot_vectors.o(ram_code) referenced from app_boot_vectors.o(RESET)
 <LI><a href="#[274]">adv_tx_free_imp</a> from patch_rf.o(ram_code) referenced from patch.o(.data)
 <LI><a href="#[11c]">app_get_current_rssi_rsp</a> from app_task.o(i.app_get_current_rssi_rsp) referenced from app_task.o(.constdata)
 <LI><a href="#[27a]">app_main</a> from entry.o(i.app_main) referenced from jump_table.o(jump_table_2)
 <LI><a href="#[17]">app_mesh_store_info_timer_handler</a> from sig_mesh_info.o(i.app_mesh_store_info_timer_handler) referenced from sig_mesh_info.o(i.app_mesh_store_info_timer_init)
 <LI><a href="#[f4]">app_sec_msg_dflt_handler</a> from app_sec.o(i.app_sec_msg_dflt_handler) referenced from app_sec.o(.constdata)
 <LI><a href="#[18]">appm_adv_recv_gapm_cmp</a> from app.o(i.appm_adv_recv_gapm_cmp) referenced from app.o(i.appm_delete_act)
 <LI><a href="#[18]">appm_adv_recv_gapm_cmp</a> from app.o(i.appm_adv_recv_gapm_cmp) referenced from app.o(i.appm_set_advertising_data)
 <LI><a href="#[18]">appm_adv_recv_gapm_cmp</a> from app.o(i.appm_adv_recv_gapm_cmp) referenced from app.o(i.appm_set_per_adv_data)
 <LI><a href="#[18]">appm_adv_recv_gapm_cmp</a> from app.o(i.appm_adv_recv_gapm_cmp) referenced from app.o(i.appm_set_scan_response_data)
 <LI><a href="#[18]">appm_adv_recv_gapm_cmp</a> from app.o(i.appm_adv_recv_gapm_cmp) referenced from app.o(i.appm_start_advertising)
 <LI><a href="#[18]">appm_adv_recv_gapm_cmp</a> from app.o(i.appm_adv_recv_gapm_cmp) referenced from app.o(i.appm_stop_advertising)
 <LI><a href="#[1a]">appm_conn_recv_gapm_cmp</a> from app_conn.o(i.appm_conn_recv_gapm_cmp) referenced from app_conn.o(i.appm_start_conn)
 <LI><a href="#[1a]">appm_conn_recv_gapm_cmp</a> from app_conn.o(i.appm_conn_recv_gapm_cmp) referenced from app_conn.o(i.appm_stop_conn)
 <LI><a href="#[d]">appm_init_imp</a> from app.o(i.appm_init_imp) referenced from entry.o(i.app_main)
 <LI><a href="#[113]">appm_msg_handler</a> from app_task.o(i.appm_msg_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[19]">appm_scan_recv_gapm_cmp</a> from app.o(i.appm_scan_recv_gapm_cmp) referenced from app.o(i.appm_delete_act)
 <LI><a href="#[1f8]">attc_err_rsp_handler</a> from attc.o(i.attc_err_rsp_handler) referenced from attc.o(.constdata)
 <LI><a href="#[1ee]">attc_exc_mtu_rsp_handler</a> from attc.o(i.attc_exc_mtu_rsp_handler) referenced from attc.o(.constdata)
 <LI><a href="#[1f7]">attc_exe_wr_rsp_handler</a> from attc.o(i.attc_exe_wr_rsp_handler) referenced from attc.o(.constdata)
 <LI><a href="#[1f0]">attc_find_by_type_rsp_handler</a> from attc.o(i.attc_find_by_type_rsp_handler) referenced from attc.o(.constdata)
 <LI><a href="#[1ef]">attc_find_info_rsp_handler</a> from attc.o(i.attc_find_info_rsp_handler) referenced from attc.o(.constdata)
 <LI><a href="#[1f9]">attc_hdl_val_ntf_ind_handler</a> from attc.o(i.attc_hdl_val_ntf_ind_handler) referenced 2 times from attc.o(.constdata)
 <LI><a href="#[1f6]">attc_prep_wr_rsp_handler</a> from attc.o(i.attc_prep_wr_rsp_handler) referenced from attc.o(.constdata)
 <LI><a href="#[1f2]">attc_rd_by_grp_type_rsp_handler</a> from attc.o(i.attc_rd_by_grp_type_rsp_handler) referenced from attc.o(.constdata)
 <LI><a href="#[1f1]">attc_rd_by_type_rsp_handler</a> from attc.o(i.attc_rd_by_type_rsp_handler) referenced from attc.o(.constdata)
 <LI><a href="#[1f4]">attc_rd_mult_rsp_handler</a> from attc.o(i.attc_rd_mult_rsp_handler) referenced from attc.o(.constdata)
 <LI><a href="#[1f3]">attc_rd_rsp_handler</a> from attc.o(i.attc_rd_rsp_handler) referenced 2 times from attc.o(.constdata)
 <LI><a href="#[1f5]">attc_wr_rsp_handler</a> from attc.o(i.attc_wr_rsp_handler) referenced from attc.o(.constdata)
 <LI><a href="#[195]">atts_execute_write_req</a> from atts.o(i.atts_execute_write_req) referenced from atts.o(.constdata)
 <LI><a href="#[18b]">atts_find_by_type_req</a> from atts.o(i.atts_find_by_type_req) referenced from atts.o(.constdata)
 <LI><a href="#[18a]">atts_find_info_req</a> from atts.o(i.atts_find_info_req) referenced from atts.o(.constdata)
 <LI><a href="#[189]">atts_mtu_exc_req</a> from atts.o(i.atts_mtu_exc_req) referenced from atts.o(.constdata)
 <LI><a href="#[194]">atts_prepare_write_req</a> from atts.o(i.atts_prepare_write_req) referenced from atts.o(.constdata)
 <LI><a href="#[18f]">atts_read_blob_req</a> from atts.o(i.atts_read_blob_req) referenced from atts.o(.constdata)
 <LI><a href="#[18d]">atts_read_by_grp_type_req</a> from atts.o(i.atts_read_by_grp_type_req) referenced from atts.o(.constdata)
 <LI><a href="#[18c]">atts_read_by_type_req</a> from atts.o(i.atts_read_by_type_req) referenced from atts.o(.constdata)
 <LI><a href="#[190]">atts_read_mult_req</a> from atts.o(i.atts_read_mult_req) referenced from atts.o(.constdata)
 <LI><a href="#[18e]">atts_read_req</a> from atts.o(i.atts_read_req) referenced from atts.o(.constdata)
 <LI><a href="#[191]">atts_write_cmd</a> from atts.o(i.atts_write_cmd) referenced from atts.o(.constdata)
 <LI><a href="#[192]">atts_write_req</a> from atts.o(i.atts_write_req) referenced from atts.o(.constdata)
 <LI><a href="#[193]">atts_write_signed</a> from atts.o(i.atts_write_signed) referenced from atts.o(.constdata)
 <LI><a href="#[1b]">ble_bond_addr_resolve_cb</a> from user_bond_manage.o(i.ble_bond_addr_resolve_cb) referenced from user_bond_manage.o(i.ble_bond_check)
 <LI><a href="#[1c]">ble_bond_get_info</a> from user_bond_manage.o(i.ble_bond_get_info) referenced from user_bond_manage.o(i.ble_bond_init)
 <LI><a href="#[1d]">ble_bond_store_info</a> from user_bond_manage.o(i.ble_bond_store_info) referenced from user_bond_manage.o(i.ble_bond_init)
 <LI><a href="#[d5]">blob_block_get</a> from blob_procedure_server.o(i.blob_block_get) referenced from blob_transfer_server.o(.constdata)
 <LI><a href="#[d6]">blob_block_start</a> from blob_procedure_server.o(i.blob_block_start) referenced from blob_transfer_server.o(.constdata)
 <LI><a href="#[d7]">blob_chunk_transfer</a> from blob_procedure_server.o(i.blob_chunk_transfer) referenced from blob_transfer_server.o(.constdata)
 <LI><a href="#[d8]">blob_information_get</a> from blob_procedure_server.o(i.blob_information_get) referenced from blob_transfer_server.o(.constdata)
 <LI><a href="#[d4]">blob_transfer_cancel</a> from blob_procedure_server.o(i.blob_transfer_cancel) referenced from blob_transfer_server.o(.constdata)
 <LI><a href="#[d2]">blob_transfer_get</a> from blob_procedure_server.o(i.blob_transfer_get) referenced from blob_transfer_server.o(.constdata)
 <LI><a href="#[26d]">blob_transfer_server_msg_handler</a> from blob_transfer_server.o(i.blob_transfer_server_msg_handler) referenced from sig_mesh_led.o(.data)
 <LI><a href="#[d3]">blob_transfer_start</a> from blob_procedure_server.o(i.blob_transfer_start) referenced from blob_transfer_server.o(.constdata)
 <LI><a href="#[26f]">con_max_lat_calc_patch</a> from patch_rf.o(i.con_max_lat_calc_patch) referenced from patch.o(.data)
 <LI><a href="#[25a]">exti_isr_ram</a> from driver_exti.o(ram_code) referenced from app_boot_vectors.o(RESET)
 <LI><a href="#[e2]">firmware_update_apply</a> from firmware_update_procedure_server.o(i.firmware_update_apply) referenced from firmware_update_server.o(.constdata)
 <LI><a href="#[e1]">firmware_update_cancel</a> from firmware_update_procedure_server.o(i.firmware_update_cancel) referenced from firmware_update_server.o(.constdata)
 <LI><a href="#[e3]">firmware_update_fw_meta_check</a> from firmware_update_procedure_server.o(i.firmware_update_fw_meta_check) referenced from firmware_update_server.o(.constdata)
 <LI><a href="#[df]">firmware_update_get</a> from firmware_update_procedure_server.o(i.firmware_update_get) referenced from firmware_update_server.o(.constdata)
 <LI><a href="#[e4]">firmware_update_info_get</a> from firmware_update_procedure_server.o(i.firmware_update_info_get) referenced from firmware_update_server.o(.constdata)
 <LI><a href="#[26e]">firmware_update_server_msg_handler</a> from firmware_update_server.o(i.firmware_update_server_msg_handler) referenced from sig_mesh_led.o(.data)
 <LI><a href="#[e0]">firmware_update_start</a> from firmware_update_procedure_server.o(i.firmware_update_start) referenced from firmware_update_server.o(.constdata)
 <LI><a href="#[5]">fputc</a> from syscall.txt(ABSOLUTE) referenced from _printf_char_file.o(.text)
 <LI><a href="#[272]">frspim_rd</a> from entry.o(ram_code) referenced from patch.o(.data)
 <LI><a href="#[271]">frspim_wr</a> from entry.o(ram_code) referenced from patch.o(.data)
 <LI><a href="#[133]">gapc_bond_cfm_handler</a> from gapc_task.o(i.gapc_bond_cfm_handler) referenced from gapc_task.o(.constdata)
 <LI><a href="#[132]">gapc_bond_cmd_handler</a> from gapc_task.o(i.gapc_bond_cmd_handler) referenced from gapc_task.o(.constdata)
 <LI><a href="#[f7]">gapc_bond_ind_handler</a> from app_sec.o(i.gapc_bond_ind_handler) referenced from app_sec.o(.constdata)
 <LI><a href="#[f6]">gapc_bond_req_ind_handler</a> from app_sec.o(i.gapc_bond_req_ind_handler) referenced from app_sec.o(.constdata)
 <LI><a href="#[121]">gapc_cmp_evt_handler</a> from app_task.o(i.gapc_cmp_evt_handler) referenced 4 times from app_task.o(.constdata)
 <LI><a href="#[129]">gapc_connection_cfm_handler</a> from gapc_task.o(i.gapc_connection_cfm_handler) referenced from gapc_task.o(.constdata)
 <LI><a href="#[11f]">gapc_connection_req_ind_handler</a> from app_task.o(i.gapc_connection_req_ind_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[127]">gapc_default_msg_handler</a> from gapc_task.o(i.gapc_default_msg_handler) referenced from gapc_task.o(.constdata)
 <LI><a href="#[128]">gapc_disconnect_cmd_handler</a> from gapc_task.o(i.gapc_disconnect_cmd_handler) referenced from gapc_task.o(.constdata)
 <LI><a href="#[122]">gapc_disconnect_ind_handler</a> from app_task.o(i.gapc_disconnect_ind_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[135]">gapc_encrypt_cfm_handler</a> from gapc_task.o(i.gapc_encrypt_cfm_handler) referenced from gapc_task.o(.constdata)
 <LI><a href="#[134]">gapc_encrypt_cmd_handler</a> from gapc_task.o(i.gapc_encrypt_cmd_handler) referenced from gapc_task.o(.constdata)
 <LI><a href="#[f9]">gapc_encrypt_ind_handler</a> from app_sec.o(i.gapc_encrypt_ind_handler) referenced from app_sec.o(.constdata)
 <LI><a href="#[f8]">gapc_encrypt_req_ind_handler</a> from app_sec.o(i.gapc_encrypt_req_ind_handler) referenced from app_sec.o(.constdata)
 <LI><a href="#[13e]">gapc_gen_dh_key_ind_handler</a> from gapc_task.o(i.gapc_gen_dh_key_ind_handler) referenced from gapc_task.o(.constdata)
 <LI><a href="#[c]">gapc_get_conidx_imp</a> from gapc.o(i.gapc_get_conidx_imp) referenced from entry.o(i.app_main)
 <LI><a href="#[143]">gapc_get_dev_info_cfm_handler</a> from gapc_task.o(i.gapc_get_dev_info_cfm_handler) referenced from gapc_task.o(.constdata)
 <LI><a href="#[11d]">gapc_get_dev_info_req_ind_handler</a> from app_task.o(i.gapc_get_dev_info_req_ind_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[12a]">gapc_get_info_cmd_handler</a> from gapc_task.o(i.gapc_get_info_cmd_handler) referenced from gapc_task.o(.constdata)
 <LI><a href="#[145]">gapc_hci_handler</a> from gapc_hci.o(i.gapc_hci_handler) referenced 4 times from gapc_task.o(.constdata)
 <LI><a href="#[13f]">gapc_key_press_notification_cmd_handler</a> from gapc_task.o(i.gapc_key_press_notification_cmd_handler) referenced from gapc_task.o(.constdata)
 <LI><a href="#[12e]">gapc_param_update_cfm_handler</a> from gapc_task.o(i.gapc_param_update_cfm_handler) referenced from gapc_task.o(.constdata)
 <LI><a href="#[12d]">gapc_param_update_cmd_handler</a> from gapc_task.o(i.gapc_param_update_cmd_handler) referenced from gapc_task.o(.constdata)
 <LI><a href="#[120]">gapc_param_update_req_ind_handler</a> from app_task.o(i.gapc_param_update_req_ind_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[178]">gapc_peer_att_info_ind_handler</a> from gapm_init.o(i.gapc_peer_att_info_ind_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[124]">gapc_peer_features_ind_handler</a> from app_task.o(i.gapc_peer_features_ind_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[123]">gapc_peer_ver_ind_handler</a> from app_task.o(i.gapc_peer_ver_ind_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[136]">gapc_security_cmd_handler</a> from gapc_task.o(i.gapc_security_cmd_handler) referenced from gapc_task.o(.constdata)
 <LI><a href="#[f5]">gapc_security_ind_handler</a> from app_sec.o(i.gapc_security_ind_handler) referenced from app_sec.o(.constdata)
 <LI><a href="#[144]">gapc_set_dev_info_cfm_handler</a> from gapc_task.o(i.gapc_set_dev_info_cfm_handler) referenced from gapc_task.o(.constdata)
 <LI><a href="#[11e]">gapc_set_dev_info_req_ind_handler</a> from app_task.o(i.gapc_set_dev_info_req_ind_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[146]">gapc_set_le_ping_to_handler</a> from gapc_task.o(i.gapc_set_le_ping_to_handler) referenced from gapc_task.o(.constdata)
 <LI><a href="#[147]">gapc_set_le_pkt_size_handler</a> from gapc_task.o(i.gapc_set_le_pkt_size_handler) referenced from gapc_task.o(.constdata)
 <LI><a href="#[148]">gapc_set_phy_cmd_handler</a> from gapc_task.o(i.gapc_set_phy_cmd_handler) referenced from gapc_task.o(.constdata)
 <LI><a href="#[131]">gapc_set_pref_slave_latency_cmd_handler</a> from gapc_task.o(i.gapc_set_pref_slave_latency_cmd_handler) referenced from gapc_task.o(.constdata)
 <LI><a href="#[137]">gapc_sign_cmd_handler</a> from gapc_task.o(i.gapc_sign_cmd_handler) referenced from gapc_task.o(.constdata)
 <LI><a href="#[1ad]">gapc_sign_ind_handler</a> from gattc_task.o(i.gapc_sign_ind_handler) referenced from gattc_task.o(.constdata)
 <LI><a href="#[13d]">gapc_smp_rep_attempts_timer_handler</a> from gapc_task.o(i.gapc_smp_rep_attempts_timer_handler) referenced from gapc_task.o(.constdata)
 <LI><a href="#[13c]">gapc_smp_timeout_timer_ind_handler</a> from gapc_task.o(i.gapc_smp_timeout_timer_ind_handler) referenced from gapc_task.o(.constdata)
 <LI><a href="#[130]">gapc_update_conn_param_to_ind_handler</a> from gapc_task.o(i.gapc_update_conn_param_to_ind_handler) referenced from gapc_task.o(.constdata)
 <LI><a href="#[179]">gapm_activity_create_cmd_handler</a> from gapm_actv.o(i.gapm_activity_create_cmd_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[10a]">gapm_activity_created_ind_handler</a> from m_al_activity.o(i.gapm_activity_created_ind_handler) referenced 2 times from m_al_task.o(.constdata)
 <LI><a href="#[17c]">gapm_activity_delete_cmd_handler</a> from gapm_actv.o(i.gapm_activity_delete_cmd_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[17a]">gapm_activity_start_cmd_handler</a> from gapm_actv.o(i.gapm_activity_start_cmd_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[17b]">gapm_activity_stop_cmd_handler</a> from gapm_actv.o(i.gapm_activity_stop_cmd_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[10b]">gapm_activity_stopped_ind_handler</a> from m_al_activity.o(i.gapm_activity_stopped_ind_handler) referenced 2 times from m_al_task.o(.constdata)
 <LI><a href="#[17f]">gapm_addr_renew_cmd_handler</a> from gapm_addr.o(i.gapm_addr_renew_cmd_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[180]">gapm_addr_renew_to_ind_handler</a> from gapm_addr.o(i.gapm_addr_renew_to_ind_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[11b]">gapm_addr_solved_ind_handler</a> from app_task.o(i.gapm_addr_solved_ind_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[22]">gapm_adv_delete</a> from gapm_adv.o(i.gapm_adv_delete) referenced from gapm_adv.o(i.gapm_adv_create)
 <LI><a href="#[20]">gapm_adv_start</a> from gapm_adv.o(i.gapm_adv_start) referenced from gapm_adv.o(i.gapm_adv_create)
 <LI><a href="#[21]">gapm_adv_stop</a> from gapm_adv.o(i.gapm_adv_stop) referenced from gapm_adv.o(i.gapm_adv_create)
 <LI><a href="#[17e]">gapm_auto_conn_to_ind_handler</a> from gapm_init.o(i.gapm_auto_conn_to_ind_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[109]">gapm_cmp_evt_handler</a> from m_al_task.o(i.gapm_cmp_evt_handler) referenced 4 times from m_al_task.o(.constdata)
 <LI><a href="#[16d]">gapm_default_msg_handler</a> from gapm_task.o(i.gapm_default_msg_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[181]">gapm_dev_bdaddr_ind_handler</a> from gapm_addr.o(i.gapm_dev_bdaddr_ind_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[125]">gapm_enc_block_ind_handler</a> from app_task.o(i.gapm_enc_block_ind_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[10c]">gapm_ext_adv_report_ind_handler</a> from m_al_scan.o(i.gapm_ext_adv_report_ind_handler) referenced 2 times from m_al_task.o(.constdata)
 <LI><a href="#[175]">gapm_gen_dh_key_cmd_handler</a> from gapm_smp.o(i.gapm_gen_dh_key_cmd_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[107]">gapm_gen_dh_key_ind_handler</a> from m_al_sec.o(i.gapm_gen_dh_key_ind_handler) referenced from m_al_task.o(.constdata)
 <LI><a href="#[173]">gapm_gen_rand_addr_cmd_handler</a> from gapm_smp.o(i.gapm_gen_rand_addr_cmd_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[118]">gapm_gen_rand_nb_ind_handler</a> from app_task.o(i.gapm_gen_rand_nb_ind_handler) referenced 2 times from app_task.o(.constdata)
 <LI><a href="#[171]">gapm_get_dev_info_cmd_handler</a> from gapm_cfg.o(i.gapm_get_dev_info_cmd_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[176]">gapm_get_pub_key_cmd_handler</a> from gapm_smp.o(i.gapm_get_pub_key_cmd_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[184]">gapm_get_ral_addr_cmd_handler</a> from gapm_list.o(i.gapm_get_ral_addr_cmd_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[187]">gapm_hci_handler</a> from gapm_task.o(i.gapm_hci_handler) referenced 3 times from gapm_task.o(.constdata)
 <LI><a href="#[25]">gapm_init_delete</a> from gapm_init.o(i.gapm_init_delete) referenced from gapm_init.o(i.gapm_init_create)
 <LI><a href="#[23]">gapm_init_start</a> from gapm_init.o(i.gapm_init_start) referenced from gapm_init.o(i.gapm_init_create)
 <LI><a href="#[24]">gapm_init_stop</a> from gapm_init.o(i.gapm_init_stop) referenced from gapm_init.o(i.gapm_init_create)
 <LI><a href="#[183]">gapm_list_set_cmd_handler</a> from gapm_list.o(i.gapm_list_set_cmd_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[28]">gapm_per_sync_delete</a> from gapm_per_sync.o(i.gapm_per_sync_delete) referenced from gapm_per_sync.o(i.gapm_per_sync_create)
 <LI><a href="#[26]">gapm_per_sync_start</a> from gapm_per_sync.o(i.gapm_per_sync_start) referenced from gapm_per_sync.o(i.gapm_per_sync_create)
 <LI><a href="#[27]">gapm_per_sync_stop</a> from gapm_per_sync.o(i.gapm_per_sync_stop) referenced from gapm_per_sync.o(i.gapm_per_sync_create)
 <LI><a href="#[114]">gapm_profile_added_ind_handler</a> from app_task.o(i.gapm_profile_added_ind_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[185]">gapm_profile_task_add_cmd_handler</a> from gapm_cfg.o(i.gapm_profile_task_add_cmd_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[108]">gapm_pub_key_ind_handler</a> from m_al_sec.o(i.gapm_pub_key_ind_handler) referenced from m_al_task.o(.constdata)
 <LI><a href="#[16e]">gapm_reset_cmd_handler</a> from gapm_cfg.o(i.gapm_reset_cmd_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[172]">gapm_resolv_addr_cmd_handler</a> from gapm_smp.o(i.gapm_resolv_addr_cmd_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[2b]">gapm_scan_delete</a> from gapm_scan.o(i.gapm_scan_delete) referenced from gapm_scan.o(i.gapm_scan_create)
 <LI><a href="#[29]">gapm_scan_start</a> from gapm_scan.o(i.gapm_scan_start) referenced from gapm_scan.o(i.gapm_scan_create)
 <LI><a href="#[2a]">gapm_scan_stop</a> from gapm_scan.o(i.gapm_scan_stop) referenced from gapm_scan.o(i.gapm_scan_create)
 <LI><a href="#[17d]">gapm_set_adv_data_cmd_handler</a> from gapm_adv.o(i.gapm_set_adv_data_cmd_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[170]">gapm_set_channel_map_cmd_handler</a> from gapm_cfg.o(i.gapm_set_channel_map_cmd_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[16f]">gapm_set_dev_config_cmd_handler</a> from gapm_cfg.o(i.gapm_set_dev_config_cmd_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[188]">gapm_set_irk_cmd_handler</a> from gapm_cfg.o(i.gapm_set_irk_cmd_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[2c]">gapm_smp_encrypt_rsp</a> from gapm_smp.o(i.gapm_smp_encrypt_rsp) referenced from gapm_smp.o(i.gapm_smp_encrypt_req)
 <LI><a href="#[2d]">gapm_smp_rand_rsp</a> from gapm_smp.o(i.gapm_smp_rand_rsp) referenced from gapm_smp.o(i.gapm_smp_rand_req)
 <LI><a href="#[11a]">gapm_sync_established_ind_handler</a> from app_task.o(i.gapm_sync_established_ind_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[186]">gapm_unknown_task_msg_handler</a> from gapm_task.o(i.gapm_unknown_task_msg_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[174]">gapm_use_enc_block_cmd_handler</a> from gapm_smp.o(i.gapm_use_enc_block_cmd_handler) referenced 2 times from gapm_task.o(.constdata)
 <LI><a href="#[106]">gapm_use_enc_block_ind_handler</a> from m_al_sec.o(i.gapm_use_enc_block_ind_handler) referenced 2 times from m_al_task.o(.constdata)
 <LI><a href="#[2f]">gatt_msg_default_handler</a> from gatt_api.o(i.gatt_msg_default_handler) referenced from gatt_api.o(i.gatt_service_init)
 <LI><a href="#[2e]">gatt_servcie_added</a> from gatt_api.o(i.gatt_servcie_added) referenced from gatt_api.o(i.gatt_profile_task_add)
 <LI><a href="#[279]">gatt_service_connection_cleanup</a> from gatt_api.o(i.gatt_service_connection_cleanup) referenced from gatt_api.o(.data)
 <LI><a href="#[278]">gatt_service_connection_created</a> from gatt_api.o(i.gatt_service_connection_created) referenced from gatt_api.o(.data)
 <LI><a href="#[277]">gatt_service_destroy</a> from gatt_api.o(i.gatt_service_destroy) referenced from gatt_api.o(.data)
 <LI><a href="#[276]">gatt_service_init</a> from gatt_api.o(i.gatt_service_init) referenced from gatt_api.o(.data)
 <LI><a href="#[1a7]">gattc_att_info_cfm_handler</a> from gattc_task.o(i.gattc_att_info_cfm_handler) referenced from gattc_task.o(.constdata)
 <LI><a href="#[141]">gattc_att_info_req_ind_handler</a> from gapc_task.o(i.gattc_att_info_req_ind_handler) referenced 2 times from gapc_task.o(.constdata)
 <LI><a href="#[10d]">gattc_cmp_evt_handler</a> from m_al_con.o(i.gattc_cmp_evt_handler) referenced 3 times from m_al_task.o(.constdata)
 <LI><a href="#[196]">gattc_default_msg_handler</a> from gattc_task.o(i.gattc_default_msg_handler) referenced from gattc_task.o(.constdata)
 <LI><a href="#[1a4]">gattc_disc_char_desc_ind_handler</a> from gattc_task.o(i.gattc_disc_char_desc_ind_handler) referenced from gattc_task.o(.constdata)
 <LI><a href="#[1a3]">gattc_disc_char_ind_handler</a> from gattc_task.o(i.gattc_disc_char_ind_handler) referenced from gattc_task.o(.constdata)
 <LI><a href="#[198]">gattc_disc_cmd_handler</a> from gattc_task.o(i.gattc_disc_cmd_handler) referenced from gattc_task.o(.constdata)
 <LI><a href="#[1a2]">gattc_disc_svc_incl_ind_handler</a> from gattc_task.o(i.gattc_disc_svc_incl_ind_handler) referenced from gattc_task.o(.constdata)
 <LI><a href="#[1a1]">gattc_disc_svc_ind_handler</a> from gattc_task.o(i.gattc_disc_svc_ind_handler) referenced from gattc_task.o(.constdata)
 <LI><a href="#[19b]">gattc_event_cfm_handler</a> from gattc_task.o(i.gattc_event_cfm_handler) referenced from gattc_task.o(.constdata)
 <LI><a href="#[126]">gattc_event_ind_handler</a> from app_task.o(i.gattc_event_ind_handler) referenced from app_task.o(.constdata)
 <LI><a href="#[197]">gattc_exc_mtu_cmd_handler</a> from gattc_task.o(i.gattc_exc_mtu_cmd_handler) referenced from gattc_task.o(.constdata)
 <LI><a href="#[19c]">gattc_execute_write_cmd_handler</a> from gattc_task.o(i.gattc_execute_write_cmd_handler) referenced from gattc_task.o(.constdata)
 <LI><a href="#[1a5]">gattc_read_cfm_handler</a> from gattc_task.o(i.gattc_read_cfm_handler) referenced from gattc_task.o(.constdata)
 <LI><a href="#[199]">gattc_read_cmd_handler</a> from gattc_task.o(i.gattc_read_cmd_handler) referenced from gattc_task.o(.constdata)
 <LI><a href="#[12b]">gattc_read_ind_handler</a> from gapc_task.o(i.gattc_read_ind_handler) referenced from gapc_task.o(.constdata)
 <LI><a href="#[10e]">gattc_read_req_ind_handler</a> from m_al_con.o(i.gattc_read_req_ind_handler) referenced 3 times from m_al_task.o(.constdata)
 <LI><a href="#[19d]">gattc_reg_to_peer_evt_cmd_handler</a> from gattc_task.o(i.gattc_reg_to_peer_evt_cmd_handler) referenced from gattc_task.o(.constdata)
 <LI><a href="#[19f]">gattc_sdp_svc_disc_cmd_handler</a> from gattc_task.o(i.gattc_sdp_svc_disc_cmd_handler) referenced from gattc_task.o(.constdata)
 <LI><a href="#[1a9]">gattc_send_evt_cmd_handler</a> from gattc_task.o(i.gattc_send_evt_cmd_handler) referenced from gattc_task.o(.constdata)
 <LI><a href="#[1a8]">gattc_send_svc_changed_cmd_handler</a> from gattc_task.o(i.gattc_send_svc_changed_cmd_handler) referenced from gattc_task.o(.constdata)
 <LI><a href="#[19e]">gattc_timeout_handler</a> from gattc_task.o(i.gattc_timeout_handler) referenced 2 times from gattc_task.o(.constdata)
 <LI><a href="#[1a6]">gattc_write_cfm_handler</a> from gattc_task.o(i.gattc_write_cfm_handler) referenced from gattc_task.o(.constdata)
 <LI><a href="#[19a]">gattc_write_cmd_handler</a> from gattc_task.o(i.gattc_write_cmd_handler) referenced from gattc_task.o(.constdata)
 <LI><a href="#[10f]">gattc_write_req_ind_handler</a> from m_al_con.o(i.gattc_write_req_ind_handler) referenced 3 times from m_al_task.o(.constdata)
 <LI><a href="#[1b1]">gattm_default_msg_handler</a> from gattm_task.o(i.gattm_default_msg_handler) referenced from gattm_task.o(.constdata)
 <LI><a href="#[265]">generic_dtt_server_msg_handler</a> from generic_dtt_server.o(i.generic_dtt_server_msg_handler) referenced from sig_mesh_led.o(.data)
 <LI><a href="#[267]">generic_level_server_msg_handler</a> from generic_level_server.o(i.generic_level_server_msg_handler) referenced 4 times from sig_mesh_led.o(.data)
 <LI><a href="#[264]">generic_onoff_server_msg_handler</a> from generic_onoff_server.o(i.generic_onoff_server_msg_handler) referenced from sig_mesh_led.o(.data)
 <LI><a href="#[266]">generic_ponoff_server_msg_handler</a> from generic_ponoff_setup_server.o(i.generic_ponoff_server_msg_handler) referenced 2 times from sig_mesh_led.o(.data)
 <LI><a href="#[b0]">handle_actual_set</a> from light_lightness_setup_server.o(i.handle_actual_set) referenced 2 times from light_lightness_setup_server.o(.constdata)
 <LI><a href="#[ce]">handle_blob_block_get</a> from blob_transfer_server.o(i.handle_blob_block_get) referenced from blob_transfer_server.o(.constdata)
 <LI><a href="#[cf]">handle_blob_block_start</a> from blob_transfer_server.o(i.handle_blob_block_start) referenced from blob_transfer_server.o(.constdata)
 <LI><a href="#[d1]">handle_blob_info_get</a> from blob_transfer_server.o(i.handle_blob_info_get) referenced from blob_transfer_server.o(.constdata)
 <LI><a href="#[cb]">handle_blob_transfer_get</a> from blob_transfer_server.o(i.handle_blob_transfer_get) referenced from blob_transfer_server.o(.constdata)
 <LI><a href="#[cc]">handle_blob_transfer_start</a> from blob_transfer_server.o(i.handle_blob_transfer_start) referenced from blob_transfer_server.o(.constdata)
 <LI><a href="#[d0]">handle_chunk_transfer</a> from blob_transfer_server.o(i.handle_chunk_transfer) referenced from blob_transfer_server.o(.constdata)
 <LI><a href="#[b4]">handle_default_get</a> from light_lightness_setup_server.o(i.handle_default_get) referenced 3 times from light_lightness_setup_server.o(.constdata)
 <LI><a href="#[b6]">handle_default_set</a> from light_lightness_setup_server.o(i.handle_default_set) referenced 6 times from light_lightness_setup_server.o(.constdata)
 <LI><a href="#[ad]">handle_delta_set</a> from generic_level_server.o(i.handle_delta_set) referenced 2 times from generic_level_server.o(.constdata)
 <LI><a href="#[de]">handle_fw_update_apply</a> from firmware_update_server.o(i.handle_fw_update_apply) referenced from firmware_update_server.o(.constdata)
 <LI><a href="#[dd]">handle_fw_update_cancel</a> from firmware_update_server.o(i.handle_fw_update_cancel) referenced from firmware_update_server.o(.constdata)
 <LI><a href="#[db]">handle_fw_update_get</a> from firmware_update_server.o(i.handle_fw_update_get) referenced from firmware_update_server.o(.constdata)
 <LI><a href="#[d9]">handle_fw_update_info_get</a> from firmware_update_server.o(i.handle_fw_update_info_get) referenced from firmware_update_server.o(.constdata)
 <LI><a href="#[da]">handle_fw_update_meta_check</a> from firmware_update_server.o(i.handle_fw_update_meta_check) referenced from firmware_update_server.o(.constdata)
 <LI><a href="#[dc]">handle_fw_update_start</a> from firmware_update_server.o(i.handle_fw_update_start) referenced from firmware_update_server.o(.constdata)
 <LI><a href="#[a6]">handle_get</a> from generic_onoff_server.o(i.handle_get) referenced 9 times from generic_onoff_server.o(.constdata)
 <LI><a href="#[b3]">handle_last_get</a> from light_lightness_setup_server.o(i.handle_last_get) referenced from light_lightness_setup_server.o(.constdata)
 <LI><a href="#[b1]">handle_linear_get</a> from light_lightness_setup_server.o(i.handle_linear_get) referenced from light_lightness_setup_server.o(.constdata)
 <LI><a href="#[b2]">handle_linear_set</a> from light_lightness_setup_server.o(i.handle_linear_set) referenced 2 times from light_lightness_setup_server.o(.constdata)
 <LI><a href="#[ae]">handle_move_set</a> from generic_level_server.o(i.handle_move_set) referenced 2 times from generic_level_server.o(.constdata)
 <LI><a href="#[b5]">handle_range_get</a> from light_lightness_setup_server.o(i.handle_range_get) referenced 2 times from light_lightness_setup_server.o(.constdata)
 <LI><a href="#[b7]">handle_range_set</a> from light_lightness_setup_server.o(i.handle_range_set) referenced 4 times from light_lightness_setup_server.o(.constdata)
 <LI><a href="#[a5]">handle_set</a> from generic_onoff_server.o(i.handle_set) referenced 16 times from generic_onoff_server.o(.constdata)
 <LI><a href="#[c6]">handle_target_get</a> from light_hsl_setup_server.o(i.handle_target_get) referenced from light_hsl_setup_server.o(.constdata)
 <LI><a href="#[be]">handle_temperature_get</a> from light_ctl_setup_server.o(i.handle_temperature_get) referenced from light_ctl_setup_server.o(.constdata)
 <LI><a href="#[ba]">handle_temperature_range_get</a> from light_ctl_setup_server.o(i.handle_temperature_range_get) referenced from light_ctl_setup_server.o(.constdata)
 <LI><a href="#[bd]">handle_temperature_range_set</a> from light_ctl_setup_server.o(i.handle_temperature_range_set) referenced 2 times from light_ctl_setup_server.o(.constdata)
 <LI><a href="#[bf]">handle_temperature_set</a> from light_ctl_setup_server.o(i.handle_temperature_set) referenced 2 times from light_ctl_setup_server.o(.constdata)
 <LI><a href="#[cd]">handle_transfer_cancel</a> from blob_transfer_server.o(i.handle_transfer_cancel) referenced from blob_transfer_server.o(.constdata)
 <LI><a href="#[1b7]">hci_acl_data_handler</a> from l2cc_task.o(i.hci_acl_data_handler) referenced from l2cc_task.o(.constdata)
 <LI><a href="#[1cc]">hci_auth_payl_to_exp_evt_handler</a> from gapc_hci.o(i.hci_auth_payl_to_exp_evt_handler) referenced from gapc_hci.o(.constdata)
 <LI><a href="#[14a]">hci_basic_cmd_cmp_evt_cfg_handler</a> from gapm_cfg.o(i.hci_basic_cmd_cmp_evt_cfg_handler) referenced 9 times from gapm_task.o(.constdata)
 <LI><a href="#[161]">hci_basic_cmd_cmp_evt_rl_cfg_handler</a> from gapm_cfg.o(i.hci_basic_cmd_cmp_evt_rl_cfg_handler) referenced 2 times from gapm_task.o(.constdata)
 <LI><a href="#[1c1]">hci_cmd_stat_event_handler</a> from gapc_hci.o(i.hci_cmd_stat_event_handler) referenced 5 times from gapc_hci.o(.constdata)
 <LI><a href="#[1ca]">hci_disc_cmp_evt_handler</a> from gapc_hci.o(i.hci_disc_cmp_evt_handler) referenced from gapc_hci.o(.constdata)
 <LI><a href="#[1cd]">hci_enc_chg_evt_handler</a> from gapc_hci.o(i.hci_enc_chg_evt_handler) referenced from gapc_hci.o(.constdata)
 <LI><a href="#[1ce]">hci_enc_key_refr_evt_handler</a> from gapc_hci.o(i.hci_enc_key_refr_evt_handler) referenced from gapc_hci.o(.constdata)
 <LI><a href="#[16b]">hci_le_adv_set_term_evt_handler</a> from gapm_adv.o(i.hci_le_adv_set_term_evt_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[1c8]">hci_le_ch_sel_algo_evt_handler</a> from gapc_hci.o(i.hci_le_ch_sel_algo_evt_handler) referenced from gapc_hci.o(.constdata)
 <LI><a href="#[15d]">hci_le_cmd_cmp_evt_addr_handler</a> from gapm_addr.o(i.hci_le_cmd_cmp_evt_addr_handler) referenced 2 times from gapm_task.o(.constdata)
 <LI><a href="#[156]">hci_le_cmd_cmp_evt_adv_handler</a> from gapm_adv.o(i.hci_le_cmd_cmp_evt_adv_handler) referenced 9 times from gapm_task.o(.constdata)
 <LI><a href="#[15c]">hci_le_cmd_cmp_evt_init_handler</a> from gapm_init.o(i.hci_le_cmd_cmp_evt_init_handler) referenced 2 times from gapm_task.o(.constdata)
 <LI><a href="#[155]">hci_le_cmd_cmp_evt_list_handler</a> from gapm_list.o(i.hci_le_cmd_cmp_evt_list_handler) referenced 7 times from gapm_task.o(.constdata)
 <LI><a href="#[15a]">hci_le_cmd_cmp_evt_per_sync_handler</a> from gapm_per_sync.o(i.hci_le_cmd_cmp_evt_per_sync_handler) referenced 3 times from gapm_task.o(.constdata)
 <LI><a href="#[159]">hci_le_cmd_cmp_evt_scan_handler</a> from gapm_scan.o(i.hci_le_cmd_cmp_evt_scan_handler) referenced 2 times from gapm_task.o(.constdata)
 <LI><a href="#[1c4]">hci_le_con_update_cmp_evt_handler</a> from gapc_hci.o(i.hci_le_con_update_cmp_evt_handler) referenced from gapc_hci.o(.constdata)
 <LI><a href="#[1c6]">hci_le_data_len_chg_evt_handler</a> from gapc_hci.o(i.hci_le_data_len_chg_evt_handler) referenced from gapc_hci.o(.constdata)
 <LI><a href="#[168]">hci_le_enh_con_cmp_evt_handler</a> from gapm_actv.o(i.hci_le_enh_con_cmp_evt_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[163]">hci_le_ext_adv_report_evt_handler</a> from gapm_scan.o(i.hci_le_ext_adv_report_evt_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[162]">hci_le_gen_dhkey_stat_evt_handler</a> from gapm_smp.o(i.hci_le_gen_dhkey_stat_evt_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[16a]">hci_le_generate_dhkey_cmp_evt_handler</a> from gapm_smp.o(i.hci_le_generate_dhkey_cmp_evt_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[1c9]">hci_le_ltk_request_evt_handler</a> from gapc_hci.o(i.hci_le_ltk_request_evt_handler) referenced from gapc_hci.o(.constdata)
 <LI><a href="#[166]">hci_le_per_adv_report_evt_handler</a> from gapm_per_sync.o(i.hci_le_per_adv_report_evt_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[165]">hci_le_per_adv_sync_est_evt_handler</a> from gapm_per_sync.o(i.hci_le_per_adv_sync_est_evt_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[167]">hci_le_per_adv_sync_lost_evt_handler</a> from gapm_per_sync.o(i.hci_le_per_adv_sync_lost_evt_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[1c7]">hci_le_phy_upd_cmp_evt_handler</a> from gapc_hci.o(i.hci_le_phy_upd_cmp_evt_handler) referenced from gapc_hci.o(.constdata)
 <LI><a href="#[15e]">hci_le_rd_adv_chnl_tx_pw_cmd_cmp_evt_handler</a> from gapm_cfg.o(i.hci_le_rd_adv_chnl_tx_pw_cmd_cmp_evt_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[14c]">hci_le_rd_buff_size_cmd_cmp_evt_handler</a> from gapm_cfg.o(i.hci_le_rd_buff_size_cmd_cmp_evt_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[169]">hci_le_rd_local_p256_public_key_cmp_evt_handler</a> from gapm_cfg.o(i.hci_le_rd_local_p256_public_key_cmp_evt_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[151]">hci_le_rd_max_data_len_cmd_cmp_evt_handler</a> from gapm_cfg.o(i.hci_le_rd_max_data_len_cmd_cmp_evt_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[158]">hci_le_rd_nb_supp_adv_sets_cmd_cmp_evt_handler</a> from gapm_cfg.o(i.hci_le_rd_nb_supp_adv_sets_cmd_cmp_evt_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[15b]">hci_le_rd_pal_size_cmd_cmp_evt_handler</a> from gapm_list.o(i.hci_le_rd_pal_size_cmd_cmp_evt_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[1be]">hci_le_rd_phy_cmd_cmp_evt_handler</a> from gapc_hci.o(i.hci_le_rd_phy_cmd_cmp_evt_handler) referenced from gapc_hci.o(.constdata)
 <LI><a href="#[160]">hci_le_rd_ral_addr_cmd_cmp_evt_handler</a> from gapm_list.o(i.hci_le_rd_ral_addr_cmd_cmp_evt_handler) referenced 2 times from gapm_task.o(.constdata)
 <LI><a href="#[15f]">hci_le_rd_ral_size_cmd_cmp_evt_handler</a> from gapm_list.o(i.hci_le_rd_ral_size_cmd_cmp_evt_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[1c3]">hci_le_rd_rem_feats_cmp_evt_handler</a> from gapc_hci.o(i.hci_le_rd_rem_feats_cmp_evt_handler) referenced from gapc_hci.o(.constdata)
 <LI><a href="#[153]">hci_le_rd_rf_path_comp_cmd_cmp_evt_handler</a> from gapm_cfg.o(i.hci_le_rd_rf_path_comp_cmd_cmp_evt_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[150]">hci_le_rd_suggted_dft_data_len_cmd_cmp_evt_handler</a> from gapm_cfg.o(i.hci_le_rd_suggted_dft_data_len_cmd_cmp_evt_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[152]">hci_le_rd_tx_pwr_cmd_cmp_evt_handler</a> from gapm_cfg.o(i.hci_le_rd_tx_pwr_cmd_cmp_evt_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[154]">hci_le_rd_wlst_size_cmd_cmp_evt_handler</a> from gapm_list.o(i.hci_le_rd_wlst_size_cmd_cmp_evt_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[157]">hci_le_read_max_adv_data_len_cmd_cmp_evt_handler</a> from gapm_cfg.o(i.hci_le_read_max_adv_data_len_cmd_cmp_evt_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[1c5]">hci_le_rem_con_param_req_evt_handler</a> from gapc_hci.o(i.hci_le_rem_con_param_req_evt_handler) referenced from gapc_hci.o(.constdata)
 <LI><a href="#[16c]">hci_le_scan_req_rcvd_evt_handler</a> from gapm_adv.o(i.hci_le_scan_req_rcvd_evt_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[164]">hci_le_scan_timeout_evt_handler</a> from gapm_scan.o(i.hci_le_scan_timeout_evt_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[1bd]">hci_le_set_data_len_cmd_cmp_evt_handler</a> from gapc_hci.o(i.hci_le_set_data_len_cmd_cmp_evt_handler) referenced from gapc_hci.o(.constdata)
 <LI><a href="#[1c2]">hci_le_start_enc_stat_evt_handler</a> from gapc_hci.o(i.hci_le_start_enc_stat_evt_handler) referenced from gapc_hci.o(.constdata)
 <LI><a href="#[1b6]">hci_nb_cmp_pkts_evt_handler</a> from l2cc_task.o(i.hci_nb_cmp_pkts_evt_handler) referenced from l2cc_task.o(.constdata)
 <LI><a href="#[1bb]">hci_rd_auth_payl_to_cmd_cmp_evt_handler</a> from gapc_hci.o(i.hci_rd_auth_payl_to_cmd_cmp_evt_handler) referenced from gapc_hci.o(.constdata)
 <LI><a href="#[14f]">hci_rd_bd_addr_cmd_cmp_evt_handler</a> from gapm_cfg.o(i.hci_rd_bd_addr_cmd_cmp_evt_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[14d]">hci_rd_buff_size_cmd_cmp_evt_handler</a> from gapm_cfg.o(i.hci_rd_buff_size_cmd_cmp_evt_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[1ba]">hci_rd_chnl_map_cmd_cmp_evt_handler</a> from gapc_hci.o(i.hci_rd_chnl_map_cmd_cmp_evt_handler) referenced from gapc_hci.o(.constdata)
 <LI><a href="#[14e]">hci_rd_local_ver_info_cmd_cmp_evt_handler</a> from gapm_cfg.o(i.hci_rd_local_ver_info_cmd_cmp_evt_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[1cb]">hci_rd_rem_ver_info_cmp_evt_handler</a> from gapc_hci.o(i.hci_rd_rem_ver_info_cmp_evt_handler) referenced from gapc_hci.o(.constdata)
 <LI><a href="#[1b9]">hci_rd_rssi_cmd_cmp_evt_handler</a> from gapc_hci.o(i.hci_rd_rssi_cmd_cmp_evt_handler) referenced from gapc_hci.o(.constdata)
 <LI><a href="#[14b]">hci_test_end_cmd_cmp_evt_handler</a> from gapm_cfg.o(i.hci_test_end_cmd_cmp_evt_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[1c0]">hci_vs_set_pref_slave_latency_cmd_cmp_evt_handler</a> from gapc_hci.o(i.hci_vs_set_pref_slave_latency_cmd_cmp_evt_handler) referenced from gapc_hci.o(.constdata)
 <LI><a href="#[1bc]">hci_wr_auth_payl_to_cmd_cmp_evt_handler</a> from gapc_hci.o(i.hci_wr_auth_payl_to_cmd_cmp_evt_handler) referenced from gapc_hci.o(.constdata)
 <LI><a href="#[259]">i2s_isr_ram</a> from driver_i2s.o(ram_code) referenced from app_boot_vectors.o(RESET)
 <LI><a href="#[1]">jump_table_memmory_init</a> from jump_table.o(i.jump_table_memmory_init) referenced from jump_table.o(jump_table_2)
 <LI><a href="#[2]">jump_table_param_get</a> from jump_table.o(i.jump_table_param_get) referenced from jump_table.o(jump_table_4)
 <LI><a href="#[3]">jump_table_param_set</a> from jump_table.o(i.jump_table_param_set) referenced from jump_table.o(jump_table_4)
 <LI><a href="#[105]">ke_msg_default_handler</a> from m_al_task.o(i.ke_msg_default_handler) referenced from m_al_task.o(.constdata)
 <LI><a href="#[1bf]">ke_msg_discard</a> from syscall.txt(ABSOLUTE) referenced 2 times from gapc_hci.o(.constdata)
 <LI><a href="#[1d0]">l2c_code_conn_param_upd_req_handler</a> from gapc_sig.o(i.l2c_code_conn_param_upd_req_handler) referenced 2 times from gapc_sig.o(.constdata)
 <LI><a href="#[1d1]">l2c_code_conn_param_upd_resp_handler</a> from gapc_sig.o(i.l2c_code_conn_param_upd_resp_handler) referenced 2 times from gapc_sig.o(.constdata)
 <LI><a href="#[1cf]">l2c_code_reject_handler</a> from gapc_sig.o(i.l2c_code_reject_handler) referenced 2 times from gapc_sig.o(.constdata)
 <LI><a href="#[138]">l2cc_cmp_evt_handler</a> from gapc_task.o(i.l2cc_cmp_evt_handler) referenced 2 times from gapc_task.o(.constdata)
 <LI><a href="#[1b5]">l2cc_dbg_pdu_send_cmd_handler</a> from l2cc_task.o(i.l2cc_dbg_pdu_send_cmd_handler) referenced from l2cc_task.o(.constdata)
 <LI><a href="#[1b2]">l2cc_default_msg_handler</a> from l2cc_task.o(i.l2cc_default_msg_handler) referenced from l2cc_task.o(.constdata)
 <LI><a href="#[1b4]">l2cc_lecb_sdu_send_cmd_handler</a> from l2cc_task.o(i.l2cc_lecb_sdu_send_cmd_handler) referenced from l2cc_task.o(.constdata)
 <LI><a href="#[12f]">l2cc_pdu_recv_ind_handler</a> from gapc_task.o(i.l2cc_pdu_recv_ind_handler) referenced 3 times from gapc_task.o(.constdata)
 <LI><a href="#[1b3]">l2cc_pdu_send_cmd_handler</a> from l2cc_task.o(i.l2cc_pdu_send_cmd_handler) referenced from l2cc_task.o(.constdata)
 <LI><a href="#[32]">l2cm_l2cap_tx_handler</a> from l2cm.o(i.l2cm_l2cap_tx_handler) referenced from l2cm.o(i.l2cm_init)
 <LI><a href="#[269]">light_ctl_server_msg_handler</a> from light_ctl_setup_server.o(i.light_ctl_server_msg_handler) referenced 3 times from sig_mesh_led.o(.data)
 <LI><a href="#[26b]">light_hsl_hue_server_msg_handler</a> from light_hsl_hue_server.o(i.light_hsl_hue_server_msg_handler) referenced from sig_mesh_led.o(.data)
 <LI><a href="#[26c]">light_hsl_saturation_server_msg_handler</a> from light_hsl_saturation_server.o(i.light_hsl_saturation_server_msg_handler) referenced from sig_mesh_led.o(.data)
 <LI><a href="#[26a]">light_hsl_server_msg_handler</a> from light_hsl_setup_server.o(i.light_hsl_server_msg_handler) referenced 2 times from sig_mesh_led.o(.data)
 <LI><a href="#[268]">lightness_server_msg_handler</a> from light_lightness_setup_server.o(i.lightness_server_msg_handler) referenced 2 times from sig_mesh_led.o(.data)
 <LI><a href="#[31]">linear_set_response</a> from light_lightness_setup_server.o(i.linear_set_response) referenced from light_lightness_setup_server.o(i.handle_linear_set)
 <LI><a href="#[33]">llc_con_move_cbk</a> from syscall.txt(ABSOLUTE) referenced from patch_rf.o(i.llc_patch_1)
 <LI><a href="#[275]">llc_patch_1</a> from patch_rf.o(i.llc_patch_1) referenced from patch.o(.data)
 <LI><a href="#[12]">low_power_restore_entry_imp</a> from patch.o(ram_code) referenced from entry.o(i.app_main)
 <LI><a href="#[11]">low_power_save_entry_imp</a> from patch.o(ram_code) referenced from entry.o(i.app_main)
 <LI><a href="#[fc]">m_al_adv_send</a> from m_al_adv.o(i.m_al_adv_send) referenced from m_al_adv.o(.constdata)
 <LI><a href="#[104]">m_al_cleanup</a> from m_al_task.o(i.m_al_cleanup) referenced from m_al_task.o(.constdata)
 <LI><a href="#[ff]">m_al_con_close</a> from m_al_con.o(i.m_al_con_close) referenced from m_al_con.o(.constdata)
 <LI><a href="#[100]">m_al_con_send</a> from m_al_con.o(i.m_al_con_send) referenced from m_al_con.o(.constdata)
 <LI><a href="#[fd]">m_al_con_start</a> from m_al_con.o(i.m_al_con_start) referenced from m_al_con.o(.constdata)
 <LI><a href="#[fe]">m_al_con_stop</a> from m_al_con.o(i.m_al_con_stop) referenced from m_al_con.o(.constdata)
 <LI><a href="#[103]">m_al_create</a> from m_al_task.o(i.m_al_create) referenced from m_al_task.o(.constdata)
 <LI><a href="#[102]">m_al_destroy</a> from m_al_task.o(i.m_al_destroy) referenced from m_al_task.o(.constdata)
 <LI><a href="#[34]">m_al_djob_evt_handler</a> from m_al_djob.o(i.m_al_djob_evt_handler) referenced from m_al_djob.o(i.m_al_djob_init)
 <LI><a href="#[101]">m_al_init</a> from m_al_task.o(i.m_al_init) referenced from m_al_task.o(.constdata)
 <LI><a href="#[94]">m_al_prf_itf_get</a> from m_al_task.o(i.m_al_prf_itf_get) referenced from mesh_api.o(i.mesh_init)
 <LI><a href="#[fa]">m_al_scan_start</a> from m_al_scan.o(i.m_al_scan_start) referenced from m_al_adv.o(.constdata)
 <LI><a href="#[fb]">m_al_scan_stop</a> from m_al_scan.o(i.m_al_scan_stop) referenced from m_al_adv.o(.constdata)
 <LI><a href="#[36]">m_al_sec_aes_result_cb</a> from m_al_sec.o(i.m_al_sec_aes_result_cb) referenced from m_al_sec.o(i.m_al_sec_aes)
 <LI><a href="#[36]">m_al_sec_aes_result_cb</a> from m_al_sec.o(i.m_al_sec_aes_result_cb) referenced from m_al_sec.o(i.m_al_sec_aes_cmac)
 <LI><a href="#[36]">m_al_sec_aes_result_cb</a> from m_al_sec.o(i.m_al_sec_aes_result_cb) referenced from m_al_sec.o(i.m_al_sec_aes_k1)
 <LI><a href="#[36]">m_al_sec_aes_result_cb</a> from m_al_sec.o(i.m_al_sec_aes_result_cb) referenced from m_al_sec.o(i.m_al_sec_aes_k2)
 <LI><a href="#[36]">m_al_sec_aes_result_cb</a> from m_al_sec.o(i.m_al_sec_aes_result_cb) referenced from m_al_sec.o(i.m_al_sec_aes_k3)
 <LI><a href="#[36]">m_al_sec_aes_result_cb</a> from m_al_sec.o(i.m_al_sec_aes_result_cb) referenced from m_al_sec.o(i.m_al_sec_aes_k4)
 <LI><a href="#[36]">m_al_sec_aes_result_cb</a> from m_al_sec.o(i.m_al_sec_aes_result_cb) referenced from m_al_sec.o(i.m_al_sec_aes_s1)
 <LI><a href="#[36]">m_al_sec_aes_result_cb</a> from m_al_sec.o(i.m_al_sec_aes_result_cb) referenced from m_al_sec.o(i.m_al_sec_rand)
 <LI><a href="#[37]">m_al_sec_ccm_result_cb</a> from m_al_sec.o(i.m_al_sec_ccm_result_cb) referenced from m_al_sec.o(i.m_al_sec_aes_ccm)
 <LI><a href="#[38]">m_api_bearer_operation_close_cb</a> from m_api.o(i.m_api_bearer_operation_close_cb) referenced from m_api.o(i.m_api_disable)
 <LI><a href="#[39]">m_api_bearer_operation_open_cb</a> from m_api.o(i.m_api_bearer_operation_open_cb) referenced from m_api.o(i.m_api_enable)
 <LI><a href="#[202]">m_api_msg_buf_block_freed_cb</a> from m_api_msg.o(i.m_api_msg_buf_block_freed_cb) referenced from m_api_msg.o(.constdata)
 <LI><a href="#[1fe]">m_api_msg_disabled_cb</a> from m_api_msg.o(i.m_api_msg_disabled_cb) referenced from m_api_msg.o(.constdata)
 <LI><a href="#[1fd]">m_api_msg_enabled_cb</a> from m_api_msg.o(i.m_api_msg_enabled_cb) referenced from m_api_msg.o(.constdata)
 <LI><a href="#[203]">m_api_msg_loaded_cb</a> from m_api_msg.o(i.m_api_msg_loaded_cb) referenced from m_api_msg.o(.constdata)
 <LI><a href="#[206]">m_api_msg_model_opcode_check_cb</a> from m_api_msg.o(i.m_api_msg_model_opcode_check_cb) referenced from m_api_msg.o(.constdata)
 <LI><a href="#[207]">m_api_msg_model_publish_period_cb</a> from m_api_msg.o(i.m_api_msg_model_publish_period_cb) referenced from m_api_msg.o(.constdata)
 <LI><a href="#[204]">m_api_msg_model_rx_cb</a> from m_api_msg.o(i.m_api_msg_model_rx_cb) referenced from m_api_msg.o(.constdata)
 <LI><a href="#[205]">m_api_msg_model_sent_cb</a> from m_api_msg.o(i.m_api_msg_model_sent_cb) referenced from m_api_msg.o(.constdata)
 <LI><a href="#[201]">m_api_msg_prov_oob_auth_req_cb</a> from m_api_msg.o(i.m_api_msg_prov_oob_auth_req_cb) referenced from m_api_msg.o(.constdata)
 <LI><a href="#[200]">m_api_msg_prov_param_req_cb</a> from m_api_msg.o(i.m_api_msg_prov_param_req_cb) referenced from m_api_msg.o(.constdata)
 <LI><a href="#[1ff]">m_api_msg_prov_state_cb</a> from m_api_msg.o(i.m_api_msg_prov_state_cb) referenced from m_api_msg.o(.constdata)
 <LI><a href="#[3a]">m_api_stored_info_load_cb</a> from m_api.o(i.m_api_stored_info_load_cb) referenced from m_api.o(i.m_api_load_stored_info)
 <LI><a href="#[20b]">m_bcn_cb_closed</a> from m_bcn.o(i.m_bcn_cb_closed) referenced from m_bcn.o(.constdata)
 <LI><a href="#[20a]">m_bcn_cb_opened</a> from m_bcn.o(i.m_bcn_cb_opened) referenced from m_bcn.o(.constdata)
 <LI><a href="#[209]">m_bcn_cb_rx</a> from m_bcn.o(i.m_bcn_cb_rx) referenced from m_bcn.o(.constdata)
 <LI><a href="#[208]">m_bcn_cb_sent</a> from m_bcn.o(i.m_bcn_cb_sent) referenced from m_bcn.o(.constdata)
 <LI><a href="#[3e]">m_bcn_cb_timer_bcn_expired</a> from m_bcn.o(i.m_bcn_cb_timer_bcn_expired) referenced from m_bcn.o(i.m_bcn_init)
 <LI><a href="#[3d]">m_bcn_cb_timer_obs_expired</a> from m_bcn.o(i.m_bcn_cb_timer_obs_expired) referenced from m_bcn.o(i.m_bcn_init)
 <LI><a href="#[3b]">m_bcn_cmac_finished_cb</a> from m_bcn.o(i.m_bcn_cmac_finished_cb) referenced from m_bcn.o(i.m_bcn_cmac_finished_cb)
 <LI><a href="#[3b]">m_bcn_cmac_finished_cb</a> from m_bcn.o(i.m_bcn_cmac_finished_cb) referenced from m_bcn.o(i.m_bcn_insert_encrypt_queue)
 <LI><a href="#[3c]">m_bcn_cmac_ready_cb</a> from m_bcn.o(i.m_bcn_cmac_ready_cb) referenced from m_bcn.o(i.m_bcn_cmac_finished_cb)
 <LI><a href="#[3c]">m_bcn_cmac_ready_cb</a> from m_bcn.o(i.m_bcn_cmac_ready_cb) referenced from m_bcn.o(i.m_bcn_insert_encrypt_queue)
 <LI><a href="#[22b]">m_bearer_adv_rx</a> from m_bearer_adv.o(i.m_bearer_adv_rx) referenced from m_bearer_adv.o(.constdata)
 <LI><a href="#[22c]">m_bearer_adv_sent</a> from m_bearer_adv.o(i.m_bearer_adv_sent) referenced from m_bearer_adv.o(.constdata)
 <LI><a href="#[229]">m_bearer_adv_started</a> from m_bearer_adv.o(i.m_bearer_adv_started) referenced from m_bearer_adv.o(.constdata)
 <LI><a href="#[22a]">m_bearer_adv_stopped</a> from m_bearer_adv.o(i.m_bearer_adv_stopped) referenced from m_bearer_adv.o(.constdata)
 <LI><a href="#[230]">m_bearer_gatt_closed</a> from m_bearer_gatt.o(i.m_bearer_gatt_closed) referenced from m_bearer_gatt.o(.constdata)
 <LI><a href="#[22f]">m_bearer_gatt_created</a> from m_bearer_gatt.o(i.m_bearer_gatt_created) referenced from m_bearer_gatt.o(.constdata)
 <LI><a href="#[231]">m_bearer_gatt_rx</a> from m_bearer_gatt.o(i.m_bearer_gatt_rx) referenced from m_bearer_gatt.o(.constdata)
 <LI><a href="#[232]">m_bearer_gatt_sent</a> from m_bearer_gatt.o(i.m_bearer_gatt_sent) referenced from m_bearer_gatt.o(.constdata)
 <LI><a href="#[22d]">m_bearer_gatt_started</a> from m_bearer_gatt.o(i.m_bearer_gatt_started) referenced from m_bearer_gatt.o(.constdata)
 <LI><a href="#[22e]">m_bearer_gatt_stopped</a> from m_bearer_gatt.o(i.m_bearer_gatt_stopped) referenced from m_bearer_gatt.o(.constdata)
 <LI><a href="#[20c]">m_bearer_send</a> from m_bearer.o(i.m_bearer_send) referenced from m_bearer.o(.constdata)
 <LI><a href="#[3f]">m_bearer_send_continue</a> from m_bearer.o(i.m_bearer_send_continue) referenced from m_bearer.o(i.m_bearer_init)
 <LI><a href="#[20d]">m_bearer_update</a> from m_bearer.o(i.m_bearer_update) referenced from m_bearer.o(.constdata)
 <LI><a href="#[40]">m_fnd_confs_cb_appkey_added</a> from m_fnd_confs.o(i.m_fnd_confs_cb_appkey_added) referenced from m_fnd_confs.o(i.m_fnd_confs_handler_appkey)
 <LI><a href="#[41]">m_fnd_confs_cb_compo_data</a> from m_fnd_confs.o(i.m_fnd_confs_cb_compo_data) referenced from m_fnd_confs.o(i.m_fnd_confs_handler_compo_data_get)
 <LI><a href="#[44]">m_fnd_confs_cb_netkey_added</a> from m_fnd_confs.o(i.m_fnd_confs_cb_netkey_added) referenced from m_fnd_confs.o(i.m_fnd_confs_handler_netkey)
 <LI><a href="#[235]">m_fnd_confs_cb_opcode_check</a> from m_fnd_confs.o(i.m_fnd_confs_cb_opcode_check) referenced from m_fnd_confs.o(.constdata)
 <LI><a href="#[233]">m_fnd_confs_cb_rx</a> from m_fnd_confs.o(i.m_fnd_confs_cb_rx) referenced from m_fnd_confs.o(.constdata)
 <LI><a href="#[46]">m_fnd_confs_cb_sec_cmac_pub_finished</a> from m_fnd_confs.o(i.m_fnd_confs_cb_sec_cmac_pub_finished) referenced from m_fnd_confs.o(i.m_fnd_confs_process)
 <LI><a href="#[43]">m_fnd_confs_cb_sec_cmac_ready</a> from m_fnd_confs.o(i.m_fnd_confs_cb_sec_cmac_ready) referenced from m_fnd_confs.o(i.m_fnd_confs_handler_model_subs_vaddr)
 <LI><a href="#[43]">m_fnd_confs_cb_sec_cmac_ready</a> from m_fnd_confs.o(i.m_fnd_confs_cb_sec_cmac_ready) referenced from m_fnd_confs.o(i.m_fnd_confs_process)
 <LI><a href="#[42]">m_fnd_confs_cb_sec_cmac_subs_finished</a> from m_fnd_confs.o(i.m_fnd_confs_cb_sec_cmac_subs_finished) referenced from m_fnd_confs.o(i.m_fnd_confs_handler_model_subs_vaddr)
 <LI><a href="#[234]">m_fnd_confs_cb_sent</a> from m_fnd_confs.o(i.m_fnd_confs_cb_sent) referenced from m_fnd_confs.o(.constdata)
 <LI><a href="#[45]">m_fnd_confs_process</a> from m_fnd_confs.o(i.m_fnd_confs_process) referenced from m_fnd_confs.o(i.m_fnd_confs_init)
 <LI><a href="#[210]">m_fnd_hlths_cb_opcode_check</a> from m_fnd_hlths.o(i.m_fnd_hlths_cb_opcode_check) referenced from m_fnd_hlths.o(.constdata)
 <LI><a href="#[211]">m_fnd_hlths_cb_publish_period</a> from m_fnd_hlths.o(i.m_fnd_hlths_cb_publish_period) referenced from m_fnd_hlths.o(.constdata)
 <LI><a href="#[20e]">m_fnd_hlths_cb_rx</a> from m_fnd_hlths.o(i.m_fnd_hlths_cb_rx) referenced from m_fnd_hlths.o(.constdata)
 <LI><a href="#[20f]">m_fnd_hlths_cb_sent</a> from m_fnd_hlths.o(i.m_fnd_hlths_cb_sent) referenced from m_fnd_hlths.o(.constdata)
 <LI><a href="#[112]">m_fnd_pbrs_cb_opcode_check</a> from m_fnd_pbrs.o(i.m_fnd_pbrs_cb_opcode_check) referenced from m_fnd_pbrs.o(.constdata)
 <LI><a href="#[110]">m_fnd_pbrs_cb_rx</a> from m_fnd_pbrs.o(i.m_fnd_pbrs_cb_rx) referenced from m_fnd_pbrs.o(.constdata)
 <LI><a href="#[111]">m_fnd_pbrs_cb_sent</a> from m_fnd_pbrs.o(i.m_fnd_pbrs_cb_sent) referenced from m_fnd_pbrs.o(.constdata)
 <LI><a href="#[48]">m_fnd_pbrs_link_timer_handler</a> from m_fnd_pbrs.o(i.m_fnd_pbrs_link_timer_handler) referenced from m_fnd_pbrs.o(i.m_fnd_pbrs_init)
 <LI><a href="#[47]">m_fnd_pbrs_scan_timer_handler</a> from m_fnd_pbrs.o(i.m_fnd_pbrs_scan_timer_handler) referenced from m_fnd_pbrs.o(i.m_fnd_pbrs_init)
 <LI><a href="#[4a]">m_lay_access_model_check</a> from m_lay_access.o(i.m_lay_access_model_check) referenced from m_lay_access.o(i.m_lay_access_init)
 <LI><a href="#[49]">m_lay_access_retx_timer_cb</a> from m_lay_access.o(i.m_lay_access_retx_timer_cb) referenced from m_lay_access.o(i.m_lay_access_init)
 <LI><a href="#[213]">m_lay_access_rx</a> from m_lay_access.o(i.m_lay_access_rx) referenced from m_lay_access.o(.constdata)
 <LI><a href="#[212]">m_lay_access_sent</a> from m_lay_access.o(i.m_lay_access_sent) referenced from m_lay_access.o(.constdata)
 <LI><a href="#[4d]">m_lay_friend_cb_key</a> from m_lay_friend.o(i.m_lay_friend_cb_key) referenced from m_lay_friend.o(i.m_lay_friend_handler_request)
 <LI><a href="#[4c]">m_lay_friend_cb_repeat_timer</a> from m_lay_friend.o(i.m_lay_friend_cb_repeat_timer) referenced from m_lay_friend.o(i.m_lay_friend_handler_request)
 <LI><a href="#[23a]">m_lay_friend_cb_state_updated</a> from m_lay_friend.o(i.m_lay_friend_cb_state_updated) referenced from m_lay_friend.o(.constdata)
 <LI><a href="#[4b]">m_lay_friend_cb_timer</a> from m_lay_friend.o(i.m_lay_friend_cb_timer) referenced from m_lay_friend.o(i.m_lay_friend_handler_request)
 <LI><a href="#[50]">m_lay_friend_handler_clear</a> from m_lay_friend.o(i.m_lay_friend_handler_clear) referenced from m_lay_friend.o(i.m_lay_friend_rx_utrans)
 <LI><a href="#[51]">m_lay_friend_handler_clear_cfm</a> from m_lay_friend.o(i.m_lay_friend_handler_clear_cfm) referenced from m_lay_friend.o(i.m_lay_friend_rx_utrans)
 <LI><a href="#[4e]">m_lay_friend_handler_poll</a> from m_lay_friend.o(i.m_lay_friend_handler_poll) referenced from m_lay_friend.o(i.m_lay_friend_rx_utrans)
 <LI><a href="#[4f]">m_lay_friend_handler_request</a> from m_lay_friend.o(i.m_lay_friend_handler_request) referenced from m_lay_friend.o(i.m_lay_friend_rx_utrans)
 <LI><a href="#[239]">m_lay_friend_rx_ltrans</a> from m_lay_friend.o(i.m_lay_friend_rx_ltrans) referenced from m_lay_friend.o(.constdata)
 <LI><a href="#[237]">m_lay_friend_rx_utrans</a> from m_lay_friend.o(i.m_lay_friend_rx_utrans) referenced from m_lay_friend.o(.constdata)
 <LI><a href="#[238]">m_lay_friend_sent_net</a> from m_lay_friend.o(i.m_lay_friend_sent_net) referenced from m_lay_friend.o(.constdata)
 <LI><a href="#[236]">m_lay_friend_sent_utrans</a> from m_lay_friend.o(i.m_lay_friend_sent_utrans) referenced from m_lay_friend.o(.constdata)
 <LI><a href="#[23c]">m_lay_hb_cb_rx</a> from m_lay_hb.o(i.m_lay_hb_cb_rx) referenced from m_lay_hb.o(.constdata)
 <LI><a href="#[23b]">m_lay_hb_cb_sent</a> from m_lay_hb.o(i.m_lay_hb_cb_sent) referenced from m_lay_hb.o(.constdata)
 <LI><a href="#[23d]">m_lay_hb_cb_state_updated</a> from m_lay_hb.o(i.m_lay_hb_cb_state_updated) referenced from m_lay_hb.o(.constdata)
 <LI><a href="#[53]">m_lay_hb_cb_timer_pub</a> from m_lay_hb.o(i.m_lay_hb_cb_timer_pub) referenced from m_lay_hb.o(i.m_lay_hb_init)
 <LI><a href="#[52]">m_lay_hb_cb_timer_subs</a> from m_lay_hb.o(i.m_lay_hb_cb_timer_subs) referenced from m_lay_hb.o(i.m_lay_hb_init)
 <LI><a href="#[5a]">m_lay_lpn_cb_key</a> from m_lay_lpn.o(i.m_lay_lpn_cb_key) referenced from m_lay_lpn.o(i.m_lay_lpn_select_friend)
 <LI><a href="#[56]">m_lay_lpn_cb_subs_list_add</a> from m_lay_lpn.o(i.m_lay_lpn_cb_subs_list_add) referenced from m_lay_lpn.o(i.m_lay_lpn_handler_update)
 <LI><a href="#[55]">m_lay_lpn_cb_subs_list_rem</a> from m_lay_lpn.o(i.m_lay_lpn_cb_subs_list_rem) referenced from m_lay_lpn.o(i.m_lay_lpn_handler_update)
 <LI><a href="#[5b]">m_lay_lpn_cb_timer</a> from m_lay_lpn.o(i.m_lay_lpn_cb_timer) referenced from m_lay_lpn.o(i.m_lay_lpn_start)
 <LI><a href="#[54]">m_lay_lpn_cb_timer_offer</a> from m_lay_lpn.o(i.m_lay_lpn_cb_timer_offer) referenced from m_lay_lpn.o(i.m_lay_lpn_handler_offer)
 <LI><a href="#[58]">m_lay_lpn_handler_offer</a> from m_lay_lpn.o(i.m_lay_lpn_handler_offer) referenced from m_lay_lpn.o(i.m_lay_lpn_rx_ctl)
 <LI><a href="#[57]">m_lay_lpn_handler_subs_list_cfm</a> from m_lay_lpn.o(i.m_lay_lpn_handler_subs_list_cfm) referenced from m_lay_lpn.o(i.m_lay_lpn_rx_ctl)
 <LI><a href="#[59]">m_lay_lpn_handler_update</a> from m_lay_lpn.o(i.m_lay_lpn_handler_update) referenced from m_lay_lpn.o(i.m_lay_lpn_rx_ctl)
 <LI><a href="#[216]">m_lay_lpn_net_rx_cb</a> from m_lay_lpn.o(i.m_lay_lpn_net_rx_cb) referenced from m_lay_lpn.o(.constdata)
 <LI><a href="#[215]">m_lay_lpn_rx_ctl</a> from m_lay_lpn.o(i.m_lay_lpn_rx_ctl) referenced from m_lay_lpn.o(.constdata)
 <LI><a href="#[214]">m_lay_lpn_sent</a> from m_lay_lpn.o(i.m_lay_lpn_sent) referenced from m_lay_lpn.o(.constdata)
 <LI><a href="#[240]">m_lay_ltrans_rx</a> from m_lay_ltrans.o(i.m_lay_ltrans_rx) referenced from m_lay_ltrans.o(.constdata)
 <LI><a href="#[23e]">m_lay_ltrans_send</a> from m_lay_ltrans.o(i.m_lay_ltrans_send) referenced from m_lay_ltrans.o(.constdata)
 <LI><a href="#[23f]">m_lay_ltrans_sent</a> from m_lay_ltrans.o(i.m_lay_ltrans_sent) referenced from m_lay_ltrans.o(.constdata)
 <LI><a href="#[65]">m_lay_net_ccm_dec_finished_cb</a> from m_lay_net.o(i.m_lay_net_ccm_dec_finished_cb) referenced from m_lay_net.o(i.m_lay_net_desobfusc_finished_cb)
 <LI><a href="#[66]">m_lay_net_ccm_dec_ready_cb</a> from m_lay_net.o(i.m_lay_net_ccm_dec_ready_cb) referenced from m_lay_net.o(i.m_lay_net_desobfusc_finished_cb)
 <LI><a href="#[63]">m_lay_net_ccm_enc_finished_cb</a> from m_lay_net.o(i.m_lay_net_ccm_enc_finished_cb) referenced from m_lay_net.o(i.m_lay_net_check_encrypt_queue)
 <LI><a href="#[63]">m_lay_net_ccm_enc_finished_cb</a> from m_lay_net.o(i.m_lay_net_ccm_enc_finished_cb) referenced from m_lay_net.o(i.m_lay_net_send)
 <LI><a href="#[64]">m_lay_net_ccm_enc_ready_cb</a> from m_lay_net.o(i.m_lay_net_ccm_enc_ready_cb) referenced from m_lay_net.o(i.m_lay_net_check_encrypt_queue)
 <LI><a href="#[64]">m_lay_net_ccm_enc_ready_cb</a> from m_lay_net.o(i.m_lay_net_ccm_enc_ready_cb) referenced from m_lay_net.o(i.m_lay_net_send)
 <LI><a href="#[245]">m_lay_net_closed</a> from m_lay_net.o(i.m_lay_net_closed) referenced from m_lay_net.o(.constdata)
 <LI><a href="#[61]">m_lay_net_desobfusc_finished_cb</a> from m_lay_net.o(i.m_lay_net_desobfusc_finished_cb) referenced from m_lay_net.o(i.m_lay_net_check_encrypt_queue)
 <LI><a href="#[61]">m_lay_net_desobfusc_finished_cb</a> from m_lay_net.o(i.m_lay_net_desobfusc_finished_cb) referenced from m_lay_net.o(i.m_lay_net_rx)
 <LI><a href="#[62]">m_lay_net_desobfusc_ready_cb</a> from m_lay_net.o(i.m_lay_net_desobfusc_ready_cb) referenced from m_lay_net.o(i.m_lay_net_check_encrypt_queue)
 <LI><a href="#[62]">m_lay_net_desobfusc_ready_cb</a> from m_lay_net.o(i.m_lay_net_desobfusc_ready_cb) referenced from m_lay_net.o(i.m_lay_net_rx)
 <LI><a href="#[5f]">m_lay_net_obfusc_finished_cb</a> from m_lay_net.o(i.m_lay_net_obfusc_finished_cb) referenced from m_lay_net.o(i.m_lay_net_ccm_enc_finished_cb)
 <LI><a href="#[60]">m_lay_net_obfusc_ready_cb</a> from m_lay_net.o(i.m_lay_net_obfusc_ready_cb) referenced from m_lay_net.o(i.m_lay_net_ccm_enc_finished_cb)
 <LI><a href="#[244]">m_lay_net_opened</a> from m_lay_net.o(i.m_lay_net_opened) referenced from m_lay_net.o(.constdata)
 <LI><a href="#[243]">m_lay_net_rx</a> from m_lay_net.o(i.m_lay_net_rx) referenced from m_lay_net.o(.constdata)
 <LI><a href="#[241]">m_lay_net_send</a> from m_lay_net.o(i.m_lay_net_send) referenced from m_lay_net.o(.constdata)
 <LI><a href="#[242]">m_lay_net_sent</a> from m_lay_net.o(i.m_lay_net_sent) referenced from m_lay_net.o(.constdata)
 <LI><a href="#[6c]">m_lay_proxy_aes_finished</a> from m_lay_proxy.o(i.m_lay_proxy_aes_finished) referenced from m_lay_proxy.o(i.m_lay_proxy_rand_finished)
 <LI><a href="#[6d]">m_lay_proxy_aes_ready</a> from m_lay_proxy.o(i.m_lay_proxy_aes_ready) referenced from m_lay_proxy.o(i.m_lay_proxy_rand_finished)
 <LI><a href="#[69]">m_lay_proxy_bearer_adv_timer_handler</a> from m_lay_proxy.o(i.m_lay_proxy_bearer_adv_timer_handler) referenced from m_lay_proxy.o(i.m_lay_proxy_bearer_init)
 <LI><a href="#[6a]">m_lay_proxy_bearer_adv_update_timer_handler</a> from m_lay_proxy.o(i.m_lay_proxy_bearer_adv_update_timer_handler) referenced from m_lay_proxy.o(i.m_lay_proxy_bearer_init)
 <LI><a href="#[21a]">m_lay_proxy_bearer_closed_cb</a> from m_lay_proxy.o(i.m_lay_proxy_bearer_closed_cb) referenced from m_lay_proxy.o(.constdata)
 <LI><a href="#[219]">m_lay_proxy_bearer_opened_cb</a> from m_lay_proxy.o(i.m_lay_proxy_bearer_opened_cb) referenced from m_lay_proxy.o(.constdata)
 <LI><a href="#[6b]">m_lay_proxy_bearer_started</a> from m_lay_proxy.o(i.m_lay_proxy_bearer_started) referenced from m_lay_proxy.o(i.m_lay_proxy_bearer_start)
 <LI><a href="#[68]">m_lay_proxy_bearer_stopped</a> from m_lay_proxy.o(i.m_lay_proxy_bearer_stopped) referenced from m_lay_proxy.o(i.m_lay_proxy_bearer_adv_ctrl)
 <LI><a href="#[68]">m_lay_proxy_bearer_stopped</a> from m_lay_proxy.o(i.m_lay_proxy_bearer_stopped) referenced from m_lay_proxy.o(i.m_lay_proxy_bearer_started)
 <LI><a href="#[67]">m_lay_proxy_rand_finished</a> from m_lay_proxy.o(i.m_lay_proxy_rand_finished) referenced from m_lay_proxy.o(i.m_lay_proxy_adv_data_set)
 <LI><a href="#[218]">m_lay_proxy_rx</a> from m_lay_proxy.o(i.m_lay_proxy_rx) referenced from m_lay_proxy.o(.constdata)
 <LI><a href="#[217]">m_lay_proxy_sent</a> from m_lay_proxy.o(i.m_lay_proxy_sent) referenced from m_lay_proxy.o(.constdata)
 <LI><a href="#[5d]">m_lay_trans_ack_timer</a> from m_lay_ltrans.o(i.m_lay_trans_ack_timer) referenced from m_lay_ltrans.o(i.m_lay_ltrans_init)
 <LI><a href="#[5e]">m_lay_trans_incomp_timer</a> from m_lay_ltrans.o(i.m_lay_trans_incomp_timer) referenced from m_lay_ltrans.o(i.m_lay_ltrans_init)
 <LI><a href="#[5c]">m_lay_trans_seg_timer</a> from m_lay_ltrans.o(i.m_lay_trans_seg_timer) referenced from m_lay_ltrans.o(i.m_lay_ltrans_init)
 <LI><a href="#[6e]">m_lay_utrans_ccm_dec_finished_cb</a> from m_lay_utrans.o(i.m_lay_utrans_ccm_dec_finished_cb) referenced from m_lay_utrans.o(i.m_lay_utrans_check_decrypt_queue)
 <LI><a href="#[6e]">m_lay_utrans_ccm_dec_finished_cb</a> from m_lay_utrans.o(i.m_lay_utrans_ccm_dec_finished_cb) referenced from m_lay_utrans.o(i.m_lay_utrans_rx)
 <LI><a href="#[6f]">m_lay_utrans_ccm_dec_ready_cb</a> from m_lay_utrans.o(i.m_lay_utrans_ccm_dec_ready_cb) referenced from m_lay_utrans.o(i.m_lay_utrans_check_decrypt_queue)
 <LI><a href="#[6f]">m_lay_utrans_ccm_dec_ready_cb</a> from m_lay_utrans.o(i.m_lay_utrans_ccm_dec_ready_cb) referenced from m_lay_utrans.o(i.m_lay_utrans_rx)
 <LI><a href="#[71]">m_lay_utrans_ccm_enc_finished_cb</a> from m_lay_utrans.o(i.m_lay_utrans_ccm_enc_finished_cb) referenced from m_lay_utrans.o(i.m_lay_utrans_tx)
 <LI><a href="#[72]">m_lay_utrans_ccm_enc_ready_cb</a> from m_lay_utrans.o(i.m_lay_utrans_ccm_enc_ready_cb) referenced from m_lay_utrans.o(i.m_lay_utrans_tx)
 <LI><a href="#[248]">m_lay_utrans_rx</a> from m_lay_utrans.o(i.m_lay_utrans_rx) referenced from m_lay_utrans.o(.constdata)
 <LI><a href="#[246]">m_lay_utrans_send</a> from m_lay_utrans.o(i.m_lay_utrans_send) referenced from m_lay_utrans.o(.constdata)
 <LI><a href="#[247]">m_lay_utrans_sent</a> from m_lay_utrans.o(i.m_lay_utrans_sent) referenced from m_lay_utrans.o(.constdata)
 <LI><a href="#[70]">m_lay_utrans_tx</a> from m_lay_utrans.o(i.m_lay_utrans_tx) referenced from m_lay_utrans.o(i.m_lay_utrans_init)
 <LI><a href="#[73]">m_prov_adv_trans_tx_cb</a> from m_prov_adv_trans.o(i.m_prov_adv_trans_tx_cb) referenced from m_prov_adv_trans.o(i.m_prov_adv_trans_rx)
 <LI><a href="#[228]">m_prov_bearer_closed_cb</a> from m_prov_bearer.o(i.m_prov_bearer_closed_cb) referenced from m_prov_bearer.o(.constdata)
 <LI><a href="#[74]">m_prov_bearer_gatt_started</a> from m_prov_bearer.o(i.m_prov_bearer_gatt_started) referenced from m_prov_bearer.o(i.m_prov_bearer_gatt_start)
 <LI><a href="#[75]">m_prov_bearer_gatt_stopped</a> from m_prov_bearer.o(i.m_prov_bearer_gatt_stopped) referenced from m_prov_bearer.o(i.m_prov_bearer_gatt_stop)
 <LI><a href="#[227]">m_prov_bearer_opened_cb</a> from m_prov_bearer.o(i.m_prov_bearer_opened_cb) referenced from m_prov_bearer.o(.constdata)
 <LI><a href="#[226]">m_prov_bearer_rx_cb</a> from m_prov_bearer.o(i.m_prov_bearer_rx_cb) referenced from m_prov_bearer.o(.constdata)
 <LI><a href="#[225]">m_prov_bearer_sent_cb</a> from m_prov_bearer.o(i.m_prov_bearer_sent_cb) referenced from m_prov_bearer.o(.constdata)
 <LI><a href="#[80]">m_prov_ccm_finished_cb</a> from m_prov.o(i.m_prov_ccm_finished_cb) referenced from m_prov.o(i.m_prov_pdu_data_handler)
 <LI><a href="#[81]">m_prov_ccm_ready_cb</a> from m_prov.o(i.m_prov_ccm_ready_cb) referenced from m_prov.o(i.m_prov_pdu_data_handler)
 <LI><a href="#[82]">m_prov_cfm_salt_finished_cb</a> from m_prov.o(i.m_prov_cfm_salt_finished_cb) referenced from m_prov.o(i.m_prov_pdu_pub_key_handler)
 <LI><a href="#[7b]">m_prov_cmac_finished_cb</a> from m_prov.o(i.m_prov_cmac_finished_cb) referenced from m_prov.o(i.m_prov_k1_finished_cb)
 <LI><a href="#[7b]">m_prov_cmac_finished_cb</a> from m_prov.o(i.m_prov_cmac_finished_cb) referenced from m_prov.o(i.m_prov_pdu_random_handler)
 <LI><a href="#[7c]">m_prov_cmac_ready_cb</a> from m_prov.o(i.m_prov_cmac_ready_cb) referenced from m_prov.o(i.m_prov_k1_finished_cb)
 <LI><a href="#[7c]">m_prov_cmac_ready_cb</a> from m_prov.o(i.m_prov_cmac_ready_cb) referenced from m_prov.o(i.m_prov_pdu_random_handler)
 <LI><a href="#[77]">m_prov_ecdh_secret_res_cb</a> from m_prov.o(i.m_prov_ecdh_secret_res_cb) referenced from m_prov.o(i.m_prov_cfm_salt_finished_cb)
 <LI><a href="#[7d]">m_prov_k1_finished_cb</a> from m_prov.o(i.m_prov_k1_finished_cb) referenced from m_prov.o(i.m_prov_k1_finished_cb)
 <LI><a href="#[7d]">m_prov_k1_finished_cb</a> from m_prov.o(i.m_prov_k1_finished_cb) referenced from m_prov.o(i.m_prov_psalt_finished_cb)
 <LI><a href="#[7d]">m_prov_k1_finished_cb</a> from m_prov.o(i.m_prov_k1_finished_cb) referenced from m_prov.o(i.m_prov_rand_finished_cb)
 <LI><a href="#[7e]">m_prov_k1_ready_cb</a> from m_prov.o(i.m_prov_k1_ready_cb) referenced from m_prov.o(i.m_prov_k1_finished_cb)
 <LI><a href="#[7e]">m_prov_k1_ready_cb</a> from m_prov.o(i.m_prov_k1_ready_cb) referenced from m_prov.o(i.m_prov_psalt_finished_cb)
 <LI><a href="#[7e]">m_prov_k1_ready_cb</a> from m_prov.o(i.m_prov_k1_ready_cb) referenced from m_prov.o(i.m_prov_rand_finished_cb)
 <LI><a href="#[83]">m_prov_link_timeout_cb</a> from m_prov.o(i.m_prov_link_timeout_cb) referenced from m_prov.o(i.m_prov_start)
 <LI><a href="#[76]">m_prov_net_key_added_cb</a> from m_prov.o(i.m_prov_net_key_added_cb) referenced from m_prov.o(i.m_prov_ccm_finished_cb)
 <LI><a href="#[86]">m_prov_param_req</a> from m_prov.o(i.m_prov_param_req) referenced from m_prov.o(i.m_prov_start)
 <LI><a href="#[21c]">m_prov_pdu_capabilities_handler</a> from m_prov.o(i.m_prov_pdu_capabilities_handler) referenced from m_prov.o(.constdata)
 <LI><a href="#[220]">m_prov_pdu_cfm_handler</a> from m_prov.o(i.m_prov_pdu_cfm_handler) referenced from m_prov.o(.constdata)
 <LI><a href="#[223]">m_prov_pdu_cmp_handler</a> from m_prov.o(i.m_prov_pdu_cmp_handler) referenced from m_prov.o(.constdata)
 <LI><a href="#[222]">m_prov_pdu_data_handler</a> from m_prov.o(i.m_prov_pdu_data_handler) referenced from m_prov.o(.constdata)
 <LI><a href="#[224]">m_prov_pdu_failed_handler</a> from m_prov.o(i.m_prov_pdu_failed_handler) referenced from m_prov.o(.constdata)
 <LI><a href="#[21f]">m_prov_pdu_input_cmp_handler</a> from m_prov.o(i.m_prov_pdu_input_cmp_handler) referenced from m_prov.o(.constdata)
 <LI><a href="#[21b]">m_prov_pdu_invite_handler</a> from m_prov.o(i.m_prov_pdu_invite_handler) referenced from m_prov.o(.constdata)
 <LI><a href="#[21e]">m_prov_pdu_pub_key_handler</a> from m_prov.o(i.m_prov_pdu_pub_key_handler) referenced from m_prov.o(.constdata)
 <LI><a href="#[221]">m_prov_pdu_random_handler</a> from m_prov.o(i.m_prov_pdu_random_handler) referenced from m_prov.o(.constdata)
 <LI><a href="#[21d]">m_prov_pdu_start_handler</a> from m_prov.o(i.m_prov_pdu_start_handler) referenced from m_prov.o(.constdata)
 <LI><a href="#[78]">m_prov_psalt_finished_cb</a> from m_prov.o(i.m_prov_psalt_finished_cb) referenced from m_prov.o(i.m_prov_cmac_finished_cb)
 <LI><a href="#[7f]">m_prov_pub_key_res_cb</a> from m_prov.o(i.m_prov_pub_key_res_cb) referenced from m_prov.o(i.m_prov_link_closed)
 <LI><a href="#[7f]">m_prov_pub_key_res_cb</a> from m_prov.o(i.m_prov_pub_key_res_cb) referenced from m_prov.o(i.m_prov_param_rsp)
 <LI><a href="#[7a]">m_prov_rand_finished_cb</a> from m_prov.o(i.m_prov_rand_finished_cb) referenced from m_prov.o(i.m_prov_ecdh_secret_res_cb)
 <LI><a href="#[7a]">m_prov_rand_finished_cb</a> from m_prov.o(i.m_prov_rand_finished_cb) referenced from m_prov.o(i.m_prov_oob_auth_rsp)
 <LI><a href="#[7a]">m_prov_rand_finished_cb</a> from m_prov.o(i.m_prov_rand_finished_cb) referenced from m_prov.o(i.m_prov_pdu_cfm_handler)
 <LI><a href="#[79]">m_prov_s1_ready_cb</a> from m_prov.o(i.m_prov_s1_ready_cb) referenced from m_prov.o(i.m_prov_cmac_finished_cb)
 <LI><a href="#[79]">m_prov_s1_ready_cb</a> from m_prov.o(i.m_prov_s1_ready_cb) referenced from m_prov.o(i.m_prov_pdu_pub_key_handler)
 <LI><a href="#[85]">m_prov_trans_restart_cb</a> from m_prov.o(i.m_prov_trans_restart_cb) referenced from m_prov.o(i.m_prov_start)
 <LI><a href="#[84]">m_prov_trans_timeout_cb</a> from m_prov.o(i.m_prov_trans_timeout_cb) referenced from m_prov.o(i.m_prov_start)
 <LI><a href="#[87]">m_tb_key_finished_cb</a> from m_tb_key.o(i.m_tb_key_finished_cb) referenced from m_tb_key.o(i.m_tb_key_app_add)
 <LI><a href="#[87]">m_tb_key_finished_cb</a> from m_tb_key.o(i.m_tb_key_finished_cb) referenced from m_tb_key.o(i.m_tb_key_app_update)
 <LI><a href="#[87]">m_tb_key_finished_cb</a> from m_tb_key.o(i.m_tb_key_finished_cb) referenced from m_tb_key.o(i.m_tb_key_finished_cb)
 <LI><a href="#[87]">m_tb_key_finished_cb</a> from m_tb_key.o(i.m_tb_key_finished_cb) referenced from m_tb_key.o(i.m_tb_key_net_add)
 <LI><a href="#[87]">m_tb_key_finished_cb</a> from m_tb_key.o(i.m_tb_key_finished_cb) referenced from m_tb_key.o(i.m_tb_key_net_update)
 <LI><a href="#[8b]">m_tb_key_friend_finished_cb</a> from m_tb_key.o(i.m_tb_key_friend_finished_cb) referenced from m_tb_key.o(i.m_tb_key_finished_cb)
 <LI><a href="#[8b]">m_tb_key_friend_finished_cb</a> from m_tb_key.o(i.m_tb_key_friend_finished_cb) referenced from m_tb_key.o(i.m_tb_key_friend_finished_cb)
 <LI><a href="#[8b]">m_tb_key_friend_finished_cb</a> from m_tb_key.o(i.m_tb_key_friend_finished_cb) referenced from m_tb_key.o(i.m_tb_key_friend_new_ind)
 <LI><a href="#[8c]">m_tb_key_friend_k2_ready_cb</a> from m_tb_key.o(i.m_tb_key_friend_k2_ready_cb) referenced from m_tb_key.o(i.m_tb_key_finished_cb)
 <LI><a href="#[8c]">m_tb_key_friend_k2_ready_cb</a> from m_tb_key.o(i.m_tb_key_friend_k2_ready_cb) referenced from m_tb_key.o(i.m_tb_key_friend_finished_cb)
 <LI><a href="#[8c]">m_tb_key_friend_k2_ready_cb</a> from m_tb_key.o(i.m_tb_key_friend_k2_ready_cb) referenced from m_tb_key.o(i.m_tb_key_friend_new_ind)
 <LI><a href="#[89]">m_tb_key_k1_ready_cb</a> from m_tb_key.o(i.m_tb_key_k1_ready_cb) referenced from m_tb_key.o(i.m_tb_key_finished_cb)
 <LI><a href="#[8d]">m_tb_key_k2_ready_cb</a> from m_tb_key.o(i.m_tb_key_k2_ready_cb) referenced from m_tb_key.o(i.m_tb_key_net_add)
 <LI><a href="#[8d]">m_tb_key_k2_ready_cb</a> from m_tb_key.o(i.m_tb_key_k2_ready_cb) referenced from m_tb_key.o(i.m_tb_key_net_update)
 <LI><a href="#[8a]">m_tb_key_k3_ready_cb</a> from m_tb_key.o(i.m_tb_key_k3_ready_cb) referenced from m_tb_key.o(i.m_tb_key_finished_cb)
 <LI><a href="#[88]">m_tb_key_k4_ready_cb</a> from m_tb_key.o(i.m_tb_key_k4_ready_cb) referenced from m_tb_key.o(i.m_tb_key_app_add)
 <LI><a href="#[88]">m_tb_key_k4_ready_cb</a> from m_tb_key.o(i.m_tb_key_k4_ready_cb) referenced from m_tb_key.o(i.m_tb_key_app_update)
 <LI><a href="#[8f]">m_tb_sec_aes_ccm_cb</a> from m_tb_sec.o(i.m_tb_sec_aes_ccm_cb) referenced from m_tb_sec.o(i.m_tb_sec_execute)
 <LI><a href="#[8e]">m_tb_sec_aes_res_cb</a> from m_tb_sec.o(i.m_tb_sec_aes_res_cb) referenced from m_tb_sec.o(i.m_tb_sec_execute)
 <LI><a href="#[90]">m_tb_sec_ready_rand_cb</a> from m_tb_sec.o(i.m_tb_sec_ready_rand_cb) referenced from m_tb_sec.o(i.m_tb_sec_rand_start)
 <LI><a href="#[91]">m_tb_state_cb_timer_attention</a> from m_tb_state.o(i.m_tb_state_cb_timer_attention) referenced from m_tb_state.o(i.m_tb_state_init)
 <LI><a href="#[92]">m_tb_store_cb_appkey_added</a> from m_tb_store_wvt.o(i.m_tb_store_cb_appkey_added) referenced from m_tb_store_wvt.o(i.m_tb_store_cb_appkey_added)
 <LI><a href="#[92]">m_tb_store_cb_appkey_added</a> from m_tb_store_wvt.o(i.m_tb_store_cb_appkey_added) referenced from m_tb_store_wvt.o(i.m_tb_store_load_fsm)
 <LI><a href="#[93]">m_tb_store_cb_netkey_added</a> from m_tb_store_wvt.o(i.m_tb_store_cb_netkey_added) referenced from m_tb_store_wvt.o(i.m_tb_store_cb_netkey_added)
 <LI><a href="#[93]">m_tb_store_cb_netkey_added</a> from m_tb_store_wvt.o(i.m_tb_store_cb_netkey_added) referenced from m_tb_store_wvt.o(i.m_tb_store_load_fsm)
 <LI><a href="#[e9]">mesh_api_cmp_handler</a> from mesh_api.o(i.mesh_api_cmp_handler) referenced from mesh_api.o(.constdata)
 <LI><a href="#[f1]">mesh_api_compo_data_req_ind_handler</a> from mesh_api.o(i.mesh_api_compo_data_req_ind_handler) referenced from mesh_api.o(.constdata)
 <LI><a href="#[f2]">mesh_api_fault_get_req_ind_handler</a> from mesh_api.o(i.mesh_api_fault_get_req_ind_handler) referenced from mesh_api.o(.constdata)
 <LI><a href="#[ef]">mesh_api_model_msg_ind_handler</a> from mesh_api.o(i.mesh_api_model_msg_ind_handler) referenced from mesh_api.o(.constdata)
 <LI><a href="#[ee]">mesh_api_model_opcode_req_ind_handler</a> from mesh_api.o(i.mesh_api_model_opcode_req_ind_handler) referenced from mesh_api.o(.constdata)
 <LI><a href="#[f0]">mesh_api_node_reset_ind_handler</a> from mesh_api.o(i.mesh_api_node_reset_ind_handler) referenced from mesh_api.o(.constdata)
 <LI><a href="#[eb]">mesh_api_prov_auth_data_req_handler</a> from mesh_api.o(i.mesh_api_prov_auth_data_req_handler) referenced from mesh_api.o(.constdata)
 <LI><a href="#[ea]">mesh_api_prov_param_req_handler</a> from mesh_api.o(i.mesh_api_prov_param_req_handler) referenced from mesh_api.o(.constdata)
 <LI><a href="#[ec]">mesh_api_prov_state_ind_handler</a> from mesh_api.o(i.mesh_api_prov_state_ind_handler) referenced from mesh_api.o(.constdata)
 <LI><a href="#[f3]">mesh_api_proxy_end_ind_handler</a> from mesh_api.o(i.mesh_api_proxy_end_ind_handler) referenced from mesh_api.o(.constdata)
 <LI><a href="#[ed]">mesh_api_update_ind_handler</a> from mesh_api.o(i.mesh_api_update_ind_handler) referenced from mesh_api.o(.constdata)
 <LI><a href="#[15]">mesh_callback_func</a> from sig_mesh_led.o(i.mesh_callback_func) referenced from sig_mesh_led.o(i.app_mesh_led_init)
 <LI><a href="#[35]">mesh_check_baseband_status_handler</a> from m_al_scan.o(i.mesh_check_baseband_status_handler) referenced from m_al_scan.o(i.m_al_scan_init)
 <LI><a href="#[e8]">mesh_msg_dflt_handler</a> from mesh_api.o(i.mesh_msg_dflt_handler) referenced from mesh_api.o(.constdata)
 <LI><a href="#[1f]">os_default_task_func</a> from os_task.o(i.os_default_task_func) referenced from os_task.o(i.from_task_func_to_msg_handle)
 <LI><a href="#[1e]">ota_apply_reset_cb</a> from firmware_update_procedure_server.o(i.ota_apply_reset_cb) referenced from firmware_update_procedure_server.o(i.firmware_update_init)
 <LI><a href="#[95]">pb_remote_central_msg_handler</a> from pb_remote_central.o(i.pb_remote_central_msg_handler) referenced from pb_remote_central.o(i.pb_remote_central_init)
 <LI><a href="#[96]">pb_remote_connect_timeout</a> from pb_remote_central.o(i.pb_remote_connect_timeout) referenced from pb_remote_central.o(i.pb_remote_central_init)
 <LI><a href="#[e6]">pb_remote_gatt_close</a> from pb_remote_central.o(i.pb_remote_gatt_close) referenced from pb_remote_central.o(.constdata)
 <LI><a href="#[e5]">pb_remote_gatt_create</a> from pb_remote_central.o(i.pb_remote_gatt_create) referenced from pb_remote_central.o(.constdata)
 <LI><a href="#[e7]">pb_remote_gatt_send</a> from pb_remote_central.o(i.pb_remote_gatt_send) referenced from pb_remote_central.o(.constdata)
 <LI><a href="#[25d]">pdm_isr_ram</a> from app_boot_vectors.o(ram_code) referenced from app_boot_vectors.o(RESET)
 <LI><a href="#[270]">platform_reset_patch</a> from sys_utils.o(ram_code) referenced from patch.o(.data)
 <LI><a href="#[25b]">pmu_isr_ram</a> from app_boot_vectors.o(ram_code) referenced from app_boot_vectors.o(RESET)
 <LI><a href="#[f]">prf_itf_get_imp</a> from app_prf.o(i.prf_itf_get_imp) referenced from entry.o(i.app_main)
 <LI><a href="#[97]">proj_ble_gap_evt_func</a> from proj_main.o(i.proj_ble_gap_evt_func) referenced from proj_main.o(i.user_entry_after_ble_init)
 <LI><a href="#[25e]">prv_call_svc_pc</a> from syscall.txt(ABSOLUTE) referenced from app_boot_vectors.o(ram_code)
 <LI><a href="#[25f]">rf_force_agc_enable</a> from patch_rf.o(i.rf_force_agc_enable) referenced from patch_rf.o(ram_code)
 <LI><a href="#[10]">rf_init_app</a> from patch_rf.o(ram_code) referenced from entry.o(i.app_main)
 <LI><a href="#[e]">rwble_hl_init_imp</a> from rwble_hl.o(i.rwble_hl_init_imp) referenced from entry.o(i.app_main)
 <LI><a href="#[253]">rwble_isr_patch</a> from patch_rf.o(ram_code) referenced from app_boot_vectors.o(RESET)
 <LI><a href="#[16]">sig_mesh_prov_timer_handler</a> from sig_mesh_led.o(i.sig_mesh_prov_timer_handler) referenced from sig_mesh_led.o(i.app_mesh_led_init)
 <LI><a href="#[1dd]">smpc_construcpublic_key_t_pdu</a> from smpc_util.o(i.smpc_construcpublic_key_t_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[1de]">smpc_construct_dhkey_check_pdu</a> from smpc_util.o(i.smpc_construct_dhkey_check_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[1d7]">smpc_construct_enc_info_pdu</a> from smpc_util.o(i.smpc_construct_enc_info_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[1da]">smpc_construct_id_addr_info_pdu</a> from smpc_util.o(i.smpc_construct_id_addr_info_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[1d9]">smpc_construct_id_info_pdu</a> from smpc_util.o(i.smpc_construct_id_info_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[1df]">smpc_construct_keypress_notification_pdu</a> from smpc_util.o(i.smpc_construct_keypress_notification_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[1d8]">smpc_construct_mst_id_pdu</a> from smpc_util.o(i.smpc_construct_mst_id_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[1d4]">smpc_construct_pair_cfm_pdu</a> from smpc_util.o(i.smpc_construct_pair_cfm_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[1d6]">smpc_construct_pair_fail_pdu</a> from smpc_util.o(i.smpc_construct_pair_fail_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[1d5]">smpc_construct_pair_rand_pdu</a> from smpc_util.o(i.smpc_construct_pair_rand_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[1d2]">smpc_construct_pair_req_pdu</a> from smpc_util.o(i.smpc_construct_pair_req_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[1d3]">smpc_construct_pair_rsp_pdu</a> from smpc_util.o(i.smpc_construct_pair_rsp_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[1dc]">smpc_construct_sec_req_pdu</a> from smpc_util.o(i.smpc_construct_sec_req_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[1db]">smpc_construct_sign_info_pdu</a> from smpc_util.o(i.smpc_construct_sign_info_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[1ec]">smpc_recv_dhkey_check_pdu</a> from smpc_util.o(i.smpc_recv_dhkey_check_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[1e5]">smpc_recv_enc_info_pdu</a> from smpc_util.o(i.smpc_recv_enc_info_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[1e8]">smpc_recv_id_addr_info_pdu</a> from smpc_util.o(i.smpc_recv_id_addr_info_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[1e7]">smpc_recv_id_info_pdu</a> from smpc_util.o(i.smpc_recv_id_info_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[1ed]">smpc_recv_keypress_notification_pdu</a> from smpc_util.o(i.smpc_recv_keypress_notification_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[1e6]">smpc_recv_mst_id_pdu</a> from smpc_util.o(i.smpc_recv_mst_id_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[1e2]">smpc_recv_pair_cfm_pdu</a> from smpc_util.o(i.smpc_recv_pair_cfm_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[1e4]">smpc_recv_pair_fail_pdu</a> from smpc_util.o(i.smpc_recv_pair_fail_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[1e3]">smpc_recv_pair_rand_pdu</a> from smpc_util.o(i.smpc_recv_pair_rand_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[1e0]">smpc_recv_pair_req_pdu</a> from smpc_util.o(i.smpc_recv_pair_req_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[1e1]">smpc_recv_pair_rsp_pdu</a> from smpc_util.o(i.smpc_recv_pair_rsp_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[1eb]">smpc_recv_public_key_pdu</a> from smpc_util.o(i.smpc_recv_public_key_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[1ea]">smpc_recv_sec_req_pdu</a> from smpc_util.o(i.smpc_recv_sec_req_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[1e9]">smpc_recv_sign_info_pdu</a> from smpc_util.o(i.smpc_recv_sign_info_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[258]">ssp_isr_ram</a> from app_boot_vectors.o(ram_code) referenced from app_boot_vectors.o(RESET)
 <LI><a href="#[14]">svc_exception_handler_ram</a> from patch.o(ram_code) referenced from entry.o(i.app_main)
 <LI><a href="#[254]">timer0_isr_ram</a> from fr801x_it.o(ram_code) referenced from app_boot_vectors.o(RESET)
 <LI><a href="#[255]">timer1_isr_ram</a> from fr801x_it.o(ram_code) referenced from app_boot_vectors.o(RESET)
 <LI><a href="#[256]">uart0_isr_ram</a> from app_boot_vectors.o(ram_code) referenced from app_boot_vectors.o(RESET)
 <LI><a href="#[257]">uart1_isr_ram</a> from app_boot_vectors.o(ram_code) referenced from app_boot_vectors.o(RESET)
 <LI><a href="#[13]">user_entry_before_sleep_imp</a> from proj_main.o(ram_code) referenced from entry.o(i.app_main)
 <LI><a href="#[273]">vPortSuppressTicksAndSleep_patch</a> from patch_rtos.o(ram_code) referenced from patch.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[791]"></a>rwip_sleep_mul_64</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_smooth_calc_calib_result (via Veneer)
</UL>

<P><STRONG><a name="[78c]"></a>vPortSVCHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler (via Veneer)
</UL>

<P><STRONG><a name="[25e]"></a>prv_call_svc_pc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> app_boot_vectors.o(ram_code)
</UL>
<P><STRONG><a name="[251]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> app_boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[249]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> app_boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[892]"></a>set_handlemode_sp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL></UL>

<P><STRONG><a name="[24a]"></a>NMI_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> app_boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[24c]"></a>MemManage_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> app_boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[24d]"></a>BusFault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> app_boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[24e]"></a>UsageFault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> app_boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[250]"></a>DebugMon_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> app_boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[3b1]"></a>CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_cal (via Veneer)
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop (via Veneer)
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start (via Veneer)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_init (via Veneer)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write (via Veneer)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read (via Veneer)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase (via Veneer)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set_high_cnt (via Veneer)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase (via Veneer)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_otas_save_data (via Veneer)
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_clear_isr_state (via Veneer)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frspim_wr (via Veneer)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frspim_rd (via Veneer)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep_patch (via Veneer)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_OTP_erase (via Veneer)
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_OTP_read (via Veneer)
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_OTP_write (via Veneer)
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_timer_handle (via Veneer)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop (via Veneer)
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_check_baseband_status_handler (via Veneer)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_scan_start (via Veneer)
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_lld_cancel (via Veneer)
</UL>

<P><STRONG><a name="[3b2]"></a>CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_cal (via Veneer)
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop (via Veneer)
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start (via Veneer)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_init (via Veneer)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write (via Veneer)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read (via Veneer)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase (via Veneer)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set_high_cnt (via Veneer)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase (via Veneer)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_otas_save_data (via Veneer)
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_clear_isr_state (via Veneer)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frspim_wr (via Veneer)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frspim_rd (via Veneer)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_OTP_erase (via Veneer)
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_OTP_read (via Veneer)
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_OTP_write (via Veneer)
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_timer_handle (via Veneer)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop (via Veneer)
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_check_baseband_status_handler (via Veneer)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_scan_start (via Veneer)
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_lld_cancel (via Veneer)
</UL>

<P><STRONG><a name="[7bb]"></a>GLOBAL_INT_STOP</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_reset_patch (via Veneer)
</UL>

<P><STRONG><a name="[796]"></a>GLOBAL_INT_START</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop (via Veneer)
</UL>

<P><STRONG><a name="[3d2]"></a>rand</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_req_ind_handler (via Veneer)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_update_cmd_handler (via Veneer)
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_tx_set (via Veneer)
</UL>

<P><STRONG><a name="[315]"></a>srand</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main (via Veneer)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_reset_complete_ind_func (via Veneer)
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_db_init_complete_ind_func (via Veneer)
</UL>

<P><STRONG><a name="[2b6]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_ImageUpdate (via Veneer)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolProcess (via Veneer)
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MEM_Factory_Reset (via Veneer)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msg_post (via Veneer)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MEM_Init (via Veneer)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_send_rsp (via Veneer)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MESH_Status_Send (via Veneer)
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Google_gatt_msg_handler (via Veneer)
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send (via Veneer)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_chunk_transfer (via Veneer)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_set_scan_rsp_data (via Veneer)
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_send_prov_param_rsp (via Veneer)
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_send_prov_auth_data_rsp (via Veneer)
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_start_conn (via Veneer)
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_dev_name (via Veneer)
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_OTA_gatt_msg_handler (via Veneer)
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_get_dev_name (via Veneer)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_encrypt_req_ind_handler (via Veneer)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_req_ind_handler (via Veneer)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_ind_handler (via Veneer)
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sec_resolve_address (via Veneer)
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_connection_success_ind_func (via Veneer)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_connection_req_ind_func (via Veneer)
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bond_store_info (via Veneer)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bond_check (via Veneer)
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sec_init (via Veneer)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_set_dev_config (via Veneer)
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_table_get_static_keys (via Veneer)
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_table_param_set (via Veneer)
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_pdu_rx (via Veneer)
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_pbrs_prov_bearer_gatt_send (via Veneer)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_info_update_state (via Veneer)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_info_update_net_key (via Veneer)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_info_update_app_key (via Veneer)
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_info_load (via Veneer)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_api_cmp_handler (via Veneer)
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_write_peer_svc_to_flash (via Veneer)
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_load_peer_svc_from_flash (via Veneer)
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_svc_create_db_ext (via Veneer)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_att_set_value (via Veneer)
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_notification_with_handle (via Veneer)
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_client_write_req_with_handle (via Veneer)
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_client_write_cmd_with_handle (via Veneer)
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_add_client_uuid (via Veneer)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_service_init (via Veneer)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_set_scan_response_data (via Veneer)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_set_per_adv_data (via Veneer)
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_set_advertising_param (via Veneer)
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_set_advertising_data (via Veneer)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler (via Veneer)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_ind_handler (via Veneer)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_dev_info_cfm_handler (via Veneer)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler (via Veneer)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_connection_req_ind_handler (via Veneer)
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_scan_report (via Veneer)
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_handler_scan (via Veneer)
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_handler_link (via Veneer)
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_check_adv_report (via Veneer)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler (via Veneer)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_handle_rx_pkt (via Veneer)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_start (via Veneer)
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_pdu_send_cont (via Veneer)
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_adv_start_cont (via Veneer)
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_adv_continue (via Veneer)
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_uuid (via Veneer)
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_get_value (via Veneer)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_convert_to128 (via Veneer)
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_lld_send (via Veneer)
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_update (via Veneer)
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_add (via Veneer)
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_dev_add (via Veneer)
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_app_update (via Veneer)
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_app_add (via Veneer)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_friend_finished_cb (via Veneer)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_finished_cb (via Veneer)
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_sec_ecdh_secret (via Veneer)
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_unpack (via Veneer)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_header_check (via Veneer)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cmd_handler (via Veneer)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_svc_changed_cmd_handler (via Veneer)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_sdp_svc_disc_cmd_handler (via Veneer)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_cmd_handler (via Veneer)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_disc_svc_incl_ind_handler (via Veneer)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_disc_cmd_handler (via Veneer)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_disc_char_ind_handler (via Veneer)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_disc_char_desc_ind_handler (via Veneer)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler (via Veneer)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_sign_ind_handler (via Veneer)
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_send_event (via Veneer)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_signed (via Veneer)
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_update_elmt (via Veneer)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_req (via Veneer)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_mult_req (via Veneer)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_by_type_req (via Veneer)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_by_grp_type_req (via Veneer)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_blob_req (via Veneer)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_prepare_write_req (via Veneer)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_info_req (via Veneer)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_execute_write_req (via Veneer)
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_svc_init (via Veneer)
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_f6_init (via Veneer)
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_f5_init (via Veneer)
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_use_enc_block_cmd (via Veneer)
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_start_enc_cmd (via Veneer)
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_req_ind (via Veneer)
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_ind (via Veneer)
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_ltk_req_rsp (via Veneer)
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_gen_dh_key_cmd (via Veneer)
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_handle_enc_change_evt (via Veneer)
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_l (via Veneer)
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_e1 (via Veneer)
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_ci (via Veneer)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_local_p256_public_key_cmp_evt_handler (via Veneer)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_generate_dhkey_cmp_evt_handler (via Veneer)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_irk_cmd_handler (via Veneer)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_dev_config_cmd_handler (via Veneer)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_pub_key_cmd_handler (via Veneer)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_gen_dh_key_cmd_handler (via Veneer)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_peer_att_info_ind_handler (via Veneer)
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_sign_cont (via Veneer)
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_tk_exch (via Veneer)
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_oob_exch (via Veneer)
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_csrk_exch (via Veneer)
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_handle_dh_key_check_complete (via Veneer)
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont (via Veneer)
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_start_tx_unprov_bcn (via Veneer)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_model_rx_cb (via Veneer)
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_exec_cmd (via Veneer)
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_model_rsp_send_cmd_handler (via Veneer)
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_pack (via Veneer)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_dbg_pdu_pack (via Veneer)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_read_ind (via Veneer)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_rsp_handler (via Veneer)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_mult_rsp_handler (via Veneer)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_by_type_rsp_handler (via Veneer)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_by_grp_type_rsp_handler (via Veneer)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_hdl_val_ntf_ind_handler (via Veneer)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_find_info_rsp_handler (via Veneer)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_find_by_type_rsp_handler (via Veneer)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_public_key_pdu (via Veneer)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_rand_pdu (via Veneer)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_cfm_pdu (via Veneer)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_id_info_pdu (via Veneer)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_enc_info_pdu (via Veneer)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_dhkey_check_pdu (via Veneer)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_construct_sign_info_pdu (via Veneer)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_construct_pair_rand_pdu (via Veneer)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_construct_pair_cfm_pdu (via Veneer)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_construct_id_info_pdu (via Veneer)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_construct_enc_info_pdu (via Veneer)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_construct_dhkey_check_pdu (via Veneer)
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_aes_cmac_continue (via Veneer)
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_aes_cmac_complete (via Veneer)
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_g2_init (via Veneer)
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_f4_Init (via Veneer)
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_smp_resolv_op_cont (via Veneer)
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_smp_encrypt_rsp (via Veneer)
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_scan_store_fragment (via Veneer)
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_scan_send_adv_report_ind (via Veneer)
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_per_sync_send_adv_report_ind (via Veneer)
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_list_add_next_entry (via Veneer)
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init_start (via Veneer)
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_send_hci_le_set_per_adv_data_cmd (via Veneer)
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_send_hci_le_set_ext_scan_rsp_data_cmd (via Veneer)
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_send_hci_le_set_ext_adv_data_cmd (via Veneer)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_load (via Veneer)
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pub_key_get (via Veneer)
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_param_rsp (via Veneer)
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_oob_auth_rsp (via Veneer)
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_bearer_gatt_start (via Veneer)
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_send_update_ind (via Veneer)
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_compo_data_status (via Veneer)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process (via Veneer)
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_model_subs_vaddr (via Veneer)
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_state_ind (via Veneer)
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_publi_param_ind (via Veneer)
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_net_key_ind (via Veneer)
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_app_key_ind (via Veneer)
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_subscription_list (via Veneer)
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_add_virt_addr (via Veneer)
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_rx (via Veneer)
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_rand_finished_cb (via Veneer)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pub_key_res_cb (via Veneer)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_psalt_finished_cb (via Veneer)
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pdu_send (via Veneer)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pdu_random_handler (via Veneer)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pdu_pub_key_handler (via Veneer)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pdu_data_handler (via Veneer)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pdu_cfm_handler (via Veneer)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_k1_finished_cb (via Veneer)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_ecdh_secret_res_cb (via Veneer)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_cmac_finished_cb (via Veneer)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_cfm_salt_finished_cb (via Veneer)
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_pack (via Veneer)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_rx (via Veneer)
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_opcode_set (via Veneer)
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_send_status (via Veneer)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_tx_cb (via Veneer)
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_send_seg (via Veneer)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_rx (via Veneer)
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_friend_subs_list_update (via Veneer)
</UL>

<P><STRONG><a name="[2a2]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Google_Start_Advertising (via Veneer)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_Write (via Veneer)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_Read (via Veneer)
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MEM_VALUE_PRINTF (via Veneer)
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init (via Veneer)
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_bg_trim (via Veneer)
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_discovery_all_peer_svc (via Veneer)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_info_update_subs (via Veneer)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_info_update_bind (via Veneer)
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_profile_task_add (via Veneer)
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_get_value (via Veneer)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_dev_config_cmd_handler (via Veneer)
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_addr_list_rem (via Veneer)
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_send_seg (via Veneer)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_rx (via Veneer)
</UL>

<P><STRONG><a name="[3b0]"></a>__aeabi_memset</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send (via Veneer)
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blob_transfer_server_phase_transitions (via Veneer)
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_table_memmory_init (via Veneer)
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_init (via Veneer)
</UL>

<P><STRONG><a name="[2ad]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Light_Init (via Veneer)
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send (via Veneer)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_req_ind_handler (via Veneer)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bond_read_info_from_flash (via Veneer)
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sec_init (via Veneer)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_set_dev_config (via Veneer)
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_load_peer_svc_from_flash (via Veneer)
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_add_client_uuid (via Veneer)
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_store_peer_prf_info (via Veneer)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_service_init (via Veneer)
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_check_peer_svc (via Veneer)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bond_init (via Veneer)
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_l (via Veneer)
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_sign_command (via Veneer)
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_confirm_gen_rand (via Veneer)
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_aes_cmac_continue (via Veneer)
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_scan_add_to_filter (via Veneer)
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_oob_auth_rsp (via Veneer)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_cfm_salt_finished_cb (via Veneer)
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_init (via Veneer)
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_hb_init (via Veneer)
</UL>

<P><STRONG><a name="[29b]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Google_Init (via Veneer)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TC_OTA_Init (via Veneer)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MEM_Init (via Veneer)
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_led_init (via Veneer)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_fw_update_start (via Veneer)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_fw_update_get (via Veneer)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_fw_update_cancel (via Veneer)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_fw_update_apply (via Veneer)
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send (via Veneer)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_transfer_cancel (via Veneer)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_chunk_transfer (via Veneer)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_blob_transfer_start (via Veneer)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_blob_transfer_get (via Veneer)
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_static_memory (via Veneer)
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_final (via Veneer)
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_init_imp (via Veneer)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main (via Veneer)
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_add_client_uuid (via Veneer)
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_msg_default_handler_imp (via Veneer)
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_init (via Veneer)
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_scan_clear (via Veneer)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_create (via Veneer)
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_con_create (via Veneer)
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_init (via Veneer)
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_friend_new_ind (via Veneer)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_friend_finished_cb (via Veneer)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_finished_cb (via Veneer)
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_init (via Veneer)
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_alloc (via Veneer)
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_start (via Veneer)
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_req_handler (via Veneer)
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_init (via Veneer)
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_check_data_sanity (via Veneer)
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_init (via Veneer)
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_init (via Veneer)
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_init (via Veneer)
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_friend_init (via Veneer)
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_init (via Veneer)
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_init (via Veneer)
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_tx_handler (via Veneer)
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_handler_request (via Veneer)
</UL>

<P><STRONG><a name="[2fa]"></a>memcmp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_Write (via Veneer)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sec_check_ediv_rand (via Veneer)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bond_write_info_to_flash (via Veneer)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bond_check (via Veneer)
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bond_addr_resolve_cb (via Veneer)
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_app_boot_host_comm (via Veneer)
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_table_set_static_keys (via Veneer)
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_table_get_static_keys (via Veneer)
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_info_load (via Veneer)
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_handler_link (via Veneer)
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_check_adv_report (via Veneer)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_uuid_comp (via Veneer)
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_con_create (via Veneer)
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_update (via Veneer)
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_add (via Veneer)
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_get_net_from_net_id (via Veneer)
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_app_update (via Veneer)
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_app_add (via Veneer)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_by_type_req (via Veneer)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_ext_adv_report_evt_handler (via Veneer)
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_sign_cont (via Veneer)
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont (via Veneer)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_prep_wr_rsp_handler (via Veneer)
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_smp_resolv_op_cont (via Veneer)
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_scan_filter_packet (via Veneer)
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_scan_add_to_filter (via Veneer)
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_find_label_uuid (via Veneer)
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_rx (via Veneer)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_cmac_finished_cb (via Veneer)
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_is_in_pre_filt (via Veneer)
</UL>

<P><STRONG><a name="[78e]"></a>FPB_CompSet</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_reset_patch (via Veneer)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep_patch (via Veneer)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_init (via Veneer)
</UL>

<P><STRONG><a name="[2df]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIMER_Init (via Veneer)
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_entry_after_sleep_imp (via Veneer)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main (via Veneer)
</UL>

<P><STRONG><a name="[2de]"></a>NVIC_SetPriority</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIMER_Init (via Veneer)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep_patch (via Veneer)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main (via Veneer)
</UL>

<P><STRONG><a name="[252]"></a>SysTick_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> app_boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[7ed]"></a>aes_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL></UL>

<P><STRONG><a name="[506]"></a>aes_ccm</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_sec_aes_ccm (via Veneer)
</UL>

<P><STRONG><a name="[508]"></a>aes_cmac</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_sec_aes_cmac (via Veneer)
</UL>

<P><STRONG><a name="[463]"></a>aes_encrypt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_sec_aes (via Veneer)
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_smp_encrypt_req (via Veneer)
</UL>

<P><STRONG><a name="[514]"></a>aes_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_sec_init (via Veneer)
</UL>

<P><STRONG><a name="[50a]"></a>aes_k1</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_sec_aes_k1 (via Veneer)
</UL>

<P><STRONG><a name="[50c]"></a>aes_k2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_sec_aes_k2 (via Veneer)
</UL>

<P><STRONG><a name="[50e]"></a>aes_k3</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_sec_aes_k3 (via Veneer)
</UL>

<P><STRONG><a name="[510]"></a>aes_k4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_sec_aes_k4 (via Veneer)
</UL>

<P><STRONG><a name="[464]"></a>aes_rand</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_sec_rand (via Veneer)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_smp_rand_req (via Veneer)
</UL>

<P><STRONG><a name="[469]"></a>aes_result_handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_use_enc_block_ind_handler (via Veneer)
</UL>

<P><STRONG><a name="[512]"></a>aes_s1</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_sec_aes_s1 (via Veneer)
</UL>

<P><STRONG><a name="[7ee]"></a>aes_start</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL></UL>

<P><STRONG><a name="[319]"></a>app_boot_get_storage_type</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main (via Veneer)
</UL>

<P><STRONG><a name="[7c0]"></a>app_boot_host_comm_loop</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_app_boot_host_comm (via Veneer)
</UL>

<P><STRONG><a name="[4c6]"></a>ble_util_buf_acl_tx_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_lld_send (via Veneer)
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_data_send (via Veneer)
</UL>

<P><STRONG><a name="[4c9]"></a>ble_util_buf_acl_tx_free</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_lld_evt_end_isr (via Veneer)
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_lld_cancel (via Veneer)
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_data_send (via Veneer)
</UL>

<P><STRONG><a name="[4d7]"></a>ble_util_buf_adv_tx_free</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_patch_1 (via Veneer)
</UL>

<P><STRONG><a name="[4bb]"></a>ble_util_buf_init_env</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_static_memory (via Veneer)
</UL>

<P><STRONG><a name="[4b0]"></a>ble_util_buf_rx_free</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_data_handler (via Veneer)
</UL>

<P><STRONG><a name="[48b]"></a>co_list_extract</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_alloc (via Veneer)
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_remove (via Veneer)
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_block_free (via Veneer)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_reg_to_peer_evt_cmd_handler (via Veneer)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_cb_timer_offer (via Veneer)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_trans_incomp_timer (via Veneer)
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_seg_finished (via Veneer)
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_rx_ltrans_unseg (via Veneer)
</UL>

<P><STRONG><a name="[4f6]"></a>co_list_find</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_djob_reg (via Veneer)
</UL>

<P><STRONG><a name="[350]"></a>co_list_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_init_imp (via Veneer)
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_djob_init (via Veneer)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_activity_init (via Veneer)
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_stopped_ind_handler (via Veneer)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_create (via Veneer)
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_init (via Veneer)
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_expired (via Veneer)
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_create (via Veneer)
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_adv_start (via Veneer)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_read_ind (via Veneer)
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_start (via Veneer)
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_init (via Veneer)
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_init (via Veneer)
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_rx (via Veneer)
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_bearer_init (via Veneer)
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_init (via Veneer)
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_init (via Veneer)
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_rx_seg_all (via Veneer)
</UL>

<P><STRONG><a name="[39f]"></a>co_list_insert_before</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_insert (via Veneer)
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_store_prep_data (via Veneer)
</UL>

<P><STRONG><a name="[34e]"></a>co_list_pop_front</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_exc_activity_cmp (via Veneer)
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_arb_event_start_direct (via Veneer)
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_arb_event_start_isr_patch (via Veneer)
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_process_next (via Veneer)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_activity_init (via Veneer)
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_init (via Veneer)
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_cleanup (via Veneer)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_handle_rx_pkt (via Veneer)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_process_pdu (via Veneer)
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_clear_rsp_data (via Veneer)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_clear_prep_data (via Veneer)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cleanup (via Veneer)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_operation_cleanup (via Veneer)
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_expired (via Veneer)
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_djob_evt_handler (via Veneer)
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_activity_cmd_exec (via Veneer)
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_data_send (via Veneer)
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_cleanup (via Veneer)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cfm_handler (via Veneer)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler (via Veneer)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_att_info_cfm_handler (via Veneer)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_cmp_evt_handler (via Veneer)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_prepare_write_req (via Veneer)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_execute_write_req (via Veneer)
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_per_sync_clear_fragments (via Veneer)
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_sent (via Veneer)
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_closed (via Veneer)
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_send_continue (via Veneer)
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_cmac_finished_cb (via Veneer)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_rsp_handler (via Veneer)
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_scan_send_adv_report_ind (via Veneer)
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_scan_clear_fragments (via Veneer)
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_per_sync_send_adv_report_ind (via Veneer)
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_stop (via Veneer)
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_publish (via Veneer)
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process_next (via Veneer)
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_func_end_handler (via Veneer)
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_execute (via Veneer)
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_rx (via Veneer)
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_clean_up (via Veneer)
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_check_relay (via Veneer)
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_clean_list_offer (via Veneer)
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_check_tx_list (via Veneer)
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_model_check (via Veneer)
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_process_next (via Veneer)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_tx (via Veneer)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_sent (via Veneer)
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_decrypt_err (via Veneer)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_ccm_enc_finished_cb (via Veneer)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_ccm_dec_finished_cb (via Veneer)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_sent (via Veneer)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_obfusc_finished_cb (via Veneer)
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_decrypt_err (via Veneer)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_closed (via Veneer)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_ccm_enc_finished_cb (via Veneer)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_ccm_dec_finished_cb (via Veneer)
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_tx_handler (via Veneer)
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_rx_seg_all (via Veneer)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_rx_ltrans (via Veneer)
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_check_queue_length (via Veneer)
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_cb_timer (via Veneer)
</UL>

<P><STRONG><a name="[34f]"></a>co_list_push_back</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_tx_free_imp (via Veneer)
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_arb_event_start_isr_patch (via Veneer)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_execute_activity_cmd (via Veneer)
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release (via Veneer)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_cb_rx (via Veneer)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_handle_rx_pkt (via Veneer)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_activity_cmd_send (via Veneer)
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_insert (via Veneer)
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_block_alloc (via Veneer)
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_expired (via Veneer)
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_djob_reg (via Veneer)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send_cmd_handler (via Veneer)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_dbg_pdu_send_cmd_handler (via Veneer)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_reg_to_peer_evt_cmd_handler (via Veneer)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_disc_svc_ind_handler (via Veneer)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_l2cc_pdu_recv_handler (via Veneer)
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_store_prep_data (via Veneer)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_mult_req (via Veneer)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_by_type_req (via Veneer)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_by_grp_type_req (via Veneer)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_info_req (via Veneer)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_by_type_req (via Veneer)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_per_adv_report_evt_handler (via Veneer)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_send (via Veneer)
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_insert_encrypt_queue (via Veneer)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_rsp_handler (via Veneer)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_by_type_rsp_handler (via Veneer)
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_scan_store_fragment (via Veneer)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_cb_rx (via Veneer)
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_start (via Veneer)
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_init (via Veneer)
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_send (via Veneer)
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_rx (via Veneer)
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_send_subs_list (via Veneer)
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_send_poll (via Veneer)
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_handler_offer (via Veneer)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_sent (via Veneer)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_rx (via Veneer)
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_retx_timer_cb (via Veneer)
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_init (via Veneer)
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_init (via Veneer)
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_cb_rx (via Veneer)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_send (via Veneer)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_rx (via Veneer)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_send (via Veneer)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_rx (via Veneer)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_obfusc_finished_cb (via Veneer)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_trans_seg_timer (via Veneer)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_trans_ack_timer (via Veneer)
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_tx_handler (via Veneer)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_sent (via Veneer)
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_send (via Veneer)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_rx (via Veneer)
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_rx_seg_all (via Veneer)
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_rx_ltrans_unseg (via Veneer)
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_rx_ltrans_seg (via Veneer)
</UL>

<P><STRONG><a name="[63d]"></a>co_list_push_back_sublist</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_rx_seg_all (via Veneer)
</UL>

<P><STRONG><a name="[39d]"></a>co_list_push_front</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_insert (via Veneer)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler (via Veneer)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_prepare_write_req (via Veneer)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_tx (via Veneer)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_sent (via Veneer)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_ccm_enc_finished_cb (via Veneer)
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_handler_subs_list (via Veneer)
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_handler_poll (via Veneer)
</UL>

<P><STRONG><a name="[391]"></a>co_list_size</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cm_cleanup (via Veneer)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_mult_req (via Veneer)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_by_type_req (via Veneer)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_by_grp_type_req (via Veneer)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_by_type_req (via Veneer)
</UL>

<P><STRONG><a name="[2e2]"></a>co_printf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start (via Veneer)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_init (via Veneer)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write (via Veneer)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msg_post (via Veneer)
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_add_service (via Veneer)
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Google_gatt_msg_handler (via Veneer)
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onkey_isr_ram (via Veneer)
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_gpio_isr_ram (via Veneer)
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otd_isr_ram (via Veneer)
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charge_isr_ram (via Veneer)
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_isr_ram (via Veneer)
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdec_isr_ram (via Veneer)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_init (via Veneer)
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_callback_func (via Veneer)
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_add_client (via Veneer)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_remote_central_msg_handler (via Veneer)
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_entry_after_ble_init (via Veneer)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proj_ble_gap_evt_func (via Veneer)
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_OTA_gatt_msg_handler (via Veneer)
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler_C (via Veneer)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_isr_ram (via Veneer)
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set_load_value (via Veneer)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_security_ind_handler (via Veneer)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_encrypt_req_ind_handler (via Veneer)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_req_ind_handler (via Veneer)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_ind_handler (via Veneer)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bond_write_info_to_flash (via Veneer)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bond_check (via Veneer)
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bond_addr_resolve_cb (via Veneer)
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_timer_handle (via Veneer)
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_pdu_sent (via Veneer)
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_pdu_rx (via Veneer)
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_set_runtime (via Veneer)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_api_prov_state_ind_handler (via Veneer)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_api_cmp_handler (via Veneer)
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_write_peer_svc_to_flash (via Veneer)
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_load_peer_svc_from_flash (via Veneer)
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_add_client_uuid (via Veneer)
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_store_peer_prf_info (via Veneer)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_service_init (via Veneer)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bond_init (via Veneer)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_start_conn (via Veneer)
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_send (via Veneer)
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_scan_timer_handler (via Veneer)
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_scan_report (via Veneer)
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_scan_clear (via Veneer)
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_process (via Veneer)
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_link_timer_handler (via Veneer)
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_link_state_report (via Veneer)
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_handler_scan_cap (via Veneer)
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_handler_scan (via Veneer)
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_handler_link (via Veneer)
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_check_adv_report (via Veneer)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_disc_svc_ind_handler (via Veneer)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_public_key_pdu (via Veneer)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_dhkey_check_pdu (via Veneer)
</UL>

<P><STRONG><a name="[640]"></a>co_util_pack</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pdu_send (via Veneer)
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_pack (via Veneer)
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_send (via Veneer)
</UL>

<P><STRONG><a name="[63e]"></a>co_util_unpack</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pdu_handle (via Veneer)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_ccm_finished_cb (via Veneer)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_rx_ctl (via Veneer)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_rx_utrans (via Veneer)
</UL>

<P><STRONG><a name="[7b6]"></a>eTaskConfirmSleepModeStatus</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep_patch (via Veneer)
</UL>

<P><STRONG><a name="[812]"></a>flash_read_status</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL></UL>

<P><STRONG><a name="[813]"></a>flash_write_status</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL></UL>

<P><STRONG><a name="[5]"></a>fputc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[43f]"></a>hci_basic_cmd_send_2_controller</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_list_set_cmd_handler (via Veneer)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_pub_key_cmd_handler (via Veneer)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_dev_info_cmd_handler (via Veneer)
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_per_sync_stop (via Veneer)
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init_stop (via Veneer)
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_op_setup_continue (via Veneer)
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_op_reset_continue (via Veneer)
</UL>

<P><STRONG><a name="[4de]"></a>hci_ble_conhdl_register</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_patch_1 (via Veneer)
</UL>

<P><STRONG><a name="[3e0]"></a>hci_send_2_controller</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_set_pref_slave_latency_cmd_handler (via Veneer)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_set_phy_cmd_handler (via Veneer)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_set_le_pkt_size_handler (via Veneer)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_set_le_ping_to_handler (via Veneer)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_update_cmd_handler (via Veneer)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_update_cfm_handler (via Veneer)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_info_cmd_handler (via Veneer)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_disconnect_cmd_handler (via Veneer)
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_data_send (via Veneer)
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_start_enc_cmd (via Veneer)
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_ltk_req_rsp (via Veneer)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_cmd_cmp_evt_list_handler (via Veneer)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_channel_map_cmd_handler (via Veneer)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_ral_addr_cmd_handler (via Veneer)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_dev_info_cmd_handler (via Veneer)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_gen_dh_key_cmd_handler (via Veneer)
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_addr_fsm (via Veneer)
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_scan_send_hci_le_set_ext_scan_param_cmd (via Veneer)
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_scan_send_hci_le_set_ext_scan_en_cmd (via Veneer)
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_per_sync_stop (via Veneer)
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_per_sync_start (via Veneer)
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_list_add_next_entry (via Veneer)
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init_send_hci_le_ext_create_con_cmd (via Veneer)
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_op_setup_continue (via Veneer)
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_op_reset_continue (via Veneer)
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_cmd_cmp_evt_creating_handler (via Veneer)
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_send_hci_le_set_per_adv_en_cmd (via Veneer)
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_send_hci_le_set_per_adv_data_cmd (via Veneer)
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_send_hci_le_set_ext_scan_rsp_data_cmd (via Veneer)
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_send_hci_le_set_ext_adv_param_cmd (via Veneer)
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_send_hci_le_set_ext_adv_en_cmd (via Veneer)
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_send_hci_le_set_ext_adv_data_cmd (via Veneer)
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_send_hci_le_rmv_adv_set_cmd (via Veneer)
</UL>

<P><STRONG><a name="[4e0]"></a>hci_send_2_host</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_patch_1 (via Veneer)
</UL>

<P><STRONG><a name="[31b]"></a>intc_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main (via Veneer)
</UL>

<P><STRONG><a name="[482]"></a>ke_check_malloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler (via Veneer)
</UL>

<P><STRONG><a name="[4d1]"></a>ke_event_callback_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_djob_init (via Veneer)
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cm_init (via Veneer)
</UL>

<P><STRONG><a name="[4d2]"></a>ke_event_clear</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cm_init (via Veneer)
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_djob_evt_handler (via Veneer)
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cm_l2cap_tx_handler (via Veneer)
</UL>

<P><STRONG><a name="[4b8]"></a>ke_event_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_isr_patch (via Veneer)
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_arb_event_start_direct (via Veneer)
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_djob_reg (via Veneer)
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_djob_evt_handler (via Veneer)
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cm_l2cap_tx_handler (via Veneer)
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cm_tx_status (via Veneer)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_nb_cmp_pkts_evt_handler (via Veneer)
</UL>

<P><STRONG><a name="[2cb]"></a>ke_free</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_cal (via Veneer)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_info_clear (via Veneer)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MESH_Status_Send (via Veneer)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bond_write_info_to_flash (via Veneer)
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_exc_activity_cmp (via Veneer)
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_adv_recv_gapm_cmp (via Veneer)
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_create_x (via Veneer)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_info_update_subs (via Veneer)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_info_update_bind (via Veneer)
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_free (via Veneer)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_api_cmp_handler (via Veneer)
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_write_peer_svc_to_flash (via Veneer)
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_load_peer_svc_from_flash (via Veneer)
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_svc_create_db_ext (via Veneer)
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_svc_create_db (via Veneer)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_service_init (via Veneer)
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_clr_peer_svc (via Veneer)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_set_scan_response_data (via Veneer)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_set_per_adv_data (via Veneer)
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_set_advertising_param (via Veneer)
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_set_advertising_data (via Veneer)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_init (via Veneer)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_destroy (via Veneer)
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_stopped_ind_handler (via Veneer)
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_init (via Veneer)
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_cleanup (via Veneer)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_handle_rx_pkt (via Veneer)
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_clear_rsp_data (via Veneer)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_clear_prep_data (via Veneer)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cleanup (via Veneer)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_operation_cleanup (via Veneer)
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_destroy (via Veneer)
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_operation_cleanup (via Veneer)
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_cleanup (via Veneer)
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_cleanup (via Veneer)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_reg_to_peer_evt_cmd_handler (via Veneer)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_info_req (via Veneer)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_execute_write_req (via Veneer)
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_scan_actv_clean (via Veneer)
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_free (via Veneer)
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_end (via Veneer)
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont (via Veneer)
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_g2_complete (via Veneer)
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_f6_complete (via Veneer)
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_f5_complete (via Veneer)
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_f4_complete (via Veneer)
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_scan_send_adv_report_ind (via Veneer)
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_scan_clear_fragments (via Veneer)
</UL>

<P><STRONG><a name="[2c9]"></a>ke_malloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_cal (via Veneer)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MESH_Status_Send (via Veneer)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_add_model (via Veneer)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bond_write_info_to_flash (via Veneer)
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_create_x (via Veneer)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_info_update_subs (via Veneer)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_info_update_state (via Veneer)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_info_update_publish (via Veneer)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_info_update_net_key (via Veneer)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_info_update_bind (via Veneer)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_info_update_app_key (via Veneer)
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_info_load (via Veneer)
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_malloc (via Veneer)
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_write_peer_svc_to_flash (via Veneer)
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_load_peer_svc_from_flash (via Veneer)
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;from_task_func_to_msg_handle (via Veneer)
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_svc_create_db_ext (via Veneer)
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_svc_create_db (via Veneer)
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_add_client_uuid (via Veneer)
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_store_peer_prf_info (via Veneer)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_service_init (via Veneer)
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_check_peer_svc (via Veneer)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bond_init (via Veneer)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_set_scan_response_data (via Veneer)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_set_per_adv_data (via Veneer)
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_set_advertising_param (via Veneer)
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_set_advertising_data (via Veneer)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_execute_activity_cmd (via Veneer)
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_msg_alloc (via Veneer)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_init (via Veneer)
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_stopped_ind_handler (via Veneer)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_handle_rx_pkt (via Veneer)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_create (via Veneer)
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_add_service (via Veneer)
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_con_create (via Veneer)
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_create (via Veneer)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_reg_to_peer_evt_cmd_handler (via Veneer)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_mult_req (via Veneer)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_by_type_req (via Veneer)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_by_grp_type_req (via Veneer)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_info_req (via Veneer)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_by_type_req (via Veneer)
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_f6_init (via Veneer)
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_f5_init (via Veneer)
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_alloc (via Veneer)
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_sign_command (via Veneer)
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_start (via Veneer)
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_req_handler (via Veneer)
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_g2_init (via Veneer)
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_f4_Init (via Veneer)
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_aes_cmac_init (via Veneer)
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_scan_store_fragment (via Veneer)
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_scan_add_to_filter (via Veneer)
</UL>

<P><STRONG><a name="[4bd]"></a>ke_mem_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_table_memmory_init (via Veneer)
</UL>

<P><STRONG><a name="[349]"></a>ke_msg_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msg_post (via Veneer)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_send_rsp (via Veneer)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_conn_param_update (via Veneer)
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_start (via Veneer)
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_send_prov_param_rsp (via Veneer)
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_send_prov_auth_data_rsp (via Veneer)
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_proxy_ctrl (via Veneer)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_init (via Veneer)
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_discovery_all_peer_svc (via Veneer)
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_disconnect_req (via Veneer)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_mtu_exchange_req (via Veneer)
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_patch_1 (via Veneer)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_encrypt_req_ind_handler (via Veneer)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_req_ind_handler (via Veneer)
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_connection_send_cfm (via Veneer)
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sec_resolve_address (via Veneer)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_create_conn_act (via Veneer)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_set_dev_config (via Veneer)
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_delete_act (via Veneer)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_create_per_adv_act (via Veneer)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_create_legacy_adv_act (via Veneer)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_create_aux_adv_act (via Veneer)
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_init_imp (via Veneer)
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_set_runtime (via Veneer)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_api_fault_get_req_ind_handler (via Veneer)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_api_model_opcode_req_ind_handler (via Veneer)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_api_cmp_handler (via Veneer)
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_profile_task_add (via Veneer)
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_notification_with_handle (via Veneer)
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_client_write_req_with_handle (via Veneer)
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_client_write_cmd_with_handle (via Veneer)
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_regist_peer_prf_info (via Veneer)
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_msg_default_handler_imp (via Veneer)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_stop_conn (via Veneer)
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_stop_advertising (via Veneer)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_start_conn (via Veneer)
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_start_advertising (via Veneer)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_set_scan_response_data (via Veneer)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_set_per_adv_data (via Veneer)
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_set_advertising_data (via Veneer)
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc (via Veneer)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler (via Veneer)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler (via Veneer)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_ind_handler (via Veneer)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_att_info_req_ind_handler (via Veneer)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_update_conn_param_to_ind_handler (via Veneer)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_set_pref_slave_latency_cmd_handler (via Veneer)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_set_phy_cmd_handler (via Veneer)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_set_le_pkt_size_handler (via Veneer)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_set_le_ping_to_handler (via Veneer)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_set_dev_info_cfm_handler (via Veneer)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_update_cmd_handler (via Veneer)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_update_cfm_handler (via Veneer)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_info_cmd_handler (via Veneer)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_dev_info_cfm_handler (via Veneer)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_disconnect_cmd_handler (via Veneer)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler (via Veneer)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_set_dev_info_req_ind_handler (via Veneer)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_update_req_ind_handler (via Veneer)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_dev_info_req_ind_handler (via Veneer)
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_scan_stop_continue (via Veneer)
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_scan_start_continue (via Veneer)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler (via Veneer)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler (via Veneer)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_stop (via Veneer)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_start (via Veneer)
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_pdu_send_cont (via Veneer)
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_disconnect (via Veneer)
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_adv_start_cont (via Veneer)
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_adv_continue (via Veneer)
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_set_mtu (via Veneer)
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_error_evt (via Veneer)
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt (via Veneer)
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_error_evt (via Veneer)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt (via Veneer)
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_error_evt (via Veneer)
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_disconect_ind (via Veneer)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt (via Veneer)
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_con_create (via Veneer)
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_sec_pub_key_read (via Veneer)
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_sec_ecdh_secret (via Veneer)
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_data_send (via Veneer)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_send_cmp_evt (via Veneer)
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_rx_init (via Veneer)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_header_check (via Veneer)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler (via Veneer)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cmd_handler (via Veneer)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_svc_changed_cmd_handler (via Veneer)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_sdp_svc_disc_cmd_handler (via Veneer)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler (via Veneer)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler (via Veneer)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_att_info_req_ind_handler (via Veneer)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_signed (via Veneer)
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_update_elmt (via Veneer)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_prepare_write_req (via Veneer)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_value (via Veneer)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_execute_write_req (via Veneer)
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_use_enc_block_cmd (via Veneer)
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_start_enc_cmd (via Veneer)
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_req_ind (via Veneer)
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_ind (via Veneer)
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_ltk_req_rsp (via Veneer)
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_gen_dh_key_cmd (via Veneer)
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_handle_enc_change_evt (via Veneer)
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_rand (via Veneer)
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_l (via Veneer)
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_e1 (via Veneer)
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_ci (via Veneer)
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_check_repeated_attempts (via Veneer)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_test_end_cmd_cmp_evt_handler (via Veneer)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_local_ver_info_cmd_cmp_evt_handler (via Veneer)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_scan_req_rcvd_evt_handler (via Veneer)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_max_adv_data_len_cmd_cmp_evt_handler (via Veneer)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_tx_pwr_cmd_cmp_evt_handler (via Veneer)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_suggted_dft_data_len_cmd_cmp_evt_handler (via Veneer)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_rf_path_comp_cmd_cmp_evt_handler (via Veneer)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_ral_addr_cmd_cmp_evt_handler (via Veneer)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_nb_supp_adv_sets_cmd_cmp_evt_handler (via Veneer)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_max_data_len_cmd_cmp_evt_handler (via Veneer)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_local_p256_public_key_cmp_evt_handler (via Veneer)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_adv_chnl_tx_pw_cmd_cmp_evt_handler (via Veneer)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_per_adv_sync_est_evt_handler (via Veneer)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_generate_dhkey_cmp_evt_handler (via Veneer)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_cmd_cmp_evt_list_handler (via Veneer)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_channel_map_cmd_handler (via Veneer)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_profile_task_add_cmd_handler (via Veneer)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_ral_addr_cmd_handler (via Veneer)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_pub_key_cmd_handler (via Veneer)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_dev_info_cmd_handler (via Veneer)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_gen_dh_key_cmd_handler (via Veneer)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_auto_conn_to_ind_handler (via Veneer)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_peer_att_info_ind_handler (via Veneer)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_cmp_evt_handler (via Veneer)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_unknown_task_msg_handler (via Veneer)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_addr_renew_to_ind_handler (via Veneer)
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_addr_send_dev_bdaddr_ind (via Veneer)
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_addr_fsm (via Veneer)
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init_connection_ind (via Veneer)
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_created (via Veneer)
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_send_stopped_ind (via Veneer)
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_sign_cont (via Veneer)
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_encrypt_start_handler (via Veneer)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_read_ind (via Veneer)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_mult_rsp_handler (via Veneer)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_by_type_rsp_handler (via Veneer)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_by_grp_type_rsp_handler (via Veneer)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_hdl_val_ntf_ind_handler (via Veneer)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_find_info_rsp_handler (via Veneer)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_find_by_type_rsp_handler (via Veneer)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_sec_req_pdu (via Veneer)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_req_pdu (via Veneer)
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_key_press_notification_ind (via Veneer)
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_smp_resolv_op_cont (via Veneer)
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_smp_rand_rsp (via Veneer)
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_smp_encrypt_rsp (via Veneer)
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_scan_send_hci_le_set_ext_scan_param_cmd (via Veneer)
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_scan_send_hci_le_set_ext_scan_en_cmd (via Veneer)
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_scan_send_adv_report_ind (via Veneer)
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_per_sync_stop (via Veneer)
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_per_sync_start (via Veneer)
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_per_sync_send_adv_report_ind (via Veneer)
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_list_send_list_size_ind (via Veneer)
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_list_add_next_entry (via Veneer)
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init_send_hci_le_ext_create_con_cmd (via Veneer)
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_op_setup_continue (via Veneer)
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_op_reset_continue (via Veneer)
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_cmd_cmp_evt_creating_handler (via Veneer)
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_send_hci_le_set_per_adv_en_cmd (via Veneer)
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_send_hci_le_set_per_adv_data_cmd (via Veneer)
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_send_hci_le_set_ext_scan_rsp_data_cmd (via Veneer)
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_send_hci_le_set_ext_adv_param_cmd (via Veneer)
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_send_hci_le_set_ext_adv_en_cmd (via Veneer)
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_send_hci_le_set_ext_adv_data_cmd (via Veneer)
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_send_hci_le_rmv_adv_set_cmd (via Veneer)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_conn_param_upd_req_handler (via Veneer)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_rssi_cmd_cmp_evt_handler (via Veneer)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_rem_ver_info_cmp_evt_handler (via Veneer)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_chnl_map_cmd_cmp_evt_handler (via Veneer)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_auth_payl_to_cmd_cmp_evt_handler (via Veneer)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rem_con_param_req_evt_handler (via Veneer)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_rem_feats_cmp_evt_handler (via Veneer)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_phy_cmd_cmp_evt_handler (via Veneer)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_phy_upd_cmp_evt_handler (via Veneer)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_ltk_request_evt_handler (via Veneer)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_data_len_chg_evt_handler (via Veneer)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_con_update_cmp_evt_handler (via Veneer)
</UL>

<P><STRONG><a name="[1bf]"></a>ke_msg_discard</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> gapc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[3f8]"></a>ke_msg_forward</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_default_handler (via Veneer)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_reschedule_operation (via Veneer)
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_reschedule_operation (via Veneer)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_dev_bdaddr_ind_handler (via Veneer)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_reject_handler (via Veneer)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_conn_param_upd_resp_handler (via Veneer)
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_conn_param_upd_req_handler (via Veneer)
</UL>

<P><STRONG><a name="[372]"></a>ke_msg_free</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop (via Veneer)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_send_rsp (via Veneer)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_req_ind_handler (via Veneer)
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_msg_default_handler_imp (via Veneer)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_activity_init (via Veneer)
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_init (via Veneer)
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_cleanup (via Veneer)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_handle_rx_pkt (via Veneer)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_process_pdu (via Veneer)
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_clear_read_cache (via Veneer)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cleanup (via Veneer)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_operation_cleanup (via Veneer)
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_operation_cleanup (via Veneer)
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_operation_cleanup (via Veneer)
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_data_send (via Veneer)
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_cleanup (via Veneer)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cfm_handler (via Veneer)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_cfm_handler (via Veneer)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler (via Veneer)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_att_info_cfm_handler (via Veneer)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_cmp_evt_handler (via Veneer)
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_per_sync_clear_fragments (via Veneer)
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_op_complete (via Veneer)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_read_ind (via Veneer)
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_scan_send_adv_report_ind (via Veneer)
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_per_sync_send_adv_report_ind (via Veneer)
</UL>

<P><STRONG><a name="[3ef]"></a>ke_msg_in_queue</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_operation_cleanup (via Veneer)
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_operation_cleanup (via Veneer)
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_operation_cleanup (via Veneer)
</UL>

<P><STRONG><a name="[34a]"></a>ke_msg_send</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msg_post (via Veneer)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_send_rsp (via Veneer)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_conn_param_update (via Veneer)
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_start (via Veneer)
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_send_prov_param_rsp (via Veneer)
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_send_prov_auth_data_rsp (via Veneer)
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_proxy_ctrl (via Veneer)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_init (via Veneer)
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_discovery_all_peer_svc (via Veneer)
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_disconnect_req (via Veneer)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_mtu_exchange_req (via Veneer)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_encrypt_req_ind_handler (via Veneer)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_req_ind_handler (via Veneer)
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_connection_send_cfm (via Veneer)
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sec_resolve_address (via Veneer)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_create_conn_act (via Veneer)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_set_dev_config (via Veneer)
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_exc_activity_cmp (via Veneer)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_create_per_adv_act (via Veneer)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_create_legacy_adv_act (via Veneer)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_create_aux_adv_act (via Veneer)
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_init_imp (via Veneer)
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_set_runtime (via Veneer)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_api_fault_get_req_ind_handler (via Veneer)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_api_model_opcode_req_ind_handler (via Veneer)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_api_cmp_handler (via Veneer)
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_profile_task_add (via Veneer)
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_notification_with_handle (via Veneer)
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_client_write_req_with_handle (via Veneer)
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_client_write_cmd_with_handle (via Veneer)
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_regist_peer_prf_info (via Veneer)
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_msg_default_handler_imp (via Veneer)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_execute_activity_cmd (via Veneer)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send (via Veneer)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler (via Veneer)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler (via Veneer)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_ind_handler (via Veneer)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_att_info_req_ind_handler (via Veneer)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_update_conn_param_to_ind_handler (via Veneer)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_set_dev_info_cfm_handler (via Veneer)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_update_cmd_handler (via Veneer)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_info_cmd_handler (via Veneer)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_dev_info_cfm_handler (via Veneer)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler (via Veneer)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_set_dev_info_req_ind_handler (via Veneer)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_update_req_ind_handler (via Veneer)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_dev_info_req_ind_handler (via Veneer)
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_msg_send (via Veneer)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler (via Veneer)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler (via Veneer)
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_pdu_send_cont (via Veneer)
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_disconnect (via Veneer)
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_set_mtu (via Veneer)
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_error_evt (via Veneer)
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt (via Veneer)
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_error_evt (via Veneer)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt (via Veneer)
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_error_evt (via Veneer)
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_disconect_ind (via Veneer)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt (via Veneer)
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_con_create (via Veneer)
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_sec_pub_key_read (via Veneer)
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_sec_ecdh_secret (via Veneer)
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_activity_cmd_exec (via Veneer)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_send_cmp_evt (via Veneer)
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_rx_init (via Veneer)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_header_check (via Veneer)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_data_handler (via Veneer)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler (via Veneer)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cmd_handler (via Veneer)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_svc_changed_cmd_handler (via Veneer)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_sdp_svc_disc_cmd_handler (via Veneer)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler (via Veneer)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler (via Veneer)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_att_info_req_ind_handler (via Veneer)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_signed (via Veneer)
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_update_elmt (via Veneer)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_prepare_write_req (via Veneer)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_value (via Veneer)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_execute_write_req (via Veneer)
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_use_enc_block_cmd (via Veneer)
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_req_ind (via Veneer)
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_ind (via Veneer)
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_gen_dh_key_cmd (via Veneer)
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_handle_enc_change_evt (via Veneer)
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_rand (via Veneer)
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_l (via Veneer)
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_e1 (via Veneer)
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_ci (via Veneer)
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_check_repeated_attempts (via Veneer)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_test_end_cmd_cmp_evt_handler (via Veneer)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_local_ver_info_cmd_cmp_evt_handler (via Veneer)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_scan_req_rcvd_evt_handler (via Veneer)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_max_adv_data_len_cmd_cmp_evt_handler (via Veneer)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_tx_pwr_cmd_cmp_evt_handler (via Veneer)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_suggted_dft_data_len_cmd_cmp_evt_handler (via Veneer)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_rf_path_comp_cmd_cmp_evt_handler (via Veneer)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_ral_addr_cmd_cmp_evt_handler (via Veneer)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_nb_supp_adv_sets_cmd_cmp_evt_handler (via Veneer)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_max_data_len_cmd_cmp_evt_handler (via Veneer)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_local_p256_public_key_cmp_evt_handler (via Veneer)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_adv_chnl_tx_pw_cmd_cmp_evt_handler (via Veneer)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_per_adv_sync_est_evt_handler (via Veneer)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_generate_dhkey_cmp_evt_handler (via Veneer)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_profile_task_add_cmd_handler (via Veneer)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_pub_key_cmd_handler (via Veneer)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_dev_info_cmd_handler (via Veneer)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_auto_conn_to_ind_handler (via Veneer)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_peer_att_info_ind_handler (via Veneer)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_cmp_evt_handler (via Veneer)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_unknown_task_msg_handler (via Veneer)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_addr_renew_to_ind_handler (via Veneer)
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_addr_send_dev_bdaddr_ind (via Veneer)
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_addr_fsm (via Veneer)
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init_connection_ind (via Veneer)
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_created (via Veneer)
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_send_stopped_ind (via Veneer)
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_sign_cont (via Veneer)
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_encrypt_start_handler (via Veneer)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_read_ind (via Veneer)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_rsp_handler (via Veneer)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_mult_rsp_handler (via Veneer)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_by_type_rsp_handler (via Veneer)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_by_grp_type_rsp_handler (via Veneer)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_hdl_val_ntf_ind_handler (via Veneer)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_find_info_rsp_handler (via Veneer)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_find_by_type_rsp_handler (via Veneer)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_sec_req_pdu (via Veneer)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_req_pdu (via Veneer)
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_key_press_notification_ind (via Veneer)
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_smp_resolv_op_cont (via Veneer)
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_smp_rand_rsp (via Veneer)
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_smp_encrypt_rsp (via Veneer)
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_scan_send_adv_report_ind (via Veneer)
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_per_sync_send_adv_report_ind (via Veneer)
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_list_send_list_size_ind (via Veneer)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_conn_param_upd_req_handler (via Veneer)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_rssi_cmd_cmp_evt_handler (via Veneer)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_rem_ver_info_cmp_evt_handler (via Veneer)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_chnl_map_cmd_cmp_evt_handler (via Veneer)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_auth_payl_to_cmd_cmp_evt_handler (via Veneer)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rem_con_param_req_evt_handler (via Veneer)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_rem_feats_cmp_evt_handler (via Veneer)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_phy_cmd_cmp_evt_handler (via Veneer)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_phy_upd_cmp_evt_handler (via Veneer)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_ltk_request_evt_handler (via Veneer)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_data_len_chg_evt_handler (via Veneer)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_con_update_cmp_evt_handler (via Veneer)
</UL>

<P><STRONG><a name="[48e]"></a>ke_msg_send_basic</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_timeout_handler (via Veneer)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_auth_payl_to_exp_evt_handler (via Veneer)
</UL>

<P><STRONG><a name="[3eb]"></a>ke_msg_src_id_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_process_op (via Veneer)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_reschedule_operation (via Veneer)
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_requester (via Veneer)
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op (via Veneer)
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_requester (via Veneer)
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_reschedule_operation (via Veneer)
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_requester (via Veneer)
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_process_op (via Veneer)
</UL>

<P><STRONG><a name="[847]"></a>ke_queue_extract</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL></UL>

<P><STRONG><a name="[39a]"></a>ke_state_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_process_op (via Veneer)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler (via Veneer)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_cmp_evt_handler (via Veneer)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler (via Veneer)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler (via Veneer)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_ind_handler (via Veneer)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler (via Veneer)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_att_info_req_ind_handler (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_use_enc_block_ind_handler (via Veneer)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_gen_rand_nb_ind_handler (via Veneer)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler (via Veneer)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_update_conn_param_to_ind_handler (via Veneer)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_smp_timeout_timer_ind_handler (via Veneer)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_smp_rep_attempts_timer_handler (via Veneer)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_set_dev_info_cfm_handler (via Veneer)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_update_cfm_handler (via Veneer)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_key_press_notification_cmd_handler (via Veneer)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_dev_info_cfm_handler (via Veneer)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_gen_dh_key_ind_handler (via Veneer)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_encrypt_cfm_handler (via Veneer)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_disconnect_cmd_handler (via Veneer)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_connection_cfm_handler (via Veneer)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_cfm_handler (via Veneer)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_profile_added_ind_handler (via Veneer)
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_update_state (via Veneer)
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_update_state (via Veneer)
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op (via Veneer)
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_update_state (via Veneer)
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_con_create (via Veneer)
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_cleanup (via Veneer)
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_update_state (via Veneer)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send_cmd_handler (via Veneer)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler (via Veneer)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_sdu_send_cmd_handler (via Veneer)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_dbg_pdu_send_cmd_handler (via Veneer)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_data_handler (via Veneer)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler (via Veneer)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_cmp_evt_handler (via Veneer)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler (via Veneer)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cfm_handler (via Veneer)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_timeout_handler (via Veneer)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_svc_changed_cmd_handler (via Veneer)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_cfm_handler (via Veneer)
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_process_op (via Veneer)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_event_cfm_handler (via Veneer)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_default_msg_handler (via Veneer)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_att_info_req_ind_handler (via Veneer)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_att_info_cfm_handler (via Veneer)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_sign_ind_handler (via Veneer)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_cmp_evt_handler (via Veneer)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_l2cc_pdu_recv_handler (via Veneer)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_local_ver_info_cmd_cmp_evt_handler (via Veneer)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_max_adv_data_len_cmd_cmp_evt_handler (via Veneer)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_wlst_size_cmd_cmp_evt_handler (via Veneer)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_tx_pwr_cmd_cmp_evt_handler (via Veneer)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_suggted_dft_data_len_cmd_cmp_evt_handler (via Veneer)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_rf_path_comp_cmd_cmp_evt_handler (via Veneer)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_ral_size_cmd_cmp_evt_handler (via Veneer)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_ral_addr_cmd_cmp_evt_handler (via Veneer)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_pal_size_cmd_cmp_evt_handler (via Veneer)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_nb_supp_adv_sets_cmd_cmp_evt_handler (via Veneer)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_max_data_len_cmd_cmp_evt_handler (via Veneer)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_generate_dhkey_cmp_evt_handler (via Veneer)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_gen_dhkey_stat_evt_handler (via Veneer)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_basic_cmd_cmp_evt_rl_cfg_handler (via Veneer)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enh_con_cmp_evt_handler (via Veneer)
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_smp_rand_rsp (via Veneer)
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_smp_encrypt_rsp (via Veneer)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_wr_auth_payl_to_cmd_cmp_evt_handler (via Veneer)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_vs_set_pref_slave_latency_cmd_cmp_evt_handler (via Veneer)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_rssi_cmd_cmp_evt_handler (via Veneer)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_rem_ver_info_cmp_evt_handler (via Veneer)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_chnl_map_cmd_cmp_evt_handler (via Veneer)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_auth_payl_to_cmd_cmp_evt_handler (via Veneer)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_start_enc_stat_evt_handler (via Veneer)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_data_len_cmd_cmp_evt_handler (via Veneer)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rem_con_param_req_evt_handler (via Veneer)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_rem_feats_cmp_evt_handler (via Veneer)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_phy_cmd_cmp_evt_handler (via Veneer)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_phy_upd_cmp_evt_handler (via Veneer)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_data_len_chg_evt_handler (via Veneer)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_con_update_cmp_evt_handler (via Veneer)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disc_cmp_evt_handler (via Veneer)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_stat_event_handler (via Veneer)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_auth_payl_to_exp_evt_handler (via Veneer)
</UL>

<P><STRONG><a name="[311]"></a>ke_state_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_init (via Veneer)
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_connection_send_cfm (via Veneer)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_act_created_ind_func (via Veneer)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_add_svc (via Veneer)
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_init_imp (via Veneer)
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_profile_task_add (via Veneer)
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_servcie_added (via Veneer)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_disconnect_cmd_handler (via Veneer)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler (via Veneer)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_disconnect_ind_handler (via Veneer)
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_init (via Veneer)
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_update_state (via Veneer)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_create (via Veneer)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cleanup (via Veneer)
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_update_state (via Veneer)
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init (via Veneer)
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_update_state (via Veneer)
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_con_create (via Veneer)
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_cleanup (via Veneer)
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_create (via Veneer)
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_cleanup (via Veneer)
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_update_state (via Veneer)
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_op_reset_continue (via Veneer)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_stat_event_handler (via Veneer)
</UL>

<P><STRONG><a name="[82f]"></a>ke_task_check</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL></UL>

<P><STRONG><a name="[351]"></a>ke_task_create</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_create_x (via Veneer)
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_init_imp (via Veneer)
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_init (via Veneer)
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_init (via Veneer)
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_init (via Veneer)
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init (via Veneer)
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_init (via Veneer)
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_init (via Veneer)
</UL>

<P><STRONG><a name="[714]"></a>ke_task_msg_flush</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_init (via Veneer)
</UL>

<P><STRONG><a name="[51c]"></a>ke_time</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_timer_init (via Veneer)
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_timer_update_clock (via Veneer)
</UL>

<P><STRONG><a name="[3ed]"></a>ke_timer_active</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop (via Veneer)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_key_press_notification_cmd_handler (via Veneer)
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_addr_set_rand_addr (via Veneer)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_keypress_notification_pdu (via Veneer)
</UL>

<P><STRONG><a name="[368]"></a>ke_timer_clear</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop (via Veneer)
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_cleanup (via Veneer)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_handle_rx_pkt (via Veneer)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cleanup (via Veneer)
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_addr_init (via Veneer)
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_clear_timeout_timer (via Veneer)
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_cleanup (via Veneer)
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_timer_clear (via Veneer)
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_cleanup (via Veneer)
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_l2cc_pdu_recv_handler (via Veneer)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_l2cc_pdu_recv_handler (via Veneer)
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_launch_rep_att_timer (via Veneer)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_cmd_cmp_evt_init_handler (via Veneer)
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init_connection_ind (via Veneer)
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send (via Veneer)
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init_stop (via Veneer)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_conn_param_upd_resp_handler (via Veneer)
</UL>

<P><STRONG><a name="[36e]"></a>ke_timer_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start (via Veneer)
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_timer_handle (via Veneer)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_update_cmd_handler (via Veneer)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_key_press_notification_cmd_handler (via Veneer)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_handle_rx_pkt (via Veneer)
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_timer_set (via Veneer)
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_att_req (via Veneer)
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_send_event (via Veneer)
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_launch_rep_att_timer (via Veneer)
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_addr_renew_next_addr (via Veneer)
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_addr_set_rand_addr (via Veneer)
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send (via Veneer)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_keypress_notification_pdu (via Veneer)
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init_start (via Veneer)
</UL>

<P><STRONG><a name="[33]"></a>llc_con_move_cbk</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> patch_rf.o(i.llc_patch_1)
</UL>
<P><STRONG><a name="[4da]"></a>llc_start</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_patch_1 (via Veneer)
</UL>

<P><STRONG><a name="[862]"></a>lld_con_event_counter_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL></UL>

<P><STRONG><a name="[7c7]"></a>lld_read_clock</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_lld_receive (via Veneer)
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_lld_send (via Veneer)
</UL>

<P><STRONG><a name="[4db]"></a>lld_res_list_peer_update</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_patch_1 (via Veneer)
</UL>

<P><STRONG><a name="[7ca]"></a>lld_rxdesc_check</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_lld_rx_isr (via Veneer)
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_lld_cancel (via Veneer)
</UL>

<P><STRONG><a name="[4dd]"></a>lld_white_list_rem</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_patch_1 (via Veneer)
</UL>

<P><STRONG><a name="[7cf]"></a>llm_activity_free_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_lld_init (via Veneer)
</UL>

<P><STRONG><a name="[7cc]"></a>llm_activity_free_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_lld_evt_end_isr (via Veneer)
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_lld_cancel (via Veneer)
</UL>

<P><STRONG><a name="[4d9]"></a>llm_cmd_cmp_send</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_patch_1 (via Veneer)
</UL>

<P><STRONG><a name="[4dc]"></a>llm_dev_list_search</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_patch_1 (via Veneer)
</UL>

<P><STRONG><a name="[4bc]"></a>llm_init_act_info_buf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_static_memory (via Veneer)
</UL>

<P><STRONG><a name="[4d8]"></a>llm_is_dev_connected</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_patch_1 (via Veneer)
</UL>

<P><STRONG><a name="[4df]"></a>llm_le_evt_mask_check</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_patch_1 (via Veneer)
</UL>

<P><STRONG><a name="[79a]"></a>low_power_restore</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep_patch (via Veneer)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop (via Veneer)
</UL>

<P><STRONG><a name="[799]"></a>low_power_save</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep_patch (via Veneer)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop (via Veneer)
</UL>

<P><STRONG><a name="[455]"></a>platform_reset</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_reset_cmd_handler (via Veneer)
</UL>

<P><STRONG><a name="[325]"></a>pmu_calibration_start</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_power_restore_entry_imp (via Veneer)
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_lp_clock (via Veneer)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main (via Veneer)
</UL>

<P><STRONG><a name="[78f]"></a>pmu_calibration_stop</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_power_save_entry_imp (via Veneer)
</UL>

<P><STRONG><a name="[77f]"></a>pmu_disable_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otd_isr_ram (via Veneer)
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvd_isr_ram (via Veneer)
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charge_isr_ram (via Veneer)
</UL>

<P><STRONG><a name="[784]"></a>pmu_disable_isr2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onkey_isr_ram (via Veneer)
</UL>

<P><STRONG><a name="[70f]"></a>pmu_enable_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charge_isr_ram (via Veneer)
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_enable_irq (via Veneer)
</UL>

<P><STRONG><a name="[710]"></a>pmu_enable_isr2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onkey_isr_ram (via Veneer)
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_enable_irq (via Veneer)
</UL>

<P><STRONG><a name="[713]"></a>pmu_first_power_on</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_sub_init (via Veneer)
</UL>

<P><STRONG><a name="[786]"></a>pmu_get_isr_state</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_isr_ram_C (via Veneer)
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_power_restore_entry_imp (via Veneer)
</UL>

<P><STRONG><a name="[759]"></a>pmu_get_rc_clk</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_init (via Veneer)
</UL>

<P><STRONG><a name="[320]"></a>qspi_flash_enable_quad</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main (via Veneer)
</UL>

<P><STRONG><a name="[31f]"></a>qspi_flash_init_controller</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main (via Veneer)
</UL>

<P><STRONG><a name="[7c2]"></a>qspi_stig_cmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_protect_enable (via Veneer)
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_protect_disable (via Veneer)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase (via Veneer)
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_id (via Veneer)
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_OTP_erase (via Veneer)
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_OTP_read (via Veneer)
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_OTP_write (via Veneer)
</UL>

<P><STRONG><a name="[79f]"></a>rf_em_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init_app (via Veneer)
</UL>

<P><STRONG><a name="[79e]"></a>rf_init_api</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init_app (via Veneer)
</UL>

<P><STRONG><a name="[7a0]"></a>rf_init_controller</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init_app (via Veneer)
</UL>

<P><STRONG><a name="[7b8]"></a>rwble_sleep_enter</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep_patch (via Veneer)
</UL>

<P><STRONG><a name="[7ae]"></a>rwip_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_isr_patch (via Veneer)
</UL>

<P><STRONG><a name="[794]"></a>rwip_prevent_sleep_clear</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_isr_patch (via Veneer)
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_lp_clock (via Veneer)
</UL>

<P><STRONG><a name="[752]"></a>rwip_prevent_sleep_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_sleep_disable (via Veneer)
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_lp_clock_reset (via Veneer)
</UL>

<P><STRONG><a name="[797]"></a>rwip_schedule</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop (via Veneer)
</UL>

<P><STRONG><a name="[798]"></a>rwip_sleep</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop (via Veneer)
</UL>

<P><STRONG><a name="[792]"></a>rwip_sleep_div_64</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_smooth_calc_calib_result (via Veneer)
</UL>

<P><STRONG><a name="[7b7]"></a>rwip_sleep_time_calc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep_patch (via Veneer)
</UL>

<P><STRONG><a name="[7a6]"></a>rwip_sw_int_req</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_arb_event_start_isr_patch (via Veneer)
</UL>

<P><STRONG><a name="[7a4]"></a>rwip_time_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep_patch (via Veneer)
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_arb_event_start_direct (via Veneer)
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_arb_event_start_isr_patch (via Veneer)
</UL>

<P><STRONG><a name="[7aa]"></a>sch_arb_sw_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_isr_patch (via Veneer)
</UL>

<P><STRONG><a name="[7b5]"></a>sch_prog_end_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_isr_patch (via Veneer)
</UL>

<P><STRONG><a name="[7b3]"></a>sch_prog_skip_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_isr_patch (via Veneer)
</UL>

<P><STRONG><a name="[8a9]"></a>ssp_put_byte</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL></UL>

<P><STRONG><a name="[717]"></a>system_get_pclk</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init (via Veneer)
</UL>

<P><STRONG><a name="[753]"></a>system_get_pclk_config</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init (via Veneer)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_delay_10us (via Veneer)
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_delay_100us (via Veneer)
</UL>

<P><STRONG><a name="[7a1]"></a>system_set_pclk</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_handshake (via Veneer)
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init_app (via Veneer)
</UL>

<P><STRONG><a name="[2d9]"></a>system_set_port_mux</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_Init (via Veneer)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Init (via Veneer)
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_handshake (via Veneer)
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_entry_after_sleep_imp (via Veneer)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main (via Veneer)
</UL>

<P><STRONG><a name="[77a]"></a>system_set_port_pull</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_handshake (via Veneer)
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_entry_after_sleep_imp (via Veneer)
</UL>

<P><STRONG><a name="[807]"></a>trng_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL></UL>

<P><STRONG><a name="[7bf]"></a>uart_get_data_nodelay_noint</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_app_boot_host_comm (via Veneer)
</UL>

<P><STRONG><a name="[2e0]"></a>uart_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Init (via Veneer)
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_handshake (via Veneer)
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_entry_after_sleep_imp (via Veneer)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main (via Veneer)
</UL>

<P><STRONG><a name="[778]"></a>uart_putc_noint_no_wait</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_entry_after_sleep_imp (via Veneer)
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_entry_before_sleep_imp (via Veneer)
</UL>

<P><STRONG><a name="[7be]"></a>uart_write</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_app_boot_host_comm (via Veneer)
</UL>

<P><STRONG><a name="[815]"></a>vTaskStepTick</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, syscall.txt(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL></UL>

<P><STRONG><a name="[8aa]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[28f]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[27b]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[27d]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[27f]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[281]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[283]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[8ab]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[285]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_cal (via Veneer)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolProcess
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SyncFwVersion
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_StartOTA
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_Reset
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_ImageUpdate
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_GetFwInfo
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_Confirm
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTA_Image_Update
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_SendData
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Google_Start_Advertising
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolProcess
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_UnProvision
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_Provision
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_OnOff
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_Blink
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_AdjustTemperature
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_AdjustRGB
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_AdjustBrightness
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Default_Init
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Platfrom_Set_Mesh_Default_Light_Status
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Timer_Handler
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Process
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TC_OTA_Task
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Google_TimeProc
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YK_APP_Init
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set_message_validate
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_level_server_msg_handler
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_move_set
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_get
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_delta_set
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_ponoff_server_msg_handler
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_dtt_server_msg_handler
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Set_Target
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_onoff_server_msg_handler
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_tid_validate
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set_message_validate
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MESH_Status_Send
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MESH_Provision_Complete
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;firmware_update_server_msg_handler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_fw_update_start
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_fw_update_meta_check
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_fw_update_info_get
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_fw_update_get
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_fw_update_cancel
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_fw_update_apply
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;firmware_update_start
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;firmware_update_info_get
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;firmware_update_get
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;firmware_update_fw_meta_check
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;firmware_update_cancel
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;firmware_update_apply
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blob_transfer_server_msg_handler
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_transfer_cancel
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_chunk_transfer
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_blob_transfer_start
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_blob_transfer_get
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_blob_info_get
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_blob_block_start
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_blob_block_get
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blob_transfer_start
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blob_transfer_cancel
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blob_chunk_transfer
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blob_block_start
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blob_block_get
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chunck_error_condition_check
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blob_transfer_server_phase_transitions
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blob_transfer_all_condiation_is_met
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_hsl_server_msg_handler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_target_get
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_range_set
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_range_get
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_default_set
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_default_get
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_hsl_saturation_server_msg_handler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_hsl_hue_server_msg_handler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctl_server_msg_handler
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set_message_validate
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lightness_server_msg_handler
</UL>

<P><STRONG><a name="[288]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[289]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[287]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[27c]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[280]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
</UL>

<P><STRONG><a name="[28c]"></a>_printf_longlong_hex</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, _printf_hex_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[27e]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[282]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[28d]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[28b]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[28a]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[290]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[291]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[292]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[284]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[286]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[293]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[294]"></a>APP_BLE_Init</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, app_ble.o(i.APP_BLE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = APP_BLE_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_address_get
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_security_param_init
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_bond_manager_init
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Google_Gatt_Add_Service
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_OTA_gatt_add_service
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Platfrom_Init
</UL>

<P><STRONG><a name="[29a]"></a>APP_Google_Init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, app_google.o(i.APP_Google_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = APP_Google_Init &rArr; os_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Light_GetTemperature
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Light_GetOnoff
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Light_GetLevel
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_init
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Platfrom_Init
</UL>

<P><STRONG><a name="[2a0]"></a>APP_Google_Start_Advertising</STRONG> (Thumb, 232 bytes, Stack size 128 bytes, app_google.o(i.APP_Google_Start_Advertising))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = APP_Google_Start_Advertising &rArr; APP_Platfrom_Set_Provision_Status &rArr; APP_MEM_Fast_Save &rArr; MEM_Write &rArr; flash_write &rArr; flash_protect_enable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_start_advertising
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_advertising_rsp_data
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_advertising_param
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_advertising_data
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_address_get
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Platfrom_Set_Provision_Status
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Platfrom_Get_Provision_Status
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proj_ble_gap_evt_func
</UL>

<P><STRONG><a name="[262]"></a>APP_Google_Task</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, app_google.o(i.APP_Google_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = APP_Google_Task &rArr; ProtocolProcess &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_notification
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolProcess
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_reset_patch (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> yk_app.o(.data)
</UL>
<P><STRONG><a name="[2aa]"></a>APP_Google_TimeProc</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, app_google.o(i.APP_Google_TimeProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = APP_Google_TimeProc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Light_SetOnOff
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YK_APP_TimeProc
</UL>

<P><STRONG><a name="[29d]"></a>APP_Light_GetLevel</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_light.o(i.APP_Light_GetLevel))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_OnOff
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_AdjustTemperature
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_AdjustRGB
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Google_Init
</UL>

<P><STRONG><a name="[29c]"></a>APP_Light_GetOnoff</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_light.o(i.APP_Light_GetOnoff))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Google_Init
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_apply_reset_cb
</UL>

<P><STRONG><a name="[29e]"></a>APP_Light_GetTemperature</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_light.o(i.APP_Light_GetTemperature))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Google_Init
</UL>

<P><STRONG><a name="[2ac]"></a>APP_Light_Init</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, app_light.o(i.APP_Light_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = APP_Light_Init &rArr; HSL_2_RGB &rArr; Hue_2_RGB &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_run (via Veneer)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_start_transition
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSL_2_RGB
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YK_APP_Init
</UL>

<P><STRONG><a name="[2b1]"></a>APP_Light_SetHSL</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, app_light.o(i.APP_Light_SetHSL))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = APP_Light_SetHSL &rArr; HSL_2_RGB &rArr; Hue_2_RGB &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_start_transition
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSL_2_RGB
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
</UL>

<P><STRONG><a name="[2b2]"></a>APP_Light_SetLevel</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_light.o(i.APP_Light_SetLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = APP_Light_SetLevel &rArr; light_start_transition &rArr; __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_start_transition
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_AdjustBrightness
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_delta_set
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
</UL>

<P><STRONG><a name="[2ab]"></a>APP_Light_SetOnOff</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_light.o(i.APP_Light_SetOnOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = APP_Light_SetOnOff &rArr; light_start_transition &rArr; __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_start_transition
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_OnOff
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_Blink
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Google_TimeProc
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
</UL>

<P><STRONG><a name="[2b3]"></a>APP_Light_SetRGB</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, app_light.o(i.APP_Light_SetRGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = APP_Light_SetRGB &rArr; light_start_transition &rArr; __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_start_transition
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_AdjustRGB
</UL>

<P><STRONG><a name="[2b4]"></a>APP_Light_SetTemperature</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, app_light.o(i.APP_Light_SetTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = APP_Light_SetTemperature &rArr; light_start_transition &rArr; __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_start_transition
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_AdjustTemperature
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_temperature_set
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
</UL>

<P><STRONG><a name="[2b5]"></a>APP_MEM_Factory_Reset</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, app_mem.o(i.APP_MEM_Factory_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = APP_MEM_Factory_Reset &rArr; MEM_Write &rArr; flash_write &rArr; flash_protect_enable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_Write
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_Erase
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MEM_VALUE_PRINTF
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_UnProvision
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_Provision
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Process
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_callback_func
</UL>

<P><STRONG><a name="[2ba]"></a>APP_MEM_Fast_Save</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_mem.o(i.APP_MEM_Fast_Save))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = APP_MEM_Fast_Save &rArr; MEM_Write &rArr; flash_write &rArr; flash_protect_enable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_Write
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MEM_VALUE_PRINTF
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Default_Init
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Platfrom_Set_Provision_Status
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Platfrom_Set_Mesh_Default_Light_Status
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Timer_Handler
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Process
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Platfrom_Init
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_apply_reset_cb
</UL>

<P><STRONG><a name="[2bb]"></a>APP_MEM_Init</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, app_mem.o(i.APP_MEM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = APP_MEM_Init &rArr; MEM_Write &rArr; flash_write &rArr; flash_protect_enable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_init
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_Write
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_Read
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_Erase
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MEM_VALUE_PRINTF
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YK_APP_Init
</UL>

<P><STRONG><a name="[2bd]"></a>APP_MEM_Slow_Save</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_mem.o(i.APP_MEM_Slow_Save))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = APP_MEM_Slow_Save &rArr; os_timer_start &rArr; os_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Save
</UL>

<P><STRONG><a name="[261]"></a>APP_MEM_Task</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, app_mem.o(i.APP_MEM_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = APP_MEM_Task &rArr; MEM_Write &rArr; flash_write &rArr; flash_protect_enable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_Write
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MEM_VALUE_PRINTF
</UL>
<BR>[Address Reference Count : 1]<UL><LI> yk_app.o(.data)
</UL>
<P><STRONG><a name="[2c0]"></a>APP_MESH_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app_mesh.o(i.APP_MESH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = APP_MESH_Init &rArr; pb_remote_central_init &rArr; gatt_add_client &rArr; gatt_add_client_uuid &rArr; gatt_write_peer_svc_to_flash &rArr; flash_write &rArr; flash_protect_enable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Default_Init
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_remote_central_init
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;firmware_update_server_init
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blob_transfer_server_init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_led_init
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_OTA_gatt_add_service
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Platfrom_Init
</UL>

<P><STRONG><a name="[2c6]"></a>APP_MESH_Provision_Complete</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, app_mesh.o(i.APP_MESH_Provision_Complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = APP_MESH_Provision_Complete &rArr; APP_Platfrom_Set_Mesh_Default_Light_Status &rArr; Light_Status_Default_Init &rArr; APP_MEM_Fast_Save &rArr; MEM_Write &rArr; flash_write &rArr; flash_protect_enable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Platfrom_Set_Mesh_Default_Light_Status
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_callback_func
</UL>

<P><STRONG><a name="[2c8]"></a>APP_MESH_Status_Send</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, app_mesh.o(i.APP_MESH_Status_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_send_rsp
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_range_send
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_linear_send
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_default_send
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_actual_send
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_last_get
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_range_send
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_default_send
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_target_get
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_temperature_send
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_temperature_range_send
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_default_send
</UL>

<P><STRONG><a name="[2a4]"></a>APP_Platfrom_Get_Provision_Status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_platfrom.o(i.APP_Platfrom_Get_Provision_Status))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Google_Start_Advertising
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolProcess
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Google_gatt_msg_handler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proj_ble_gap_evt_func
</UL>

<P><STRONG><a name="[2cc]"></a>APP_Platfrom_Init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, app_platfrom.o(i.APP_Platfrom_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = APP_Platfrom_Init &rArr; APP_MESH_Init &rArr; pb_remote_central_init &rArr; gatt_add_client &rArr; gatt_add_client_uuid &rArr; gatt_write_peer_svc_to_flash &rArr; flash_write &rArr; flash_protect_enable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MESH_Init
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Google_Init
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Process
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_init
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MEM_Fast_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YK_APP_Init
</UL>

<P><STRONG><a name="[2c7]"></a>APP_Platfrom_Set_Mesh_Default_Light_Status</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, app_platfrom.o(i.APP_Platfrom_Set_Mesh_Default_Light_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = APP_Platfrom_Set_Mesh_Default_Light_Status &rArr; Light_Status_Default_Init &rArr; APP_MEM_Fast_Save &rArr; MEM_Write &rArr; flash_write &rArr; flash_protect_enable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Default_Init
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MEM_Fast_Save
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MESH_Provision_Complete
</UL>

<P><STRONG><a name="[2a3]"></a>APP_Platfrom_Set_Provision_Status</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_platfrom.o(i.APP_Platfrom_Set_Provision_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = APP_Platfrom_Set_Provision_Status &rArr; APP_MEM_Fast_Save &rArr; MEM_Write &rArr; flash_write &rArr; flash_protect_enable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MEM_Fast_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Google_Start_Advertising
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_Provision
</UL>

<P><STRONG><a name="[2ce]"></a>APP_TC_OTA_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app_tc_ota.o(i.APP_TC_OTA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = APP_TC_OTA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YK_APP_Init
</UL>

<P><STRONG><a name="[263]"></a>APP_TC_OTA_Task</STRONG> (Thumb, 54 bytes, Stack size 72 bytes, app_tc_ota.o(i.APP_TC_OTA_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = APP_TC_OTA_Task &rArr; ProtocolProcess &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolProcess
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_SendData
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> yk_app.o(.data)
</UL>
<P><STRONG><a name="[2d1]"></a>BSP_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp.o(i.BSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BSP_Init &rArr; BSP_TIMER_Init &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Init
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIMER_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_entry_before_ble_init
</UL>

<P><STRONG><a name="[2d4]"></a>BSP_LED_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsp_led.o(i.BSP_LED_Init), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_Init
</UL>

<P><STRONG><a name="[2d6]"></a>BSP_LED_SetRGBLevel</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bsp_led.o(i.BSP_LED_SetRGBLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BSP_LED_SetRGBLevel &rArr; BSP_PWM_Set_CmpData &rArr; pwm_set_high_cnt
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_Set_CmpData
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_light_timer_cb
</UL>

<P><STRONG><a name="[2d8]"></a>BSP_LED_SetWYLevel</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bsp_led.o(i.BSP_LED_SetWYLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BSP_LED_SetWYLevel &rArr; BSP_PWM_Set_CmpData &rArr; pwm_set_high_cnt
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_Set_CmpData
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_light_timer_cb
</UL>

<P><STRONG><a name="[2d5]"></a>BSP_PWM_Init</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, bsp_pwm.o(i.BSP_PWM_Init), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_start
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_port_mux (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
</UL>

<P><STRONG><a name="[2d7]"></a>BSP_PWM_Set_CmpData</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, bsp_pwm.o(i.BSP_PWM_Set_CmpData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_PWM_Set_CmpData &rArr; pwm_set_high_cnt
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set_high_cnt
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_SetWYLevel
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_SetRGBLevel
</UL>

<P><STRONG><a name="[2d3]"></a>BSP_TIMER_Init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, bsp_timer.o(i.BSP_TIMER_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BSP_TIMER_Init &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority (via Veneer)
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[2d2]"></a>BSP_UART_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_uart.o(i.BSP_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_UART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init (via Veneer)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_port_mux (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[298]"></a>Google_Gatt_Add_Service</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, google_service.o(i.Google_Gatt_Add_Service))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Google_Gatt_Add_Service &rArr; gatt_add_service &rArr; gatt_profile_task_add
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_add_service
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[2f1]"></a>Light_Status_Constrain_Value</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, light_status.o(i.Light_Status_Constrain_Value))
<BR><BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Default_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_default_set
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Set_Target
</UL>

<P><STRONG><a name="[2c1]"></a>Light_Status_Default_Init</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, light_status.o(i.Light_Status_Default_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = Light_Status_Default_Init &rArr; APP_MEM_Fast_Save &rArr; MEM_Write &rArr; flash_write &rArr; flash_protect_enable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MEM_Fast_Save
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Constrain_Value
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MESH_Init
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Platfrom_Set_Mesh_Default_Light_Status
</UL>

<P><STRONG><a name="[2f2]"></a>Light_Status_Get_Current</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, light_status.o(i.Light_Status_Get_Current))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Light_Status_Get_Current &rArr; Temp_to_Level &rArr; __aeabi_f2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_to_Level
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_linear_get
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_get
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_get
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_delta_set
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_get
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_get
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_get
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_get
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_temperature_set
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_temperature_get
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_get
</UL>

<P><STRONG><a name="[2f4]"></a>Light_Status_Get_Target</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, light_status.o(i.Light_Status_Get_Target))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Light_Status_Get_Target &rArr; Temp_to_Level &rArr; __aeabi_f2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_to_Level
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_linear_get
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_get
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_get
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_delta_set
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_get
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_target_get
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_get
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_get
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_get
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_temperature_set
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_temperature_get
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_get
</UL>

<P><STRONG><a name="[2f5]"></a>Light_Status_Save</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, light_status.o(i.Light_Status_Save))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Light_Status_Save &rArr; APP_MEM_Slow_Save &rArr; os_timer_start &rArr; os_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MEM_Slow_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_range_set
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_default_set
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_move_set
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Set_Target
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_range_set
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_default_set
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_temperature_range_set
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_default_set
</UL>

<P><STRONG><a name="[2f6]"></a>Light_Status_Set_Target</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, light_status.o(i.Light_Status_Set_Target))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Light_Status_Set_Target &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Save
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Constrain_Value
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_delta_set
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_temperature_set
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
</UL>

<P><STRONG><a name="[30d]"></a>Mesh_Tid_TimeProc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, model_common.o(i.Mesh_Tid_TimeProc))
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YK_APP_TimeProc
</UL>

<P><STRONG><a name="[299]"></a>TC_OTA_gatt_add_service</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tc_ota_service.o(i.TC_OTA_gatt_add_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TC_OTA_gatt_add_service &rArr; gatt_add_service &rArr; gatt_profile_task_add
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_add_service
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MESH_Init
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[309]"></a>YK_APP_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, yk_app.o(i.YK_APP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = YK_APP_Init &rArr; APP_Platfrom_Init &rArr; APP_MESH_Init &rArr; pb_remote_central_init &rArr; gatt_add_client &rArr; gatt_add_client_uuid &rArr; gatt_write_peer_svc_to_flash &rArr; flash_write &rArr; flash_protect_enable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_create
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TC_OTA_Init
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Platfrom_Init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MEM_Init
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Light_Init
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_entry_after_ble_init
</UL>

<P><STRONG><a name="[2e3]"></a>YK_APP_Set_Evt</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, yk_app.o(i.YK_APP_Set_Evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = YK_APP_Set_Evt &rArr; os_msg_post
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msg_post
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reboot_Timer_Handler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Timer_Handler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Google_gatt_msg_handler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_OTA_gatt_msg_handler
</UL>

<P><STRONG><a name="[30c]"></a>YK_APP_TimeProc</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, yk_app.o(i.YK_APP_TimeProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = YK_APP_TimeProc &rArr; APP_Google_TimeProc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mesh_Tid_TimeProc
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Google_TimeProc
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_isr_ram (via Veneer)
</UL>

<P><STRONG><a name="[28e]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[30f]"></a>app_act_created_ind_func</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, app_proj_event.o(i.app_act_created_ind_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = app_act_created_ind_func &rArr; app_db_init_complete_ind_func &rArr; user_entry_after_ble_init &rArr; YK_APP_Init &rArr; APP_Platfrom_Init &rArr; APP_MESH_Init &rArr; pb_remote_central_init &rArr; gatt_add_client &rArr; gatt_add_client_uuid &rArr; gatt_write_peer_svc_to_flash &rArr; flash_write &rArr; flash_protect_enable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_add_svc
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_db_init_complete_ind_func
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_conn_recv_gapm_cmp
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_adv_recv_gapm_cmp
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_scan_recv_gapm_cmp
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_period_sync_recv_gapm_cmp
</UL>

<P><STRONG><a name="[33e]"></a>app_act_deleted_ind_func</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app_proj_event.o(i.app_act_deleted_ind_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_act_deleted_ind_func
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_conn_recv_gapm_cmp
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_adv_recv_gapm_cmp
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_scan_recv_gapm_cmp
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_period_sync_recv_gapm_cmp
</UL>

<P><STRONG><a name="[41f]"></a>app_addr_resolve_result_ind_func</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, app_proj_event.o(i.app_addr_resolve_result_ind_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_addr_resolve_result_ind_func
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_addr_solved_ind_handler
</UL>

<P><STRONG><a name="[340]"></a>app_adv_complete_ind_func</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, app_proj_event.o(i.app_adv_complete_ind_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_adv_complete_ind_func
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_adv_recv_gapm_cmp
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_activity_stopped_ind_handler
</UL>

<P><STRONG><a name="[43c]"></a>app_adv_report_ind_func</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, app_proj_event.o(i.app_adv_report_ind_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_adv_report_ind_func
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_ext_adv_report_ind_handler
</UL>

<P><STRONG><a name="[345]"></a>app_conn_complete_ind_func</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, app_proj_event.o(i.app_conn_complete_ind_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_conn_complete_ind_func
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_conn_recv_gapm_cmp
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_activity_stopped_ind_handler
</UL>

<P><STRONG><a name="[3d7]"></a>app_connection_master_encrypt_compeleted_ind_func</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, app_proj_event.o(i.app_connection_master_encrypt_compeleted_ind_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_connection_master_encrypt_compeleted_ind_func
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_cmp_evt_handler
</UL>

<P><STRONG><a name="[3cf]"></a>app_connection_master_encrypted_ind_func</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, app_proj_event.o(i.app_connection_master_encrypted_ind_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_connection_master_encrypted_ind_func
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_encrypt_ind_handler
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_ind_handler
</UL>

<P><STRONG><a name="[3ce]"></a>app_connection_paring_info_ind_func</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, app_proj_event.o(i.app_connection_paring_info_ind_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_connection_paring_info_ind_func
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_req_ind_handler
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_ind_handler
</UL>

<P><STRONG><a name="[313]"></a>app_connection_req_ind_func</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, app_proj_event.o(i.app_connection_req_ind_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_connection_req_ind_func
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bond_check
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bond_addr_resolve_cb
</UL>

<P><STRONG><a name="[3d0]"></a>app_connection_slave_encrypted_ind_func</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, app_proj_event.o(i.app_connection_slave_encrypted_ind_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_connection_slave_encrypted_ind_func
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_encrypt_ind_handler
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_ind_handler
</UL>

<P><STRONG><a name="[314]"></a>app_connection_success_ind_func</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, app_proj_event.o(i.app_connection_success_ind_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_connection_success_ind_func
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bond_check
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bond_addr_resolve_cb
</UL>

<P><STRONG><a name="[312]"></a>app_db_init_complete_ind_func</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_proj_event.o(i.app_db_init_complete_ind_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = app_db_init_complete_ind_func &rArr; user_entry_after_ble_init &rArr; YK_APP_Init &rArr; APP_Platfrom_Init &rArr; APP_MESH_Init &rArr; pb_remote_central_init &rArr; gatt_add_client &rArr; gatt_add_client_uuid &rArr; gatt_write_peer_svc_to_flash &rArr; flash_write &rArr; flash_protect_enable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_entry_after_ble_init
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_act_created_ind_func
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
</UL>

<P><STRONG><a name="[3e2]"></a>app_disconnect_ind_func</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, app_proj_event.o(i.app_disconnect_ind_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_disconnect_ind_func
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_disconnect_ind_handler
</UL>

<P><STRONG><a name="[3f4]"></a>app_get_info_ind_func</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, app_proj_event.o(i.app_get_info_ind_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_get_info_ind_func
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_peer_features_ind_handler
</UL>

<P><STRONG><a name="[317]"></a>app_light_timer_cb</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, app_light.o(i.app_light_timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = app_light_timer_cb &rArr; BSP_LED_SetWYLevel &rArr; BSP_PWM_Set_CmpData &rArr; pwm_set_high_cnt
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_SetWYLevel
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_SetRGBLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_isr_ram (via Veneer)
</UL>

<P><STRONG><a name="[27a]"></a>app_main</STRONG> (Thumb, 776 bytes, Stack size 24 bytes, entry.o(i.app_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = app_main &rArr; user_entry_before_ble_init &rArr; BSP_Init &rArr; BSP_TIMER_Init &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init (via Veneer)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_port_mux (via Veneer)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority (via Veneer)
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ (via Veneer)
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_cache (via Veneer)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_sub_init
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_delay_10us (via Veneer)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frspim_wr (via Veneer)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frspim_rd (via Veneer)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_init_static_memory
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_entry_before_ble_init
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_custom_parameters
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_calibration_start (via Veneer)
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_set_entry (via Veneer)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_init (via Veneer)
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_init_controller (via Veneer)
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_flash_enable_quad (via Veneer)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intc_init (via Veneer)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_boot_get_storage_type (via Veneer)
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand (via Veneer)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_entry4 (via Veneer)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_init_
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_optimize_power_consumption_get (via Veneer)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop (via Veneer)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_smooth_calc_calib_result (via Veneer)
</UL>

<P><STRONG><a name="[2c2]"></a>app_mesh_led_init</STRONG> (Thumb, 166 bytes, Stack size 64 bytes, sig_mesh_led.o(i.app_mesh_led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = app_mesh_led_init &rArr; mesh_init &rArr; gatt_profile_task_add
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_address_get
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_init
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_set_scan_rsp_data
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_set_scan_parameter
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_set_cb_func
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_set_adv_parameter
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_init
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_add_model
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_store_info_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MESH_Init
</UL>

<P><STRONG><a name="[336]"></a>app_mesh_store_info_timer_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sig_mesh_info.o(i.app_mesh_store_info_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_mesh_store_info_timer_init &rArr; os_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_led_init
</UL>

<P><STRONG><a name="[338]"></a>app_mesh_store_info_timer_start</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sig_mesh_info.o(i.app_mesh_store_info_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_mesh_store_info_timer_start &rArr; os_timer_start &rArr; os_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_callback_func
</UL>

<P><STRONG><a name="[303]"></a>app_otas_get_storage_address</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bsp_iap.o(i.app_otas_get_storage_address))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_StartOTA
</UL>

<P><STRONG><a name="[358]"></a>app_per_sync_completed_ind_func</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, app_proj_event.o(i.app_per_sync_completed_ind_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_per_sync_completed_ind_func
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_period_sync_recv_gapm_cmp
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_activity_stopped_ind_handler
</UL>

<P><STRONG><a name="[466]"></a>app_per_sync_established_ind_func</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, app_proj_event.o(i.app_per_sync_established_ind_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_per_sync_established_ind_func
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_sync_established_ind_handler
</UL>

<P><STRONG><a name="[339]"></a>app_reset_complete_ind_func</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app_proj_event.o(i.app_reset_complete_ind_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = app_reset_complete_ind_func &rArr; user_entry_after_ble_init &rArr; YK_APP_Init &rArr; APP_Platfrom_Init &rArr; APP_MESH_Init &rArr; pb_remote_central_init &rArr; gatt_add_client &rArr; gatt_add_client_uuid &rArr; gatt_write_peer_svc_to_flash &rArr; flash_write &rArr; flash_protect_enable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_entry_after_ble_init
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand (via Veneer)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gap_set_dev_config
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
</UL>

<P><STRONG><a name="[359]"></a>app_scanning_completed_ind_func</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, app_proj_event.o(i.app_scanning_completed_ind_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_scanning_completed_ind_func
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_scan_recv_gapm_cmp
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_activity_stopped_ind_handler
</UL>

<P><STRONG><a name="[33b]"></a>app_set_dev_config_complete_ind_func</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, app_proj_event.o(i.app_set_dev_config_complete_ind_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_set_dev_config_complete_ind_func &rArr; appm_create_adv_act &rArr; appm_create_legacy_adv_act
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_create_conn_act
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_create_adv_act
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
</UL>

<P><STRONG><a name="[356]"></a>app_set_phy_ind_func</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, app_proj_event.o(i.app_set_phy_ind_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_set_phy_ind_func
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_msg_handler
</UL>

<P><STRONG><a name="[451]"></a>app_svc_added_ind_func</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_proj_event.o(i.app_svc_added_ind_func))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_profile_added_ind_handler
</UL>

<P><STRONG><a name="[3d6]"></a>app_update_params_complete_ind_func</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_proj_event.o(i.app_update_params_complete_ind_func))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_cmp_evt_handler
</UL>

<P><STRONG><a name="[3d5]"></a>app_update_params_rejected_ind_func</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, app_proj_event.o(i.app_update_params_rejected_ind_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_update_params_rejected_ind_func
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_cmp_evt_handler
</UL>

<P><STRONG><a name="[355]"></a>app_update_params_update_ind_func</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, app_proj_event.o(i.app_update_params_update_ind_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_update_params_update_ind_func
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_msg_handler
</UL>

<P><STRONG><a name="[3d8]"></a>app_update_phy_rejected_ind_func</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, app_proj_event.o(i.app_update_phy_rejected_ind_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_update_phy_rejected_ind_func
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_cmp_evt_handler
</UL>

<P><STRONG><a name="[35a]"></a>appm_adv_get_defer_op</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app.o(i.appm_adv_get_defer_op))
<BR><BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_stop_advertising
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_start_advertising
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_set_scan_response_data
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_set_per_adv_data
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_set_advertising_data
</UL>

<P><STRONG><a name="[18]"></a>appm_adv_recv_gapm_cmp</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, app.o(i.appm_adv_recv_gapm_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = appm_adv_recv_gapm_cmp &rArr; app_act_created_ind_func &rArr; app_db_init_complete_ind_func &rArr; user_entry_after_ble_init &rArr; YK_APP_Init &rArr; APP_Platfrom_Init &rArr; APP_MESH_Init &rArr; pb_remote_central_init &rArr; gatt_add_client &rArr; gatt_add_client_uuid &rArr; gatt_write_peer_svc_to_flash &rArr; flash_write &rArr; flash_protect_enable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_adv_complete_ind_func
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_act_deleted_ind_func
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_act_created_ind_func
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_create_adv_act
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_stop_advertising
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_start_advertising
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_set_scan_response_data
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_set_per_adv_data
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_set_advertising_data
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
</UL>
<BR>[Address Reference Count : 6]<UL><LI> app.o(i.appm_delete_act)
<LI> app.o(i.appm_set_advertising_data)
<LI> app.o(i.appm_set_per_adv_data)
<LI> app.o(i.appm_set_scan_response_data)
<LI> app.o(i.appm_start_advertising)
<LI> app.o(i.appm_stop_advertising)
</UL>
<P><STRONG><a name="[35b]"></a>appm_adv_set_defer_op</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app.o(i.appm_adv_set_defer_op))
<BR><BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_stop_advertising
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_start_advertising
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_set_scan_response_data
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_set_per_adv_data
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_set_advertising_param
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_set_advertising_data
</UL>

<P><STRONG><a name="[1a]"></a>appm_conn_recv_gapm_cmp</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, app_conn.o(i.appm_conn_recv_gapm_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = appm_conn_recv_gapm_cmp &rArr; app_act_created_ind_func &rArr; app_db_init_complete_ind_func &rArr; user_entry_after_ble_init &rArr; YK_APP_Init &rArr; APP_Platfrom_Init &rArr; APP_MESH_Init &rArr; pb_remote_central_init &rArr; gatt_add_client &rArr; gatt_add_client_uuid &rArr; gatt_write_peer_svc_to_flash &rArr; flash_write &rArr; flash_protect_enable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_conn_complete_ind_func
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_act_deleted_ind_func
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_act_created_ind_func
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> app_conn.o(i.appm_start_conn)
<LI> app_conn.o(i.appm_stop_conn)
</UL>
<P><STRONG><a name="[33c]"></a>appm_create_adv_act</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, app.o(i.appm_create_adv_act))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = appm_create_adv_act &rArr; appm_create_legacy_adv_act
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_create_per_adv_act
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_create_legacy_adv_act
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_create_aux_adv_act
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_adv_recv_gapm_cmp
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_set_advertising_param
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_dev_config_complete_ind_func
</UL>

<P><STRONG><a name="[347]"></a>appm_create_aux_adv_act</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, app.o(i.appm_create_aux_adv_act))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = appm_create_aux_adv_act
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_create_adv_act
</UL>

<P><STRONG><a name="[33d]"></a>appm_create_conn_act</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, app_conn.o(i.appm_create_conn_act))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = appm_create_conn_act
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_dev_config_complete_ind_func
</UL>

<P><STRONG><a name="[348]"></a>appm_create_legacy_adv_act</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, app.o(i.appm_create_legacy_adv_act))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = appm_create_legacy_adv_act
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_create_adv_act
</UL>

<P><STRONG><a name="[346]"></a>appm_create_per_adv_act</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, app.o(i.appm_create_per_adv_act))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = appm_create_per_adv_act
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_create_adv_act
</UL>

<P><STRONG><a name="[34b]"></a>appm_delete_act</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, app.o(i.appm_delete_act))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = appm_delete_act &rArr; appm_execute_activity_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_execute_activity_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_set_advertising_param
</UL>

<P><STRONG><a name="[34d]"></a>appm_exc_activity_cmp</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, app.o(i.appm_exc_activity_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = appm_exc_activity_cmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
</UL>

<P><STRONG><a name="[34c]"></a>appm_execute_activity_cmd</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, app.o(i.appm_execute_activity_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = appm_execute_activity_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_delete_act
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_stop_conn
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_stop_advertising
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_start_conn
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_start_advertising
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_set_scan_response_data
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_set_per_adv_data
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_set_advertising_data
</UL>

<P><STRONG><a name="[d]"></a>appm_init_imp</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, app.o(i.appm_init_imp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = appm_init_imp &rArr; ble_sec_init &rArr; get_stored_info_req
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_create (via Veneer)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init (via Veneer)
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sec_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry.o(i.app_main)
</UL>
<P><STRONG><a name="[357]"></a>appm_period_sync_recv_gapm_cmp</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, app.o(i.appm_period_sync_recv_gapm_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = appm_period_sync_recv_gapm_cmp &rArr; app_act_created_ind_func &rArr; app_db_init_complete_ind_func &rArr; user_entry_after_ble_init &rArr; YK_APP_Init &rArr; APP_Platfrom_Init &rArr; APP_MESH_Init &rArr; pb_remote_central_init &rArr; gatt_add_client &rArr; gatt_add_client_uuid &rArr; gatt_write_peer_svc_to_flash &rArr; flash_write &rArr; flash_protect_enable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_per_sync_completed_ind_func
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_act_deleted_ind_func
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_act_created_ind_func
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
</UL>

<P><STRONG><a name="[19]"></a>appm_scan_recv_gapm_cmp</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, app.o(i.appm_scan_recv_gapm_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = appm_scan_recv_gapm_cmp &rArr; app_act_created_ind_func &rArr; app_db_init_complete_ind_func &rArr; user_entry_after_ble_init &rArr; YK_APP_Init &rArr; APP_Platfrom_Init &rArr; APP_MESH_Init &rArr; pb_remote_central_init &rArr; gatt_add_client &rArr; gatt_add_client_uuid &rArr; gatt_write_peer_svc_to_flash &rArr; flash_write &rArr; flash_protect_enable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_scanning_completed_ind_func
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_act_deleted_ind_func
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_act_created_ind_func
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.appm_delete_act)
</UL>
<P><STRONG><a name="[341]"></a>appm_set_advertising_data</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, app.o(i.appm_set_advertising_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = appm_set_advertising_data &rArr; appm_execute_activity_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_adv_set_defer_op
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_adv_get_defer_op
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_execute_activity_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_advertising_data
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_adv_recv_gapm_cmp
</UL>

<P><STRONG><a name="[35c]"></a>appm_set_advertising_param</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, app.o(i.appm_set_advertising_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = appm_set_advertising_param &rArr; appm_delete_act &rArr; appm_execute_activity_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_delete_act
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_create_adv_act
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_adv_set_defer_op
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_advertising_param
</UL>

<P><STRONG><a name="[343]"></a>appm_set_per_adv_data</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, app.o(i.appm_set_per_adv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = appm_set_per_adv_data &rArr; appm_execute_activity_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_adv_set_defer_op
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_adv_get_defer_op
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_execute_activity_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_adv_recv_gapm_cmp
</UL>

<P><STRONG><a name="[342]"></a>appm_set_scan_response_data</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, app.o(i.appm_set_scan_response_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = appm_set_scan_response_data &rArr; appm_execute_activity_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_adv_set_defer_op
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_adv_get_defer_op
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_execute_activity_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_advertising_rsp_data
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_adv_recv_gapm_cmp
</UL>

<P><STRONG><a name="[344]"></a>appm_start_advertising</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, app.o(i.appm_start_advertising))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = appm_start_advertising &rArr; appm_execute_activity_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_adv_set_defer_op
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_adv_get_defer_op
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_execute_activity_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_start_advertising
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_adv_recv_gapm_cmp
</UL>

<P><STRONG><a name="[35d]"></a>appm_start_conn</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, app_conn.o(i.appm_start_conn))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = appm_start_conn &rArr; appm_execute_activity_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_execute_activity_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_start_conn
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
</UL>

<P><STRONG><a name="[33f]"></a>appm_stop_advertising</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, app.o(i.appm_stop_advertising))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = appm_stop_advertising &rArr; appm_execute_activity_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_adv_set_defer_op
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_adv_get_defer_op
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_execute_activity_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_adv_recv_gapm_cmp
</UL>

<P><STRONG><a name="[35e]"></a>appm_stop_conn</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, app_conn.o(i.appm_stop_conn))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = appm_stop_conn &rArr; appm_execute_activity_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_execute_activity_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_stop_conn
</UL>

<P><STRONG><a name="[367]"></a>attc_l2cc_pdu_recv_handler</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, attc.o(i.attc_l2cc_pdu_recv_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = attc_l2cc_pdu_recv_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler
</UL>

<P><STRONG><a name="[36b]"></a>attc_send_att_req</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, attc.o(i.attc_send_att_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = attc_send_att_req
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set (via Veneer)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_hdl_cfm
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_execute
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cmd_handler
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_cmd_handler
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_exc_mtu_cmd_handler
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_disc_cmd_handler
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_sign_ind_handler
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_by_type_rsp_handler
</UL>

<P><STRONG><a name="[370]"></a>attc_send_execute</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, attc.o(i.attc_send_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = attc_send_execute &rArr; l2cc_pdu_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_att_req
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cmd_handler
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_execute_write_cmd_handler
</UL>

<P><STRONG><a name="[371]"></a>attc_send_hdl_cfm</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, attc.o(i.attc_send_hdl_cfm))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = attc_send_hdl_cfm &rArr; l2cc_pdu_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_att_req
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_event_cfm_handler
</UL>

<P><STRONG><a name="[36d]"></a>attc_send_read_ind</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, attc.o(i.attc_send_read_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = attc_send_read_ind
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init (via Veneer)
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_requester
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_rsp_handler
</UL>

<P><STRONG><a name="[373]"></a>attm_att_set_value</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, attm.o(i.attm_att_set_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = attm_att_set_value &rArr; attmdb_get_attribute &rArr; attmdb_get_service
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_uuid16_comp
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_attribute
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_service_init
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_init_attr
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_svc_changed_cmd_handler
</UL>

<P><STRONG><a name="[376]"></a>attm_att_update_perm</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, attm.o(i.attm_att_update_perm))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = attm_att_update_perm &rArr; attmdb_get_attribute &rArr; attmdb_get_service
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_uuid16_comp
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_attribute
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_dev_config_cmd_handler
</UL>

<P><STRONG><a name="[377]"></a>attm_convert_to128</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, attm.o(i.attm_convert_to128))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = attm_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_uuid
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_uuid_comp
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_cmd_handler
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_disc_cmd_handler
</UL>

<P><STRONG><a name="[378]"></a>attm_get_value</STRONG> (Thumb, 372 bytes, Stack size 96 bytes, attm.o(i.attm_get_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = attm_get_value &rArr; attmdb_get_uuid &rArr; attm_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_uuid16_comp
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_uuid
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_attribute
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_value
</UL>

<P><STRONG><a name="[37a]"></a>attm_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, attm.o(i.attm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = attm_init &rArr; attmdb_destroy
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_hl_init_imp
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_hl_reset
</UL>

<P><STRONG><a name="[37c]"></a>attm_is_bt16_uuid</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, attm.o(i.attm_is_bt16_uuid))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = attm_is_bt16_uuid &rArr; attm_uuid_comp &rArr; attm_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_uuid_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_svc_calc_len
</UL>

<P><STRONG><a name="[37d]"></a>attm_is_bt32_uuid</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, attm.o(i.attm_is_bt32_uuid))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = attm_is_bt32_uuid &rArr; attm_uuid_comp &rArr; attm_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_uuid_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_svc_calc_len
</UL>

<P><STRONG><a name="[37e]"></a>attm_reserve_handle_range</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, attm.o(i.attm_reserve_handle_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = attm_reserve_handle_range &rArr; attmdb_svc_check_hdl
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_svc_check_hdl
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_init
</UL>

<P><STRONG><a name="[380]"></a>attm_svc_create_db</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, attm.o(i.attm_svc_create_db))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = attm_svc_create_db &rArr; attmdb_add_service &rArr; attmdb_svc_init &rArr; attm_uuid16_comp &rArr; attm_uuid_comp &rArr; attm_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_add_service
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_service_init
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_init
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_init_attr
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init_attr
</UL>

<P><STRONG><a name="[382]"></a>attm_svc_create_db_ext</STRONG> (Thumb, 356 bytes, Stack size 56 bytes, attm.o(i.attm_svc_create_db_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = attm_svc_create_db_ext &rArr; attmdb_add_service &rArr; attmdb_svc_init &rArr; attm_uuid16_comp &rArr; attm_uuid_comp &rArr; attm_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_add_service
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_service_init
</UL>

<P><STRONG><a name="[383]"></a>attm_svc_get_permission</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, attm.o(i.attm_svc_get_permission))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = attm_svc_get_permission &rArr; attmdb_get_service
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_service
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_att_get_permission
</UL>

<P><STRONG><a name="[385]"></a>attm_uuid16_comp</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, attm.o(i.attm_uuid16_comp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = attm_uuid16_comp &rArr; attm_uuid_comp &rArr; attm_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_uuid_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_svc_init
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_svc_calc_len
</UL>

<P><STRONG><a name="[369]"></a>attm_uuid_comp</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, attm.o(i.attm_uuid_comp))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = attm_uuid_comp &rArr; attm_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_convert_to128
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_extract_svc_info_uuid_128
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_uuid16_comp
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_is_bt32_uuid
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_is_bt16_uuid
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_value_by_uuid
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_by_type_req
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_by_type_rsp_handler
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_by_grp_type_rsp_handler
</UL>

<P><STRONG><a name="[381]"></a>attmdb_add_service</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, attm_db.o(i.attmdb_add_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = attmdb_add_service &rArr; attmdb_svc_init &rArr; attm_uuid16_comp &rArr; attm_uuid_comp &rArr; attm_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_svc_check_hdl
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_svc_init
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_svc_calc_len
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_svc_create_db_ext
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_svc_create_db
</UL>

<P><STRONG><a name="[388]"></a>attmdb_att_get_permission</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, attm_db.o(i.attmdb_att_get_permission))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = attmdb_att_get_permission &rArr; attmdb_get_attribute &rArr; attmdb_get_service
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_uuid16_comp
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_attribute
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_svc_get_permission
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_att_chk_perm
</UL>

<P><STRONG><a name="[37b]"></a>attmdb_destroy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, attm_db.o(i.attmdb_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = attmdb_destroy
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_dev_config_cmd_handler
</UL>

<P><STRONG><a name="[374]"></a>attmdb_get_attribute</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, attm_db.o(i.attmdb_get_attribute))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = attmdb_get_attribute &rArr; attmdb_get_service
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_service
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_att_set_value
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_get_value
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_att_update_perm
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_end
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_execute_write_req
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_att_get_permission
</UL>

<P><STRONG><a name="[389]"></a>attmdb_get_max_len</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, attm_db.o(i.attmdb_get_max_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = attmdb_get_max_len
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_uuid16_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_check_length_and_offset
</UL>

<P><STRONG><a name="[393]"></a>attmdb_get_next_att</STRONG> (Thumb, 114 bytes, Stack size 20 bytes, attm_db.o(i.attmdb_get_next_att))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = attmdb_get_next_att
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_value_by_uuid
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_info_req
</UL>

<P><STRONG><a name="[384]"></a>attmdb_get_service</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, attm_db.o(i.attmdb_get_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = attmdb_get_service
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_attribute
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_svc_get_permission
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_dest_task
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_end
</UL>

<P><STRONG><a name="[379]"></a>attmdb_get_uuid</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, attm_db.o(i.attmdb_get_uuid))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = attmdb_get_uuid &rArr; attm_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_convert_to128
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_get_value
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_value_by_uuid
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_info_req
</UL>

<P><STRONG><a name="[37f]"></a>attmdb_svc_check_hdl</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, attm_db.o(i.attmdb_svc_check_hdl))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = attmdb_svc_check_hdl
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_add_service
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_reserve_handle_range
</UL>

<P><STRONG><a name="[4ed]"></a>attmdb_svc_visibility_set</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, attm_db.o(i.attmdb_svc_visibility_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = attmdb_svc_visibility_set
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_init
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_type_init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_start
</UL>

<P><STRONG><a name="[375]"></a>attmdb_uuid16_comp</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, attm_db.o(i.attmdb_uuid16_comp))
<BR><BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_att_set_value
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_get_value
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_att_update_perm
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_end
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_max_len
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_att_get_permission
</UL>

<P><STRONG><a name="[38b]"></a>atts_clear_prep_data</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, atts.o(i.atts_clear_prep_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atts_clear_prep_data
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cleanup
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cfm_handler
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_execute_write_req
</UL>

<P><STRONG><a name="[38c]"></a>atts_clear_read_cache</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, atts.o(i.atts_clear_read_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atts_clear_read_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cleanup
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cfm_handler
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_evt_cmd_handler
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_req
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_mult_req
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_by_type_req
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_by_grp_type_req
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_blob_req
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_value
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_by_type_req
</UL>

<P><STRONG><a name="[38d]"></a>atts_clear_rsp_data</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, atts.o(i.atts_clear_rsp_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atts_clear_rsp_data
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_process_pdu
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cleanup
</UL>

<P><STRONG><a name="[399]"></a>atts_l2cc_pdu_recv_handler</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, atts.o(i.atts_l2cc_pdu_recv_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = atts_l2cc_pdu_recv_handler &rArr; atts_process_pdu &rArr; atts_clear_rsp_data
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear (via Veneer)
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_process_pdu
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler
</UL>

<P><STRONG><a name="[39b]"></a>atts_process_pdu</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, atts.o(i.atts_process_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = atts_process_pdu &rArr; atts_clear_rsp_data
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free (via Veneer)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_clear_rsp_data
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_con_enable
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cfm_handler
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_cfm_handler
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_att_info_cfm_handler
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_cmp_evt_handler
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_l2cc_pdu_recv_handler
</UL>

<P><STRONG><a name="[38e]"></a>atts_send_error</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, atts.o(i.atts_send_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = atts_send_error &rArr; l2cc_pdu_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cfm_handler
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_att_info_cfm_handler
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_rsp_send
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_req
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_req
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_mult_req
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_by_type_req
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_by_grp_type_req
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_blob_req
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_prepare_write_req
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_info_req
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_by_type_req
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_execute_write_req
</UL>

<P><STRONG><a name="[39e]"></a>atts_send_event</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, atts.o(i.atts_send_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = atts_send_event &rArr; atts_get_att_chk_perm &rArr; attmdb_att_get_permission &rArr; attmdb_get_attribute &rArr; attmdb_get_service
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set (via Veneer)
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_mtu
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_att_chk_perm
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_evt_cmd_handler
</UL>

<P><STRONG><a name="[3a1]"></a>atts_write_rsp_send</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, atts.o(i.atts_write_rsp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = atts_write_rsp_send &rArr; atts_send_error &rArr; l2cc_pdu_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_send_error
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cfm_handler
</UL>

<P><STRONG><a name="[3a2]"></a>atts_write_signed_cfm</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, atts.o(i.atts_write_signed_cfm))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = atts_write_signed_cfm &rArr; atts_get_att_chk_perm &rArr; attmdb_att_get_permission &rArr; attmdb_get_attribute &rArr; attmdb_get_service
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_update_elmt
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_att_chk_perm
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_sign_ind_handler
</UL>

<P><STRONG><a name="[310]"></a>ble_add_svc</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, app.o(i.ble_add_svc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_add_svc
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_act_created_ind_func
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
</UL>

<P><STRONG><a name="[3a5]"></a>ble_bond_check</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, user_bond_manage.o(i.ble_bond_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ble_bond_check &rArr; app_connection_success_ind_func
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_connection_send_cfm
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sec_resolve_address
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_connection_success_ind_func
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_connection_req_ind_func
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sec_init
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_set_evt_func
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_connection_req_ind_handler
</UL>

<P><STRONG><a name="[1c]"></a>ble_bond_get_info</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, user_bond_manage.o(i.ble_bond_get_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_bond_get_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> user_bond_manage.o(i.ble_bond_init)
</UL>
<P><STRONG><a name="[3a7]"></a>ble_bond_init</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, user_bond_manage.o(i.ble_bond_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ble_bond_init &rArr; ble_bond_read_info_from_flash &rArr; flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bond_read_info_from_flash
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_set_evt_func
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_bond_manager_init
</UL>

<P><STRONG><a name="[3a8]"></a>ble_bond_read_info_from_flash</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, user_bond_manage.o(i.ble_bond_read_info_from_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_bond_read_info_from_flash &rArr; flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bond_init
</UL>

<P><STRONG><a name="[1d]"></a>ble_bond_store_info</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, user_bond_manage.o(i.ble_bond_store_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ble_bond_store_info &rArr; ble_bond_write_info_to_flash &rArr; flash_write &rArr; flash_protect_enable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bond_write_info_to_flash
</UL>
<BR>[Address Reference Count : 1]<UL><LI> user_bond_manage.o(i.ble_bond_init)
</UL>
<P><STRONG><a name="[3a9]"></a>ble_bond_write_info_to_flash</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, user_bond_manage.o(i.ble_bond_write_info_to_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ble_bond_write_info_to_flash &rArr; flash_write &rArr; flash_protect_enable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write (via Veneer)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read (via Veneer)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase (via Veneer)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bond_store_info
</UL>

<P><STRONG><a name="[33a]"></a>ble_gap_set_dev_config</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, app.o(i.ble_gap_set_dev_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_gap_set_dev_config
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_reset_complete_ind_func
</UL>

<P><STRONG><a name="[3aa]"></a>ble_sec_check_ediv_rand</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, app_sec.o(i.ble_sec_check_ediv_rand))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_sec_check_ediv_rand
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_encrypt_req_ind_handler
</UL>

<P><STRONG><a name="[3de]"></a>ble_sec_get_bond_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_sec.o(i.ble_sec_get_bond_status))
<BR><BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_connection_send_cfm
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
</UL>

<P><STRONG><a name="[352]"></a>ble_sec_init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, app_sec.o(i.ble_sec_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_sec_init &rArr; get_stored_info_req
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_stored_info_req
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bond_check
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bond_addr_resolve_cb
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_init_imp
</UL>

<P><STRONG><a name="[3a6]"></a>ble_sec_resolve_address</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, app_sec.o(i.ble_sec_resolve_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_sec_resolve_address
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bond_check
</UL>

<P><STRONG><a name="[3bb]"></a>ble_sec_set_pairing_param</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_sec.o(i.ble_sec_set_pairing_param))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_security_param_init
</UL>

<P><STRONG><a name="[3a3]"></a>ble_set_evt_func</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app.o(i.ble_set_evt_func))
<BR><BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bond_check
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bond_addr_resolve_cb
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_profile_task_add
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bond_init
</UL>

<P><STRONG><a name="[d5]"></a>blob_block_get</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, blob_procedure_server.o(i.blob_block_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = blob_block_get &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;last_missing_chunk_check
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blob_transfer_server.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>blob_block_start</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, blob_procedure_server.o(i.blob_block_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = blob_block_start &rArr; blob_transfer_server_phase_transitions &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blob_transfer_server_phase_transitions
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blob_transfer_server.o(.constdata)
</UL>
<P><STRONG><a name="[d7]"></a>blob_chunk_transfer</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, blob_procedure_server.o(i.blob_chunk_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = blob_chunk_transfer &rArr; chunck_error_condition_check &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;last_missing_chunk_check
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chunck_error_condition_check
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blob_transfer_server_phase_transitions
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blob_transfer_server.o(.constdata)
</UL>
<P><STRONG><a name="[d8]"></a>blob_information_get</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, blob_procedure_server.o(i.blob_information_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = blob_information_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blob_transfer_server.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>blob_transfer_cancel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, blob_procedure_server.o(i.blob_transfer_cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = blob_transfer_cancel &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blob_transfer_server.o(.constdata)
</UL>
<P><STRONG><a name="[d2]"></a>blob_transfer_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, blob_procedure_server.o(i.blob_transfer_get))
<BR>[Address Reference Count : 1]<UL><LI> blob_transfer_server.o(.constdata)
</UL>
<P><STRONG><a name="[2c4]"></a>blob_transfer_server_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, blob_transfer_server.o(i.blob_transfer_server_init))
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MESH_Init
</UL>

<P><STRONG><a name="[26d]"></a>blob_transfer_server_msg_handler</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, blob_transfer_server.o(i.blob_transfer_server_msg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = blob_transfer_server_msg_handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sig_mesh_led.o(.data)
</UL>
<P><STRONG><a name="[d3]"></a>blob_transfer_start</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, blob_procedure_server.o(i.blob_transfer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = blob_transfer_start &rArr; blob_transfer_server_phase_transitions &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blob_transfer_server_phase_transitions
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blob_transfer_all_condiation_is_met
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blob_transfer_server.o(.constdata)
</UL>
<P><STRONG><a name="[7cd]"></a>calib_meter_evt_end</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, adv_check_mode.o(i.calib_meter_evt_end))
<BR><BR>[Called By]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_lld_evt_end_isr (via Veneer)
</UL>

<P><STRONG><a name="[7c9]"></a>calib_meter_recv_msg</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, adv_check_mode.o(i.calib_meter_recv_msg))
<BR><BR>[Called By]<UL><LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_lld_rx_isr (via Veneer)
</UL>

<P><STRONG><a name="[353]"></a>check_timer_handle</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, os_timer.o(i.check_timer_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = check_timer_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save (via Veneer)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore (via Veneer)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_msg_handler
</UL>

<P><STRONG><a name="[304]"></a>co_read16p</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, common.o(i.co_read16p))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SyncFwVersion
</UL>

<P><STRONG><a name="[2fd]"></a>co_read32p</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, common.o(i.co_read32p))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_StartOTA
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_Confirm
</UL>

<P><STRONG><a name="[26f]"></a>con_max_lat_calc_patch</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, patch_rf.o(i.con_max_lat_calc_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = con_max_lat_calc_patch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(.data)
</UL>
<P><STRONG><a name="[3b3]"></a>efuse_get_chip_unique_id</STRONG> (Thumb, 154 bytes, Stack size 36 bytes, driver_efuse.o(i.efuse_get_chip_unique_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = efuse_get_chip_unique_id &rArr; efuse_read
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efuse_read
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_custom_parameters
</UL>

<P><STRONG><a name="[3b4]"></a>efuse_read</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, driver_efuse.o(i.efuse_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = efuse_read
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_sub_init
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efuse_get_chip_unique_id
</UL>

<P><STRONG><a name="[e2]"></a>firmware_update_apply</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, firmware_update_procedure_server.o(i.firmware_update_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = firmware_update_apply &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> firmware_update_server.o(.constdata)
</UL>
<P><STRONG><a name="[e1]"></a>firmware_update_cancel</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, firmware_update_procedure_server.o(i.firmware_update_cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = firmware_update_cancel &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> firmware_update_server.o(.constdata)
</UL>
<P><STRONG><a name="[e3]"></a>firmware_update_fw_meta_check</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, firmware_update_procedure_server.o(i.firmware_update_fw_meta_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = firmware_update_fw_meta_check &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> firmware_update_server.o(.constdata)
</UL>
<P><STRONG><a name="[df]"></a>firmware_update_get</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, firmware_update_procedure_server.o(i.firmware_update_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = firmware_update_get &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> firmware_update_server.o(.constdata)
</UL>
<P><STRONG><a name="[e4]"></a>firmware_update_info_get</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, firmware_update_procedure_server.o(i.firmware_update_info_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = firmware_update_info_get &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> firmware_update_server.o(.constdata)
</UL>
<P><STRONG><a name="[3b5]"></a>firmware_update_init</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, firmware_update_procedure_server.o(i.firmware_update_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = firmware_update_init &rArr; os_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;firmware_update_server_init
</UL>

<P><STRONG><a name="[2c5]"></a>firmware_update_server_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, firmware_update_server.o(i.firmware_update_server_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = firmware_update_server_init &rArr; firmware_update_init &rArr; os_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;firmware_update_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MESH_Init
</UL>

<P><STRONG><a name="[26e]"></a>firmware_update_server_msg_handler</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, firmware_update_server.o(i.firmware_update_server_msg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = firmware_update_server_msg_handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sig_mesh_led.o(.data)
</UL>
<P><STRONG><a name="[e0]"></a>firmware_update_start</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, firmware_update_procedure_server.o(i.firmware_update_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = firmware_update_start &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_blob_procedure_start
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> firmware_update_server.o(.constdata)
</UL>
<P><STRONG><a name="[3b7]"></a>from_task_func_to_msg_handle</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, os_task.o(i.from_task_func_to_msg_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = from_task_func_to_msg_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_create_x
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_service_init
</UL>

<P><STRONG><a name="[297]"></a>gap_address_get</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gap_api.o(i.gap_address_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gap_address_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Google_Start_Advertising
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_led_init
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_entry_after_ble_init
</UL>

<P><STRONG><a name="[296]"></a>gap_bond_manager_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gap_api.o(i.gap_bond_manager_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gap_bond_manager_init &rArr; ble_bond_init &rArr; ble_bond_read_info_from_flash &rArr; flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bond_init
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[305]"></a>gap_conn_param_update</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, gap_api.o(i.gap_conn_param_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gap_conn_param_update
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SyncFwVersion
</UL>

<P><STRONG><a name="[3b8]"></a>gap_disconnect_req</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gap_api.o(i.gap_disconnect_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gap_disconnect_req
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_get_connect_status
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_remote_gatt_close
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_remote_central_msg_handler
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_ind_handler
</UL>

<P><STRONG><a name="[716]"></a>gap_get_connect_num</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gap_api.o(i.gap_get_connect_num))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proj_ble_gap_evt_func
</UL>

<P><STRONG><a name="[3b9]"></a>gap_get_connect_status</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gap_api.o(i.gap_get_connect_status))
<BR><BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_disconnect_req
</UL>

<P><STRONG><a name="[3e8]"></a>gap_get_dev_appearance</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gap_api.o(i.gap_get_dev_appearance))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_dev_info_req_ind_handler
</UL>

<P><STRONG><a name="[3ba]"></a>gap_get_dev_name</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gap_api.o(i.gap_get_dev_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gap_get_dev_name
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_dev_info_req_ind_handler
</UL>

<P><STRONG><a name="[79d]"></a>gap_rssi_ind</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, patch_rf.o(i.gap_rssi_ind))
<BR><BR>[Called By]<UL><LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_rssi_value (via Veneer)
</UL>

<P><STRONG><a name="[295]"></a>gap_security_param_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gap_api.o(i.gap_security_param_init))
<BR><BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sec_set_pairing_param
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[2a5]"></a>gap_set_advertising_data</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gap_api.o(i.gap_set_advertising_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gap_set_advertising_data &rArr; appm_set_advertising_data &rArr; appm_execute_activity_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_set_advertising_data
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Google_Start_Advertising
</UL>

<P><STRONG><a name="[2a1]"></a>gap_set_advertising_param</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gap_api.o(i.gap_set_advertising_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gap_set_advertising_param &rArr; appm_set_advertising_param &rArr; appm_delete_act &rArr; appm_execute_activity_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_set_advertising_param
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Google_Start_Advertising
</UL>

<P><STRONG><a name="[2a6]"></a>gap_set_advertising_rsp_data</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gap_api.o(i.gap_set_advertising_rsp_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gap_set_advertising_rsp_data &rArr; appm_set_scan_response_data &rArr; appm_execute_activity_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_set_scan_response_data
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Google_Start_Advertising
</UL>

<P><STRONG><a name="[757]"></a>gap_set_cb_func</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gap_api.o(i.gap_set_cb_func))
<BR><BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_entry_after_ble_init
</UL>

<P><STRONG><a name="[3fb]"></a>gap_set_dev_appearance</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gap_api.o(i.gap_set_dev_appearance))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_set_dev_info_req_ind_handler
</UL>

<P><STRONG><a name="[3bc]"></a>gap_set_dev_name</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gap_api.o(i.gap_set_dev_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gap_set_dev_name
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_entry_after_ble_init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_set_dev_info_req_ind_handler
</UL>

<P><STRONG><a name="[2a7]"></a>gap_start_advertising</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gap_api.o(i.gap_start_advertising))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gap_start_advertising &rArr; appm_start_advertising &rArr; appm_execute_activity_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_start_advertising
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Google_Start_Advertising
</UL>

<P><STRONG><a name="[3bd]"></a>gap_start_conn</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, gap_api.o(i.gap_start_conn))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gap_start_conn &rArr; appm_start_conn &rArr; appm_execute_activity_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_start_conn
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_remote_gatt_create
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_remote_disconnected
</UL>

<P><STRONG><a name="[3be]"></a>gap_stop_conn</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gap_api.o(i.gap_stop_conn))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gap_stop_conn &rArr; appm_stop_conn &rArr; appm_execute_activity_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_stop_conn
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_remote_connect_timeout
</UL>

<P><STRONG><a name="[742]"></a>gapc_auth_get</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, gapc.o(i.gapc_auth_get))
<BR><BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_handle_enc_change_evt
</UL>

<P><STRONG><a name="[3dc]"></a>gapc_auth_set</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, gapc.o(i.gapc_auth_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapc_auth_set
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_connection_cfm_handler
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_ind
</UL>

<P><STRONG><a name="[177]"></a>gapc_cmp_evt_handler</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, gapm_init.o(i.gapc_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gapc_cmp_evt_handler &rArr; gapm_actv_stopped &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_stopped
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[3da]"></a>gapc_con_cleanup</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gapc.o(i.gapc_con_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gapc_con_cleanup &rArr; gapc_cleanup &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_con_cleanup
</UL>

<P><STRONG><a name="[3db]"></a>gapc_con_create</STRONG> (Thumb, 366 bytes, Stack size 48 bytes, gapc.o(i.gapc_con_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gapc_con_create
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_con_create
</UL>

<P><STRONG><a name="[3a4]"></a>gapc_connection_send_cfm</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, app_task.o(i.gapc_connection_send_cfm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapc_connection_send_cfm
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sec_get_bond_status
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bond_check
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bond_addr_resolve_cb
</UL>

<P><STRONG><a name="[398]"></a>gapc_enc_keysize_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gapc.o(i.gapc_enc_keysize_get))
<BR><BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_att_chk_perm
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_req_ind
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_ltk_exch
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_mst_id_pdu
</UL>

<P><STRONG><a name="[734]"></a>gapc_enc_keysize_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gapc.o(i.gapc_enc_keysize_set))
<BR><BR>[Called By]<UL><LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_check_max_key_size
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_encrypt_start
</UL>

<P><STRONG><a name="[3cd]"></a>gapc_get_bdaddr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gapc.o(i.gapc_get_bdaddr))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_ind_handler
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_e1
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_cfm
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_peer_att_info_ind_handler
</UL>

<P><STRONG><a name="[3e9]"></a>gapc_get_chan_sel_algo</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gapc.o(i.gapc_get_chan_sel_algo))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_info_cmd_handler
</UL>

<P><STRONG><a name="[3df]"></a>gapc_get_conhdl</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gapc.o(i.gapc_get_conhdl))
<BR><BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_latency_enable
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_set_pref_slave_latency_cmd_handler
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_set_phy_cmd_handler
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_set_le_pkt_size_handler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_set_le_ping_to_handler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_update_cmd_handler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_update_cfm_handler
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_info_cmd_handler
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_disconnect_cmd_handler
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_data_send
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_start_enc_cmd
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_ltk_req_rsp
</UL>

<P><STRONG><a name="[c]"></a>gapc_get_conidx_imp</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gapc.o(i.gapc_get_conidx_imp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gapc_get_conidx_imp
</UL>
<BR>[Called By]<UL><LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_rssi_value (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry.o(i.app_main)
</UL>
<P><STRONG><a name="[73e]"></a>gapc_get_csrk</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gapc.o(i.gapc_get_csrk))
<BR><BR>[Called By]<UL><LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_l
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_ci
</UL>

<P><STRONG><a name="[366]"></a>gapc_get_dest_task</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gapc.o(i.gapc_get_dest_task))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_update_cmd_handler
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_set_mtu
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_timeout_handler
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_req_ind
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_ind
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_handle_enc_change_evt
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_check_repeated_attempts
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_sign_cont
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_encrypt_start_handler
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_hdl_val_ntf_ind_handler
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_sec_req_pdu
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_key_press_notification_ind
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_phy_cmd_cmp_evt_handler
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_phy_upd_cmp_evt_handler
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_data_len_chg_evt_handler
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_con_update_cmp_evt_handler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disc_cmp_evt_handler
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_auth_payl_to_exp_evt_handler
</UL>

<P><STRONG><a name="[3f1]"></a>gapc_get_operation</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gapc.o(i.gapc_get_operation))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_cmp_evt_handler
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_ind_handler
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_use_enc_block_ind_handler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_gen_rand_nb_ind_handler
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_update_conn_param_to_ind_handler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_update_cfm_handler
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_reject_handler
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_conn_param_upd_resp_handler
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_rssi_cmd_cmp_evt_handler
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_rem_ver_info_cmp_evt_handler
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_chnl_map_cmd_cmp_evt_handler
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_rem_feats_cmp_evt_handler
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_phy_upd_cmp_evt_handler
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_ltk_request_evt_handler
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_stat_event_handler
</UL>

<P><STRONG><a name="[3f0]"></a>gapc_get_operation_ptr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gapc.o(i.gapc_get_operation_ptr))
<BR><BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_process_op
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_update_cfm_handler
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_sign_cont
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_reject_handler
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_conn_param_upd_resp_handler
</UL>

<P><STRONG><a name="[3ea]"></a>gapc_get_requester</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gapc.o(i.gapc_get_requester))
<BR><BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_src_id_get (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_ind_handler
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_sign_cont
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_rssi_cmd_cmp_evt_handler
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_rem_ver_info_cmp_evt_handler
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_chnl_map_cmd_cmp_evt_handler
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_auth_payl_to_cmd_cmp_evt_handler
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_rem_feats_cmp_evt_handler
</UL>

<P><STRONG><a name="[3c1]"></a>gapc_get_role</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gapc.o(i.gapc_get_role))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_smp_timeout_timer_ind_handler
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_security_cmd_handler
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_encrypt_cmd_handler
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_encrypt_cfm_handler
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_cmd_handler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_cfm_handler
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_create
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_req_ind
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_initiate_dhkey_verification
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_initiate_dhkey_check
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_init_mac_key_calculation
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_recv
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_tk_exch
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_rsp
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_oob_exch
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_nc_exch
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_ltk_exch
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_irk_exch
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_csrk_exch
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_confirm_gen_rand
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_conn_param_upd_resp_handler
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_conn_param_upd_req_handler
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_sign_info_pdu
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_sec_req_pdu
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_public_key_pdu
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_rsp_pdu
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_req_pdu
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_rand_pdu
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_fail_pdu
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_cfm_pdu
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_mst_id_pdu
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_id_info_pdu
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_id_addr_info_pdu
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_enc_info_pdu
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_dhkey_check_pdu
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_enc_key_refr_evt_handler
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_enc_chg_evt_handler
</UL>

<P><STRONG><a name="[74f]"></a>gapc_get_sign_counter</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gapc.o(i.gapc_get_sign_counter))
<BR><BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_sign_cont
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_sign_command
</UL>

<P><STRONG><a name="[145]"></a>gapc_hci_handler</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, gapc_hci.o(i.gapc_hci_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapc_hci_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[3ec]"></a>gapc_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gapc.o(i.gapc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gapc_init &rArr; gapc_cleanup &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_create (via Veneer)
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init
</UL>

<P><STRONG><a name="[48d]"></a>gapc_is_disc_connection</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gapc.o(i.gapc_is_disc_connection))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_timeout_handler
</UL>

<P><STRONG><a name="[397]"></a>gapc_is_sec_set</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, gapc.o(i.gapc_is_sec_set))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cmd_handler
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_att_chk_perm
</UL>

<P><STRONG><a name="[741]"></a>gapc_link_encrypted</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gapc.o(i.gapc_link_encrypted))
<BR><BR>[Called By]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_ind
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_handle_enc_change_evt
</UL>

<P><STRONG><a name="[396]"></a>gapc_lk_sec_lvl_get</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gapc.o(i.gapc_lk_sec_lvl_get))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cmd_handler
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_att_chk_perm
</UL>

<P><STRONG><a name="[3f3]"></a>gapc_param_update_sanity</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gapc.o(i.gapc_param_update_sanity))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gapc_param_update_sanity
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_update_cmd_handler
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_conn_param_upd_req_handler
</UL>

<P><STRONG><a name="[178]"></a>gapc_peer_att_info_ind_handler</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, gapm_init.o(i.gapc_peer_att_info_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapc_peer_att_info_ind_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_bdaddr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[3c9]"></a>gapc_process_op</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, gapc_task.o(i.gapc_process_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gapc_process_op &rArr; gapc_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_src_id_get (via Veneer)
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_update_state
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_set_operation_ptr
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_error_evt
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_operation_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_sign_cmd_handler
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_set_pref_slave_latency_cmd_handler
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_set_phy_cmd_handler
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_set_le_pkt_size_handler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_set_le_ping_to_handler
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_security_cmd_handler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_update_cmd_handler
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_key_press_notification_cmd_handler
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_info_cmd_handler
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_encrypt_cmd_handler
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_cmd_handler
</UL>

<P><STRONG><a name="[3f7]"></a>gapc_reschedule_operation</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, gapc.o(i.gapc_reschedule_operation))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gapc_reschedule_operation
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_src_id_get (via Veneer)
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_forward (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_con_update_cmp_evt_handler
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_stat_event_handler
</UL>

<P><STRONG><a name="[3cc]"></a>gapc_send_complete_evt</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, gapc.o(i.gapc_send_complete_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_update_state
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_requester
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_operation_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_cmp_evt_handler
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_update_conn_param_to_ind_handler
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_sign_cmd_handler
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_security_cmd_handler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_update_cmd_handler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_update_cfm_handler
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_info_cmd_handler
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_encrypt_cmd_handler
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_cmd_handler
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_cleanup
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_ltk_req_rsp
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_handle_enc_change_evt
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_sign_cont
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_end
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_reject_handler
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_conn_param_upd_resp_handler
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_wr_auth_payl_to_cmd_cmp_evt_handler
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_vs_set_pref_slave_latency_cmd_cmp_evt_handler
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_rssi_cmd_cmp_evt_handler
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_rem_ver_info_cmp_evt_handler
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_chnl_map_cmd_cmp_evt_handler
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_auth_payl_to_cmd_cmp_evt_handler
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_start_enc_stat_evt_handler
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_data_len_cmd_cmp_evt_handler
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_rem_feats_cmp_evt_handler
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_phy_cmd_cmp_evt_handler
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_phy_upd_cmp_evt_handler
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_con_update_cmp_evt_handler
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_stat_event_handler
</UL>

<P><STRONG><a name="[3fa]"></a>gapc_send_disconect_ind</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gapc.o(i.gapc_send_disconect_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapc_send_disconect_ind
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disc_cmp_evt_handler
</UL>

<P><STRONG><a name="[3e1]"></a>gapc_send_error_evt</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gapc.o(i.gapc_send_error_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapc_send_error_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_process_op
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_disconnect_cmd_handler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disc_cmp_evt_handler
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_stat_event_handler
</UL>

<P><STRONG><a name="[445]"></a>gapc_set_local_addr</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gapc.o(i.gapc_set_local_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gapc_set_local_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_adv_set_term_evt_handler
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init_connection_ind
</UL>

<P><STRONG><a name="[3f5]"></a>gapc_set_operation_ptr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gapc.o(i.gapc_set_operation_ptr))
<BR><BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_process_op
</UL>

<P><STRONG><a name="[4cd]"></a>gapc_sig_pdu_recv_handler</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gapc_sig.o(i.gapc_sig_pdu_recv_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapc_sig_pdu_recv_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler
</UL>

<P><STRONG><a name="[3f2]"></a>gapc_sig_send_param_resp</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gapc_sig.o(i.gapc_sig_send_param_resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gapc_sig_send_param_resp &rArr; l2cc_pdu_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_update_cfm_handler
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_conn_param_upd_req_handler
</UL>

<P><STRONG><a name="[48a]"></a>gapc_svc_chg_ccc_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gapc.o(i.gapc_svc_chg_ccc_get))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_svc_changed_cmd_handler
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
</UL>

<P><STRONG><a name="[490]"></a>gapc_svc_chg_ccc_set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gapc.o(i.gapc_svc_chg_ccc_set))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
</UL>

<P><STRONG><a name="[3f6]"></a>gapc_update_state</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gapc.o(i.gapc_update_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapc_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_process_op
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_start_enc_cmd
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_ltk_req_rsp
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_handle_enc_change_evt
</UL>

<P><STRONG><a name="[179]"></a>gapm_activity_create_cmd_handler</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, gapm_actv.o(i.gapm_activity_create_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = gapm_activity_create_cmd_handler &rArr; gapm_scan_create &rArr; gapm_actv_created &rArr; gapm_addr_set_rand_addr &rArr; gapm_addr_fsm &rArr; gapm_addr_renew_next_addr &rArr;  gapm_addr_fsm (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_scan_create
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_per_sync_create
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init_create
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[10a]"></a>gapm_activity_created_ind_handler</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, m_al_activity.o(i.gapm_activity_created_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gapm_activity_created_ind_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_scan_created_ind_handler
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_created_ind_handler
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_adv_created_ind_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_al_task.o(.constdata)
</UL>
<P><STRONG><a name="[17c]"></a>gapm_activity_delete_cmd_handler</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, gapm_actv.o(i.gapm_activity_delete_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gapm_activity_delete_cmd_handler &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_get_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[17a]"></a>gapm_activity_start_cmd_handler</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, gapm_actv.o(i.gapm_activity_start_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gapm_activity_start_cmd_handler &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[17b]"></a>gapm_activity_stop_cmd_handler</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, gapm_actv.o(i.gapm_activity_stop_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gapm_activity_stop_cmd_handler &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_get_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[10b]"></a>gapm_activity_stopped_ind_handler</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, m_al_activity.o(i.gapm_activity_stopped_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gapm_activity_stopped_ind_handler &rArr; m_al_adv_stopped_ind_handler &rArr; m_al_adv_continue &rArr; m_al_activity_cmd_send &rArr; m_al_activity_cmd_exec
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_scan_stopped_ind_handler
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_stopped_ind_handler
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_adv_stopped_ind_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_al_task.o(.constdata)
</UL>
<P><STRONG><a name="[40a]"></a>gapm_actv_alloc</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gapm_actv.o(i.gapm_actv_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapm_actv_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_scan_create
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_per_sync_create
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init_create
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_create
</UL>

<P><STRONG><a name="[40b]"></a>gapm_actv_created</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, gapm_actv.o(i.gapm_actv_created))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gapm_actv_created &rArr; gapm_addr_set_rand_addr &rArr; gapm_addr_fsm &rArr; gapm_addr_renew_next_addr &rArr;  gapm_addr_fsm (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_addr_set_rand_addr
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_scan_create
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_per_sync_create
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init_create
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_cmd_cmp_evt_creating_handler
</UL>

<P><STRONG><a name="[40e]"></a>gapm_actv_deleted</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, gapm_actv.o(i.gapm_actv_deleted))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gapm_actv_deleted &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_get_next
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_free
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_cmd_cmp_evt_adv_handler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_scan_delete
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_per_sync_delete
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init_delete
</UL>

<P><STRONG><a name="[412]"></a>gapm_actv_get_hci_own_addr_type</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gapm_actv.o(i.gapm_actv_get_hci_own_addr_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gapm_actv_get_hci_own_addr_type
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_address_type
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_scan_send_hci_le_set_ext_scan_param_cmd
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init_send_hci_le_ext_create_con_cmd
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_send_hci_le_set_ext_adv_param_cmd
</UL>

<P><STRONG><a name="[414]"></a>gapm_actv_init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, gapm_actv.o(i.gapm_actv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gapm_actv_init &rArr; gapm_actv_free &rArr; gapm_scan_actv_clean &rArr; gapm_scan_clear_fragments
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_free
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init
</UL>

<P><STRONG><a name="[415]"></a>gapm_actv_rand_addr_set_ind</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gapm_actv.o(i.gapm_actv_rand_addr_set_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gapm_actv_rand_addr_set_ind &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_addr_fsm
</UL>

<P><STRONG><a name="[416]"></a>gapm_actv_retrieve_cmd_cmp_evt</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gapm_actv.o(i.gapm_actv_retrieve_cmd_cmp_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapm_actv_retrieve_cmd_cmp_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_cmd_cmp_evt_scan_handler
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_cmd_cmp_evt_per_sync_handler
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_cmd_cmp_evt_init_handler
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_cmd_cmp_evt_adv_handler
</UL>

<P><STRONG><a name="[418]"></a>gapm_actv_started</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gapm_actv.o(i.gapm_actv_started))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gapm_actv_started &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_cmd_cmp_evt_scan_handler
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_cmd_cmp_evt_per_sync_handler
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_cmd_cmp_evt_init_handler
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_cmd_cmp_evt_starting_handler
</UL>

<P><STRONG><a name="[3d9]"></a>gapm_actv_stopped</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, gapm_actv.o(i.gapm_actv_stopped))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gapm_actv_stopped &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_send_stopped_ind
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_get_next
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_scan_timeout_evt_handler
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_per_adv_sync_lost_evt_handler
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_per_adv_sync_est_evt_handler
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_cmd_cmp_evt_scan_handler
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_cmd_cmp_evt_per_sync_handler
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_cmd_cmp_evt_init_handler
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_adv_set_term_evt_handler
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_cmp_evt_handler
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_cmd_cmp_evt_adv_handler
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init_connection_ind
</UL>

<P><STRONG><a name="[41b]"></a>gapm_addr_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gapm_addr.o(i.gapm_addr_init))
<BR><BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init
</UL>

<P><STRONG><a name="[17f]"></a>gapm_addr_renew_cmd_handler</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gapm_addr.o(i.gapm_addr_renew_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gapm_addr_renew_cmd_handler &rArr; gapm_addr_renew_next_addr &rArr;  gapm_addr_fsm (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_addr_renew_next_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[180]"></a>gapm_addr_renew_to_ind_handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gapm_addr.o(i.gapm_addr_renew_to_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gapm_addr_renew_to_ind_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[40d]"></a>gapm_addr_set_rand_addr</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, gapm_addr.o(i.gapm_addr_set_rand_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gapm_addr_set_rand_addr &rArr; gapm_addr_fsm &rArr; gapm_addr_renew_next_addr &rArr;  gapm_addr_fsm (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set (via Veneer)
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_active (via Veneer)
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_get_task_from_id
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_get_local_addr
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_addr_send_dev_bdaddr_ind
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_addr_fsm
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_created
</UL>

<P><STRONG><a name="[3fe]"></a>gapm_adv_create</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, gapm_adv.o(i.gapm_adv_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gapm_adv_create &rArr; gapm_adv_send_hci_le_set_ext_adv_param_cmd &rArr; gapm_actv_get_hci_own_addr_type
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_requester
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_alloc
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_send_hci_le_set_ext_adv_param_cmd
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_check_param
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_activity_create_cmd_handler
</UL>

<P><STRONG><a name="[17e]"></a>gapm_auto_conn_to_ind_handler</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gapm_init.o(i.gapm_auto_conn_to_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapm_auto_conn_to_ind_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[182]"></a>gapm_cmp_evt_handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gapm_addr.o(i.gapm_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gapm_cmp_evt_handler &rArr; gapm_addr_fsm &rArr; gapm_addr_renew_next_addr &rArr;  gapm_addr_fsm (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_addr_fsm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[430]"></a>gapm_con_cleanup</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gapm.o(i.gapm_con_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gapm_con_cleanup &rArr; l2cm_cleanup &rArr; l2cc_cleanup &rArr; l2cc_op_complete &rArr; l2cc_send_cmp_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_latency_enable
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_cleanup
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cm_cleanup
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_cleanup
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_con_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disc_cmp_evt_handler
</UL>

<P><STRONG><a name="[435]"></a>gapm_con_create</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, gapm.o(i.gapm_con_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gapm_con_create &rArr; gapc_con_create
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_create
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cm_create
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_create
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_address_type
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_con_create
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enh_con_cmp_evt_handler
</UL>

<P><STRONG><a name="[3dd]"></a>gapm_con_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gapm.o(i.gapm_con_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gapm_con_enable &rArr; gattc_con_enable &rArr; atts_process_pdu &rArr; atts_clear_rsp_data
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_con_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_connection_cfm_handler
</UL>

<P><STRONG><a name="[181]"></a>gapm_dev_bdaddr_ind_handler</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gapm_addr.o(i.gapm_dev_bdaddr_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapm_dev_bdaddr_ind_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_forward (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[45e]"></a>gapm_dle_val_check</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gapm.o(i.gapm_dle_val_check))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_dev_config_cmd_handler
</UL>

<P><STRONG><a name="[10c]"></a>gapm_ext_adv_report_ind_handler</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, m_al_scan.o(i.gapm_ext_adv_report_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = gapm_ext_adv_report_ind_handler &rArr; m_fnd_pbrs_check_adv_report &rArr; m_fnd_pbrs_scan_report &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_adv_report_ind_user_handler
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_check_adv_report
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_al_task.o(.constdata)
</UL>
<P><STRONG><a name="[175]"></a>gapm_gen_dh_key_cmd_handler</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, gapm_smp.o(i.gapm_gen_dh_key_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gapm_gen_dh_key_cmd_handler &rArr; gapm_process_op &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller (via Veneer)
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[107]"></a>gapm_gen_dh_key_ind_handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, m_al_sec.o(i.gapm_gen_dh_key_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gapm_gen_dh_key_ind_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_al_task.o(.constdata)
</UL>
<P><STRONG><a name="[173]"></a>gapm_gen_rand_addr_cmd_handler</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gapm_smp.o(i.gapm_gen_rand_addr_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gapm_gen_rand_addr_cmd_handler &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_smp_rand_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[413]"></a>gapm_get_address_type</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gapm.o(i.gapm_get_address_type))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_con_create
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_send_continue
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_adv_set_term_evt_handler
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_dev_info_cmd_handler
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init_create
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init_connection_ind
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_get_hci_own_addr_type
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_construct_id_addr_info_pdu
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_send_hci_le_set_ext_adv_param_cmd
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_check_param
</UL>

<P><STRONG><a name="[3e7]"></a>gapm_get_att_handle</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, gapm.o(i.gapm_get_att_handle))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_att_info_req_ind_handler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_set_dev_info_cfm_handler
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_dev_info_cfm_handler
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_dev_config_cmd_handler
</UL>

<P><STRONG><a name="[73a]"></a>gapm_get_bdaddr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gapm.o(i.gapm_get_bdaddr))
<BR><BR>[Called By]<UL><LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_send_continue
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_construct_id_addr_info_pdu
</UL>

<P><STRONG><a name="[171]"></a>gapm_get_dev_info_cmd_handler</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, gapm_cfg.o(i.gapm_get_dev_info_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gapm_get_dev_info_cmd_handler &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller (via Veneer)
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_basic_cmd_send_2_controller (via Veneer)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_address_type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[465]"></a>gapm_get_irk</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gapm.o(i.gapm_get_irk))
<BR><BR>[Called By]<UL><LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_send_continue
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_smp_rand_rsp
</UL>

<P><STRONG><a name="[727]"></a>gapm_get_local_public_key</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gapm.o(i.gapm_get_local_public_key))
<BR><BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_confirm_gen_rand
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_public_key_pdu
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_rsp_pdu
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_rand_pdu
</UL>

<P><STRONG><a name="[360]"></a>gapm_get_max_mtu</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gapm.o(i.gapm_get_max_mtu))
<BR><BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_header_check
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_dbg_pdu_send_cmd_handler
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_exc_mtu_cmd_handler
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_mtu_exc_req
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_pack
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_exc_mtu_rsp_handler
</UL>

<P><STRONG><a name="[40f]"></a>gapm_get_operation</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gapm.o(i.gapm_get_operation))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_local_ver_info_cmd_cmp_evt_handler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_bd_addr_cmd_cmp_evt_handler
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_max_adv_data_len_cmd_cmp_evt_handler
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_wlst_size_cmd_cmp_evt_handler
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_tx_pwr_cmd_cmp_evt_handler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_rf_path_comp_cmd_cmp_evt_handler
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_ral_size_cmd_cmp_evt_handler
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_ral_addr_cmd_cmp_evt_handler
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_pal_size_cmd_cmp_evt_handler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_nb_supp_adv_sets_cmd_cmp_evt_handler
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_local_p256_public_key_cmp_evt_handler
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_adv_chnl_tx_pw_cmd_cmp_evt_handler
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_generate_dhkey_cmp_evt_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_gen_dhkey_stat_evt_handler
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_cmd_cmp_evt_list_handler
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_addr_fsm
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_stopped
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_retrieve_cmd_cmp_evt
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_deleted
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_smp_rand_rsp
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_smp_encrypt_rsp
</UL>

<P><STRONG><a name="[176]"></a>gapm_get_pub_key_cmd_handler</STRONG> (Thumb, 146 bytes, Stack size 88 bytes, gapm_smp.o(i.gapm_get_pub_key_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = gapm_get_pub_key_cmd_handler &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_basic_cmd_send_2_controller (via Veneer)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_requester
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[184]"></a>gapm_get_ral_addr_cmd_handler</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, gapm_list.o(i.gapm_get_ral_addr_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gapm_get_ral_addr_cmd_handler &rArr; gapm_process_op &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller (via Veneer)
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[422]"></a>gapm_get_requester</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gapm.o(i.gapm_get_requester))
<BR><BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_src_id_get (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_test_end_cmd_cmp_evt_handler
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_local_ver_info_cmd_cmp_evt_handler
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_max_adv_data_len_cmd_cmp_evt_handler
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_tx_pwr_cmd_cmp_evt_handler
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_suggted_dft_data_len_cmd_cmp_evt_handler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_rf_path_comp_cmd_cmp_evt_handler
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_ral_addr_cmd_cmp_evt_handler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_nb_supp_adv_sets_cmd_cmp_evt_handler
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_max_data_len_cmd_cmp_evt_handler
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_local_p256_public_key_cmp_evt_handler
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_adv_chnl_tx_pw_cmd_cmp_evt_handler
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_generate_dhkey_cmp_evt_handler
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_pub_key_cmd_handler
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_scan_create
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_per_sync_create
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init_create
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_create
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_smp_resolv_op_cont
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_smp_rand_rsp
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_smp_encrypt_rsp
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_list_send_list_size_ind
</UL>

<P><STRONG><a name="[440]"></a>gapm_init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, gapm.o(i.gapm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gapm_init &rArr; gapc_init &rArr; gapc_cleanup &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_create (via Veneer)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_init
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_addr_init
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_init
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_operation_cleanup
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_hl_init_imp
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_hl_reset
</UL>

<P><STRONG><a name="[443]"></a>gapm_init_attr</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, gapm.o(i.gapm_init_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = gapm_init_attr &rArr; attm_svc_create_db &rArr; attmdb_add_service &rArr; attmdb_svc_init &rArr; attm_uuid16_comp &rArr; attm_uuid_comp &rArr; attm_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_svc_create_db
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_dev_config_cmd_handler
</UL>

<P><STRONG><a name="[444]"></a>gapm_init_connection_ind</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, gapm_init.o(i.gapm_init_connection_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gapm_init_connection_ind &rArr; gapm_actv_stopped &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_address_type
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_set_local_addr
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_stopped
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init_send_hci_le_ext_create_con_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enh_con_cmp_evt_handler
</UL>

<P><STRONG><a name="[402]"></a>gapm_init_create</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, gapm_init.o(i.gapm_init_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = gapm_init_create &rArr; gapm_actv_created &rArr; gapm_addr_set_rand_addr &rArr; gapm_addr_fsm &rArr; gapm_addr_renew_next_addr &rArr;  gapm_addr_fsm (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_requester
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_address_type
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_is_addr_type_valid
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_created
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_activity_create_cmd_handler
</UL>

<P><STRONG><a name="[447]"></a>gapm_is_addr_type_valid</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gapm_addr.o(i.gapm_is_addr_type_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapm_is_addr_type_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_scan_create
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init_create
</UL>

<P><STRONG><a name="[749]"></a>gapm_is_legacy_pairing_supp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gapm.o(i.gapm_is_legacy_pairing_supp))
<BR><BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_security_req_send
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_start
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_rsp
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_sec_req_pdu
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_rsp_pdu
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_req_pdu
</UL>

<P><STRONG><a name="[489]"></a>gapm_is_pref_con_param_pres</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gapm.o(i.gapm_is_pref_con_param_pres))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
</UL>

<P><STRONG><a name="[748]"></a>gapm_is_sec_con_pairing_supp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gapm.o(i.gapm_is_sec_con_pairing_supp))
<BR><BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_security_req_send
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_start
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_rsp
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_req_pdu
</UL>

<P><STRONG><a name="[183]"></a>gapm_list_set_cmd_handler</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, gapm_list.o(i.gapm_list_set_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gapm_list_set_cmd_handler &rArr; gapm_process_op &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_basic_cmd_send_2_controller (via Veneer)
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[411]"></a>gapm_per_sync_clear_fragments</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gapm_per_sync.o(i.gapm_per_sync_clear_fragments))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapm_per_sync_clear_fragments
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free (via Veneer)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_per_adv_report_evt_handler
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_free
</UL>

<P><STRONG><a name="[401]"></a>gapm_per_sync_create</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gapm_per_sync.o(i.gapm_per_sync_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = gapm_per_sync_create &rArr; gapm_actv_created &rArr; gapm_addr_set_rand_addr &rArr; gapm_addr_fsm &rArr; gapm_addr_renew_next_addr &rArr;  gapm_addr_fsm (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_requester
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_created
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_activity_create_cmd_handler
</UL>

<P><STRONG><a name="[3fd]"></a>gapm_process_op</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, gapm.o(i.gapm_process_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gapm_process_op &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_src_id_get (via Veneer)
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_update_state
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_error_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_use_enc_block_cmd_handler
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_irk_cmd_handler
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_dev_config_cmd_handler
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_channel_map_cmd_handler
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_adv_data_cmd_handler
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_resolv_addr_cmd_handler
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_profile_task_add_cmd_handler
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_list_set_cmd_handler
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_ral_addr_cmd_handler
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_pub_key_cmd_handler
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_dev_info_cmd_handler
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_gen_rand_addr_cmd_handler
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_gen_dh_key_cmd_handler
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_addr_renew_cmd_handler
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_activity_stop_cmd_handler
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_activity_start_cmd_handler
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_activity_delete_cmd_handler
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_activity_create_cmd_handler
</UL>

<P><STRONG><a name="[185]"></a>gapm_profile_task_add_cmd_handler</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, gapm_cfg.o(i.gapm_profile_task_add_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gapm_profile_task_add_cmd_handler &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_add_profile
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[108]"></a>gapm_pub_key_ind_handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, m_al_sec.o(i.gapm_pub_key_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gapm_pub_key_ind_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_al_task.o(.constdata)
</UL>
<P><STRONG><a name="[16e]"></a>gapm_reset_cmd_handler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gapm_cfg.o(i.gapm_reset_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = gapm_reset_cmd_handler &rArr; rwble_hl_reset &rArr; l2cm_init &rArr; l2cc_init &rArr; l2cc_cleanup &rArr; l2cc_op_complete &rArr; l2cc_send_cmp_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_reset (via Veneer)
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_hl_reset
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_error_evt
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_op_reset_continue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[172]"></a>gapm_resolv_addr_cmd_handler</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gapm_smp.o(i.gapm_resolv_addr_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gapm_resolv_addr_cmd_handler &rArr; gapm_smp_resolv_op_cont &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_smp_resolv_op_cont
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[410]"></a>gapm_scan_actv_clean</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gapm_scan.o(i.gapm_scan_actv_clean))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gapm_scan_actv_clean &rArr; gapm_scan_clear_fragments
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_scan_clear_fragments
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_free
</UL>

<P><STRONG><a name="[3ff]"></a>gapm_scan_create</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, gapm_scan.o(i.gapm_scan_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = gapm_scan_create &rArr; gapm_actv_created &rArr; gapm_addr_set_rand_addr &rArr; gapm_addr_fsm &rArr; gapm_addr_renew_next_addr &rArr;  gapm_addr_fsm (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_requester
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_is_addr_type_valid
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_created
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_activity_create_cmd_handler
</UL>

<P><STRONG><a name="[400]"></a>gapm_send_complete_evt</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, gapm.o(i.gapm_send_complete_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_requester
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_operation_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_test_end_cmd_cmp_evt_handler
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_local_ver_info_cmd_cmp_evt_handler
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_max_adv_data_len_cmd_cmp_evt_handler
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_wlst_size_cmd_cmp_evt_handler
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_tx_pwr_cmd_cmp_evt_handler
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_suggted_dft_data_len_cmd_cmp_evt_handler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_rf_path_comp_cmd_cmp_evt_handler
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_ral_size_cmd_cmp_evt_handler
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_ral_addr_cmd_cmp_evt_handler
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_pal_size_cmd_cmp_evt_handler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_nb_supp_adv_sets_cmd_cmp_evt_handler
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_max_data_len_cmd_cmp_evt_handler
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_local_p256_public_key_cmp_evt_handler
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_adv_chnl_tx_pw_cmd_cmp_evt_handler
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_generate_dhkey_cmp_evt_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_gen_dhkey_stat_evt_handler
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_cmd_cmp_evt_list_handler
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_basic_cmd_cmp_evt_rl_cfg_handler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_basic_cmd_cmp_evt_cfg_handler
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_irk_cmd_handler
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_dev_config_cmd_handler
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_channel_map_cmd_handler
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_adv_data_cmd_handler
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_profile_task_add_cmd_handler
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_pub_key_cmd_handler
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_dev_info_cmd_handler
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_gen_rand_addr_cmd_handler
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_cmd_cmp_evt_adv_handler
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_addr_renew_next_addr
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_stopped
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_started
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_rand_addr_set_ind
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_deleted
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_created
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_activity_stop_cmd_handler
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_activity_start_cmd_handler
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_activity_delete_cmd_handler
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_activity_create_cmd_handler
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_smp_resolv_op_cont
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_smp_rand_rsp
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_smp_encrypt_rsp
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_op_setup_continue
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_op_reset_continue
</UL>

<P><STRONG><a name="[450]"></a>gapm_send_error_evt</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gapm.o(i.gapm_send_error_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapm_send_error_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_reset_cmd_handler
</UL>

<P><STRONG><a name="[17d]"></a>gapm_set_adv_data_cmd_handler</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, gapm_adv.o(i.gapm_set_adv_data_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gapm_set_adv_data_cmd_handler &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_set_data
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_check_data_sanity
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[170]"></a>gapm_set_channel_map_cmd_handler</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, gapm_cfg.o(i.gapm_set_channel_map_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gapm_set_channel_map_cmd_handler &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller (via Veneer)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[16f]"></a>gapm_set_dev_config_cmd_handler</STRONG> (Thumb, 410 bytes, Stack size 104 bytes, gapm_cfg.o(i.gapm_set_dev_config_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = gapm_set_dev_config_cmd_handler &rArr; gattm_init_attr &rArr; attm_svc_create_db &rArr; attmdb_add_service &rArr; attmdb_svc_init &rArr; attm_uuid16_comp &rArr; attm_uuid_comp &rArr; attm_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_max_mtu
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_max_mps
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_init_attr
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_destroy
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_att_update_perm
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_init
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init_attr
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_att_handle
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_dle_val_check
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_op_setup_continue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[188]"></a>gapm_set_irk_cmd_handler</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gapm_cfg.o(i.gapm_set_irk_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gapm_set_irk_cmd_handler &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[461]"></a>gapm_set_max_mps</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gapm.o(i.gapm_set_max_mps))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_dev_config_cmd_handler
</UL>

<P><STRONG><a name="[460]"></a>gapm_set_max_mtu</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gapm.o(i.gapm_set_max_mtu))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_dev_config_cmd_handler
</UL>

<P><STRONG><a name="[48c]"></a>gapm_svc_chg_en</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gapm.o(i.gapm_svc_chg_en))
<BR><BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_init_attr
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_svc_changed_cmd_handler
</UL>

<P><STRONG><a name="[44d]"></a>gapm_update_state</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gapm.o(i.gapm_update_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_operation_cleanup
</UL>

<P><STRONG><a name="[174]"></a>gapm_use_enc_block_cmd_handler</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, gapm_smp.o(i.gapm_use_enc_block_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gapm_use_enc_block_cmd_handler &rArr; gapm_process_op &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_smp_rand_req
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_smp_encrypt_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[106]"></a>gapm_use_enc_block_ind_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, m_al_sec.o(i.gapm_use_enc_block_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gapm_use_enc_block_ind_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_result_handler (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_al_task.o(.constdata)
</UL>
<P><STRONG><a name="[46a]"></a>gatt_add_client</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, gatt_api.o(i.gatt_add_client))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = gatt_add_client &rArr; gatt_add_client_uuid &rArr; gatt_write_peer_svc_to_flash &rArr; flash_write &rArr; flash_protect_enable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_profile_task_add
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_add_client_uuid
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_remote_central_init
</UL>

<P><STRONG><a name="[46c]"></a>gatt_add_client_uuid</STRONG> (Thumb, 704 bytes, Stack size 280 bytes, gatt_api.o(i.gatt_add_client_uuid))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = gatt_add_client_uuid &rArr; gatt_write_peer_svc_to_flash &rArr; flash_write &rArr; flash_protect_enable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_write_peer_svc_to_flash
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_regist_peer_prf_info
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_clr_peer_svc
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_add_client
</UL>

<P><STRONG><a name="[2e1]"></a>gatt_add_service</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, gatt_api.o(i.gatt_add_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gatt_add_service &rArr; gatt_profile_task_add
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_profile_task_add
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Google_Gatt_Add_Service
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_OTA_gatt_add_service
</UL>

<P><STRONG><a name="[471]"></a>gatt_client_enable_ntf</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, gatt_api.o(i.gatt_client_enable_ntf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gatt_client_enable_ntf &rArr; gatt_client_write_req_with_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_client_write_req_with_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_remote_central_msg_handler
</UL>

<P><STRONG><a name="[473]"></a>gatt_client_write_cmd</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gatt_api.o(i.gatt_client_write_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gatt_client_write_cmd &rArr; gatt_client_write_cmd_with_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_client_write_cmd_with_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_remote_gatt_send
</UL>

<P><STRONG><a name="[474]"></a>gatt_client_write_cmd_with_handle</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, gatt_api.o(i.gatt_client_write_cmd_with_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gatt_client_write_cmd_with_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_client_write_cmd
</UL>

<P><STRONG><a name="[472]"></a>gatt_client_write_req_with_handle</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, gatt_api.o(i.gatt_client_write_req_with_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gatt_client_write_req_with_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_client_enable_ntf
</UL>

<P><STRONG><a name="[475]"></a>gatt_discovery_all_peer_svc</STRONG> (Thumb, 178 bytes, Stack size 504 bytes, gatt_api.o(i.gatt_discovery_all_peer_svc))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = gatt_discovery_all_peer_svc &rArr; gatt_load_peer_svc_from_flash &rArr; flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_load_peer_svc_from_flash
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_regist_peer_prf_info
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_check_peer_svc
</UL>
<BR>[Called By]<UL><LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_remote_connected
</UL>

<P><STRONG><a name="[47c]"></a>gatt_get_free_svc_id</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gatt_api.o(i.gatt_get_free_svc_id))
<BR><BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_profile_task_add
</UL>

<P><STRONG><a name="[476]"></a>gatt_load_peer_svc_from_flash</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, user_bond_manage.o(i.gatt_load_peer_svc_from_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gatt_load_peer_svc_from_flash &rArr; flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read (via Veneer)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_discovery_all_peer_svc
</UL>

<P><STRONG><a name="[47a]"></a>gatt_mtu_exchange_req</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gatt_api.o(i.gatt_mtu_exchange_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gatt_mtu_exchange_req
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proj_ble_gap_evt_func
</UL>

<P><STRONG><a name="[2a9]"></a>gatt_notification</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gatt_api.o(i.gatt_notification))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gatt_notification &rArr; gatt_notification_with_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_notification_with_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_SendData
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Google_Task
</UL>

<P><STRONG><a name="[47b]"></a>gatt_notification_with_handle</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, gatt_api.o(i.gatt_notification_with_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gatt_notification_with_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_notification
</UL>

<P><STRONG><a name="[46b]"></a>gatt_profile_task_add</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, gatt_api.o(i.gatt_profile_task_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gatt_profile_task_add
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_set_evt_func
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_get_free_svc_id
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_add_service
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_init
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_add_client
</UL>

<P><STRONG><a name="[46e]"></a>gatt_write_peer_svc_to_flash</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, user_bond_manage.o(i.gatt_write_peer_svc_to_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gatt_write_peer_svc_to_flash &rArr; flash_write &rArr; flash_protect_enable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write (via Veneer)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read (via Veneer)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase (via Veneer)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_add_client_uuid
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_msg_default_handler_imp
</UL>

<P><STRONG><a name="[47f]"></a>gattc_cleanup</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, gattc.o(i.gattc_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gattc_cleanup &rArr; gattc_send_complete_evt &rArr; gattc_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear (via Veneer)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free (via Veneer)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_clear_rsp_data
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_clear_read_cache
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_clear_prep_data
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_operation_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_init
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_cleanup
</UL>

<P><STRONG><a name="[10d]"></a>gattc_cmp_evt_handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, m_al_con.o(i.gattc_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gattc_cmp_evt_handler &rArr; m_al_con_pdu_send_cont
</UL>
<BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_pdu_send_cont
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_al_task.o(.constdata)
</UL>
<P><STRONG><a name="[439]"></a>gattc_con_enable</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gattc.o(i.gattc_con_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gattc_con_enable &rArr; atts_process_pdu &rArr; atts_clear_rsp_data
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_process_pdu
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_update_state
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_con_enable
</UL>

<P><STRONG><a name="[484]"></a>gattc_create</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, gattc.o(i.gattc_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gattc_create &rArr; gattc_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init (via Veneer)
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_update_state
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_create
</UL>

<P><STRONG><a name="[36c]"></a>gattc_get_mtu</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gattc.o(i.gattc_get_mtu))
<BR><BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_pdu_send_cont
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_header_check
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cmd_handler
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_send_event
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_req
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_mult_req
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_by_type_req
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_by_grp_type_req
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_blob_req
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_info_req
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_by_type_req
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_rsp_handler
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_by_type_rsp_handler
</UL>

<P><STRONG><a name="[362]"></a>gattc_get_operation</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gattc.o(i.gattc_get_operation))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_cmp_evt_handler
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_disc_svc_ind_handler
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_disc_svc_incl_ind_handler
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_disc_char_ind_handler
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_disc_char_desc_ind_handler
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_sign_ind_handler
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_l2cc_pdu_recv_handler
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_wr_rsp_handler
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_rsp_handler
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_mult_rsp_handler
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_by_type_rsp_handler
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_by_grp_type_rsp_handler
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_prep_wr_rsp_handler
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_find_info_rsp_handler
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_find_by_type_rsp_handler
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_exe_wr_rsp_handler
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_exc_mtu_rsp_handler
</UL>

<P><STRONG><a name="[363]"></a>gattc_get_operation_ptr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gattc.o(i.gattc_get_operation_ptr))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_sdp_svc_disc_cmd_handler
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_process_op
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_sign_ind_handler
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_read_ind
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_rsp_handler
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_mult_rsp_handler
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_by_type_rsp_handler
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_by_grp_type_rsp_handler
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_prep_wr_rsp_handler
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_find_info_rsp_handler
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_find_by_type_rsp_handler
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_exe_wr_rsp_handler
</UL>

<P><STRONG><a name="[364]"></a>gattc_get_requester</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gattc.o(i.gattc_get_requester))
<BR><BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_src_id_get (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_read_ind
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_mult_rsp_handler
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_by_type_rsp_handler
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_by_grp_type_rsp_handler
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_find_info_rsp_handler
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_find_by_type_rsp_handler
</UL>

<P><STRONG><a name="[486]"></a>gattc_init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, gattc.o(i.gattc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gattc_init &rArr; gattc_cleanup &rArr; gattc_send_complete_evt &rArr; gattc_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_create (via Veneer)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_init
</UL>

<P><STRONG><a name="[10e]"></a>gattc_read_req_ind_handler</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, m_al_con.o(i.gattc_read_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gattc_read_req_ind_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_al_task.o(.constdata)
</UL>
<P><STRONG><a name="[365]"></a>gattc_reschedule_operation</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, gattc.o(i.gattc_reschedule_operation))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gattc_reschedule_operation
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_src_id_get (via Veneer)
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_forward (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_rsp_handler
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_by_type_rsp_handler
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_by_grp_type_rsp_handler
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_prep_wr_rsp_handler
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_find_info_rsp_handler
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_find_by_type_rsp_handler
</UL>

<P><STRONG><a name="[35f]"></a>gattc_send_complete_evt</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, gattc.o(i.gattc_send_complete_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gattc_send_complete_evt &rArr; gattc_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_update_state
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_requester
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_operation_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cleanup
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_cmp_evt_handler
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cmd_handler
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_timeout_handler
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_evt_cmd_handler
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_sdp_svc_disc_cmd_handler
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_reg_to_peer_evt_cmd_handler
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_cmd_handler
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_disc_cmd_handler
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_sign_ind_handler
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_l2cc_pdu_recv_handler
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_wr_rsp_handler
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_rsp_handler
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_mult_rsp_handler
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_by_type_rsp_handler
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_by_grp_type_rsp_handler
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_prep_wr_rsp_handler
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_find_info_rsp_handler
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_find_by_type_rsp_handler
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_exe_wr_rsp_handler
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_exc_mtu_rsp_handler
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_err_rsp_handler
</UL>

<P><STRONG><a name="[487]"></a>gattc_send_error_evt</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, gattc.o(i.gattc_send_error_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gattc_send_error_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_svc_changed_cmd_handler
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_process_op
</UL>

<P><STRONG><a name="[361]"></a>gattc_set_mtu</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, gattc.o(i.gattc_set_mtu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gattc_set_mtu
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_dest_task
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_mtu_exc_req
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_exc_mtu_rsp_handler
</UL>

<P><STRONG><a name="[488]"></a>gattc_set_operation_ptr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gattc.o(i.gattc_set_operation_ptr))
<BR><BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_process_op
</UL>

<P><STRONG><a name="[483]"></a>gattc_update_state</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gattc.o(i.gattc_update_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gattc_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_create
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_con_enable
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_process_op
</UL>

<P><STRONG><a name="[10f]"></a>gattc_write_req_ind_handler</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, m_al_con.o(i.gattc_write_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gattc_write_req_ind_handler &rArr; m_al_handle_rx_pkt &rArr; m_al_con_disconnect
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_handle_rx_pkt
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_pdu_send_cont
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_al_task.o(.constdata)
</UL>
<P><STRONG><a name="[433]"></a>gattm_cleanup</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gattm.o(i.gattm_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gattm_cleanup &rArr; gattc_cleanup &rArr; gattc_send_complete_evt &rArr; gattc_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_con_cleanup
</UL>

<P><STRONG><a name="[437]"></a>gattm_create</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gattm.o(i.gattm_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gattm_create &rArr; gattc_create &rArr; gattc_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_create
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_con_create
</UL>

<P><STRONG><a name="[491]"></a>gattm_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gattm.o(i.gattm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gattm_init &rArr; gattc_init &rArr; gattc_cleanup &rArr; gattc_send_complete_evt &rArr; gattc_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_create (via Veneer)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_hl_init_imp
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_hl_reset
</UL>

<P><STRONG><a name="[45f]"></a>gattm_init_attr</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, gattm.o(i.gattm_init_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = gattm_init_attr &rArr; attm_svc_create_db &rArr; attmdb_add_service &rArr; attmdb_svc_init &rArr; attm_uuid16_comp &rArr; attm_uuid_comp &rArr; attm_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_svc_create_db
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_att_set_value
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_svc_chg_en
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_dev_config_cmd_handler
</UL>

<P><STRONG><a name="[47e]"></a>gattm_svc_get_start_hdl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gattm.o(i.gattm_svc_get_start_hdl))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_svc_changed_cmd_handler
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_att_info_req_ind_handler
</UL>

<P><STRONG><a name="[265]"></a>generic_dtt_server_msg_handler</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, generic_dtt_server.o(i.generic_dtt_server_msg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = generic_dtt_server_msg_handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sig_mesh_led.o(.data)
</UL>
<P><STRONG><a name="[267]"></a>generic_level_server_msg_handler</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, generic_level_server.o(i.generic_level_server_msg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = generic_level_server_msg_handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sig_mesh_led.o(.data)
</UL>
<P><STRONG><a name="[264]"></a>generic_onoff_server_msg_handler</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, generic_onoff_server.o(i.generic_onoff_server_msg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = generic_onoff_server_msg_handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sig_mesh_led.o(.data)
</UL>
<P><STRONG><a name="[266]"></a>generic_ponoff_server_msg_handler</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, generic_ponoff_setup_server.o(i.generic_ponoff_server_msg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = generic_ponoff_server_msg_handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sig_mesh_led.o(.data)
</UL>
<P><STRONG><a name="[715]"></a>get_gatt_default_itf</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gatt_api.o(i.get_gatt_default_itf))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get_imp
</UL>

<P><STRONG><a name="[3ab]"></a>get_stored_info_req</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, app_proj_event.o(i.get_stored_info_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_stored_info_req
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sec_init
</UL>

<P><STRONG><a name="[4aa]"></a>handle_set_message_validate</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, model_common.o(i.handle_set_message_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = handle_set_message_validate &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_transition_time_is_valid
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_transition_time_decode
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
</UL>

<P><STRONG><a name="[14a]"></a>hci_basic_cmd_cmp_evt_cfg_handler</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, gapm_cfg.o(i.hci_basic_cmd_cmp_evt_cfg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = hci_basic_cmd_cmp_evt_cfg_handler &rArr; gapm_op_setup_continue &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_op_setup_continue
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_op_reset_continue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[161]"></a>hci_basic_cmd_cmp_evt_rl_cfg_handler</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gapm_cfg.o(i.hci_basic_cmd_cmp_evt_rl_cfg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = hci_basic_cmd_cmp_evt_rl_cfg_handler &rArr; gapm_op_setup_continue &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_op_setup_continue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[16b]"></a>hci_le_adv_set_term_evt_handler</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, gapm_adv.o(i.hci_le_adv_set_term_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = hci_le_adv_set_term_evt_handler &rArr; gapm_actv_stopped &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_address_type
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_set_local_addr
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_stopped
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[1c8]"></a>hci_le_ch_sel_algo_evt_handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gapc_hci.o(i.hci_le_ch_sel_algo_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hci_le_ch_sel_algo_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[15d]"></a>hci_le_cmd_cmp_evt_addr_handler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, gapm_addr.o(i.hci_le_cmd_cmp_evt_addr_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = hci_le_cmd_cmp_evt_addr_handler &rArr; hci_le_cmd_cmp_evt_adv_handler &rArr; hci_le_cmd_cmp_evt_creating_handler &rArr; gapm_actv_created &rArr; gapm_addr_set_rand_addr &rArr; gapm_addr_fsm &rArr; gapm_addr_renew_next_addr &rArr;  gapm_addr_fsm (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_cmd_cmp_evt_adv_handler
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_addr_fsm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[156]"></a>hci_le_cmd_cmp_evt_adv_handler</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, gapm_adv.o(i.hci_le_cmd_cmp_evt_adv_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = hci_le_cmd_cmp_evt_adv_handler &rArr; hci_le_cmd_cmp_evt_creating_handler &rArr; gapm_actv_created &rArr; gapm_addr_set_rand_addr &rArr; gapm_addr_fsm &rArr; gapm_addr_renew_next_addr &rArr;  gapm_addr_fsm (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_stopped
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_retrieve_cmd_cmp_evt
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_deleted
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_cmd_cmp_evt_starting_handler
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_cmd_cmp_evt_creating_handler
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_set_data
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_send_hci_le_set_per_adv_en_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_cmd_cmp_evt_addr_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[15c]"></a>hci_le_cmd_cmp_evt_init_handler</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, gapm_init.o(i.hci_le_cmd_cmp_evt_init_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = hci_le_cmd_cmp_evt_init_handler &rArr; gapm_actv_stopped &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear (via Veneer)
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_stopped
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_started
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_retrieve_cmd_cmp_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[155]"></a>hci_le_cmd_cmp_evt_list_handler</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, gapm_list.o(i.hci_le_cmd_cmp_evt_list_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = hci_le_cmd_cmp_evt_list_handler &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller (via Veneer)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_list_add_next_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[15a]"></a>hci_le_cmd_cmp_evt_per_sync_handler</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gapm_per_sync.o(i.hci_le_cmd_cmp_evt_per_sync_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = hci_le_cmd_cmp_evt_per_sync_handler &rArr; gapm_actv_stopped &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_stopped
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_started
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_retrieve_cmd_cmp_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[159]"></a>hci_le_cmd_cmp_evt_scan_handler</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, gapm_scan.o(i.hci_le_cmd_cmp_evt_scan_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = hci_le_cmd_cmp_evt_scan_handler &rArr; gapm_actv_stopped &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_stopped
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_started
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_retrieve_cmd_cmp_evt
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_scan_send_hci_le_set_ext_scan_en_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[168]"></a>hci_le_enh_con_cmp_evt_handler</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gapm_actv.o(i.hci_le_enh_con_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = hci_le_enh_con_cmp_evt_handler &rArr; gapm_init_connection_ind &rArr; gapm_actv_stopped &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_con_create
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init_connection_ind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[163]"></a>hci_le_ext_adv_report_evt_handler</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, gapm_scan.o(i.hci_le_ext_adv_report_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = hci_le_ext_adv_report_evt_handler &rArr; gapm_scan_send_adv_report_ind &rArr; gapm_scan_filter_packet &rArr; gapm_scan_add_to_filter
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_scan_store_fragment
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_scan_send_adv_report_ind
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_scan_clear_fragments
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[162]"></a>hci_le_gen_dhkey_stat_evt_handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gapm_smp.o(i.hci_le_gen_dhkey_stat_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hci_le_gen_dhkey_stat_evt_handler &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[16a]"></a>hci_le_generate_dhkey_cmp_evt_handler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, gapm_smp.o(i.hci_le_generate_dhkey_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = hci_le_generate_dhkey_cmp_evt_handler &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_requester
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[166]"></a>hci_le_per_adv_report_evt_handler</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, gapm_per_sync.o(i.hci_le_per_adv_report_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hci_le_per_adv_report_evt_handler &rArr; gapm_per_sync_send_adv_report_ind
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_per_sync_clear_fragments
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_per_sync_send_adv_report_ind
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_per_sync_get_activity
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[165]"></a>hci_le_per_adv_sync_est_evt_handler</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, gapm_per_sync.o(i.hci_le_per_adv_sync_est_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = hci_le_per_adv_sync_est_evt_handler &rArr; gapm_actv_stopped &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_stopped
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_per_sync_get_activity
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[167]"></a>hci_le_per_adv_sync_lost_evt_handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gapm_per_sync.o(i.hci_le_per_adv_sync_lost_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hci_le_per_adv_sync_lost_evt_handler &rArr; gapm_actv_stopped &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_stopped
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_per_sync_get_activity
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[15e]"></a>hci_le_rd_adv_chnl_tx_pw_cmd_cmp_evt_handler</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gapm_cfg.o(i.hci_le_rd_adv_chnl_tx_pw_cmd_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = hci_le_rd_adv_chnl_tx_pw_cmd_cmp_evt_handler &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_requester
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[14c]"></a>hci_le_rd_buff_size_cmd_cmp_evt_handler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gapm_cfg.o(i.hci_le_rd_buff_size_cmd_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hci_le_rd_buff_size_cmd_cmp_evt_handler &rArr; gapm_op_reset_continue &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cm_set_link_layer_buff_size
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_op_reset_continue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[169]"></a>hci_le_rd_local_p256_public_key_cmp_evt_handler</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, gapm_cfg.o(i.hci_le_rd_local_p256_public_key_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = hci_le_rd_local_p256_public_key_cmp_evt_handler &rArr; gapm_op_setup_continue &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_requester
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_op_setup_continue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[151]"></a>hci_le_rd_max_data_len_cmd_cmp_evt_handler</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, gapm_cfg.o(i.hci_le_rd_max_data_len_cmd_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hci_le_rd_max_data_len_cmd_cmp_evt_handler &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_requester
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[158]"></a>hci_le_rd_nb_supp_adv_sets_cmd_cmp_evt_handler</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, gapm_cfg.o(i.hci_le_rd_nb_supp_adv_sets_cmd_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = hci_le_rd_nb_supp_adv_sets_cmd_cmp_evt_handler &rArr; gapm_op_reset_continue &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_requester
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_op_reset_continue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[15b]"></a>hci_le_rd_pal_size_cmd_cmp_evt_handler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gapm_list.o(i.hci_le_rd_pal_size_cmd_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hci_le_rd_pal_size_cmd_cmp_evt_handler &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_list_send_list_size_ind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[160]"></a>hci_le_rd_ral_addr_cmd_cmp_evt_handler</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, gapm_list.o(i.hci_le_rd_ral_addr_cmd_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = hci_le_rd_ral_addr_cmd_cmp_evt_handler &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_requester
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[15f]"></a>hci_le_rd_ral_size_cmd_cmp_evt_handler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gapm_list.o(i.hci_le_rd_ral_size_cmd_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hci_le_rd_ral_size_cmd_cmp_evt_handler &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_list_send_list_size_ind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[153]"></a>hci_le_rd_rf_path_comp_cmd_cmp_evt_handler</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, gapm_cfg.o(i.hci_le_rd_rf_path_comp_cmd_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = hci_le_rd_rf_path_comp_cmd_cmp_evt_handler &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_requester
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[150]"></a>hci_le_rd_suggted_dft_data_len_cmd_cmp_evt_handler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gapm_cfg.o(i.hci_le_rd_suggted_dft_data_len_cmd_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hci_le_rd_suggted_dft_data_len_cmd_cmp_evt_handler &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_requester
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[152]"></a>hci_le_rd_tx_pwr_cmd_cmp_evt_handler</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, gapm_cfg.o(i.hci_le_rd_tx_pwr_cmd_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = hci_le_rd_tx_pwr_cmd_cmp_evt_handler &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_requester
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[154]"></a>hci_le_rd_wlst_size_cmd_cmp_evt_handler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gapm_list.o(i.hci_le_rd_wlst_size_cmd_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hci_le_rd_wlst_size_cmd_cmp_evt_handler &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_list_send_list_size_ind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[157]"></a>hci_le_read_max_adv_data_len_cmd_cmp_evt_handler</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, gapm_cfg.o(i.hci_le_read_max_adv_data_len_cmd_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = hci_le_read_max_adv_data_len_cmd_cmp_evt_handler &rArr; gapm_op_reset_continue &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_requester
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_op_reset_continue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[16c]"></a>hci_le_scan_req_rcvd_evt_handler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, gapm_adv.o(i.hci_le_scan_req_rcvd_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hci_le_scan_req_rcvd_evt_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[164]"></a>hci_le_scan_timeout_evt_handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gapm_scan.o(i.hci_le_scan_timeout_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hci_le_scan_timeout_evt_handler &rArr; gapm_actv_stopped &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_stopped
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[14f]"></a>hci_rd_bd_addr_cmd_cmp_evt_handler</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, gapm_cfg.o(i.hci_rd_bd_addr_cmd_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = hci_rd_bd_addr_cmd_cmp_evt_handler &rArr; gapm_op_setup_continue &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_op_setup_continue
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_op_reset_continue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[14d]"></a>hci_rd_buff_size_cmd_cmp_evt_handler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gapm_cfg.o(i.hci_rd_buff_size_cmd_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hci_rd_buff_size_cmd_cmp_evt_handler &rArr; gapm_op_reset_continue &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cm_set_link_layer_buff_size
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_op_reset_continue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[14e]"></a>hci_rd_local_ver_info_cmd_cmp_evt_handler</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, gapm_cfg.o(i.hci_rd_local_ver_info_cmd_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hci_rd_local_ver_info_cmd_cmp_evt_handler &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_requester
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[14b]"></a>hci_test_end_cmd_cmp_evt_handler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gapm_cfg.o(i.hci_test_end_cmd_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hci_test_end_cmd_cmp_evt_handler &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_requester
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[4b9]"></a>initial_static_memory</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, jump_table.o(i.initial_static_memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = initial_static_memory &rArr; em_ble_generate_base_address_table
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_init_act_info_buf (via Veneer)
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_util_buf_init_env (via Veneer)
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_ble_generate_base_address_table
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_init_static_memory
</UL>

<P><STRONG><a name="[42f]"></a>jump_table_get_static_keys</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, jump_table.o(i.jump_table_get_static_keys))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = jump_table_get_static_keys &rArr; flash_erase &rArr; flash_protect_enable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase (via Veneer)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_table_param_get
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
</UL>

<P><STRONG><a name="[1]"></a>jump_table_memmory_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, jump_table.o(i.jump_table_memmory_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jump_table_memmory_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset (via Veneer)
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_mem_init (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_2)
</UL>
<P><STRONG><a name="[42e]"></a>jump_table_set_static_keys</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, jump_table.o(i.jump_table_set_static_keys))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = jump_table_set_static_keys &rArr; flash_write &rArr; flash_protect_enable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write (via Veneer)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_table_param_set
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
</UL>

<P><STRONG><a name="[756]"></a>jump_table_set_static_keys_store_offset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, jump_table.o(i.jump_table_set_static_keys_store_offset))
<BR><BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_custom_parameters
</UL>

<P><STRONG><a name="[4c1]"></a>l2cc_cleanup</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, l2cc.o(i.l2cc_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = l2cc_cleanup &rArr; l2cc_op_complete &rArr; l2cc_send_cmp_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear (via Veneer)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free (via Veneer)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_send_cmp_evt
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_op_complete
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cm_cleanup
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_init
</UL>

<P><STRONG><a name="[4c4]"></a>l2cc_create</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, l2cc.o(i.l2cc_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = l2cc_create
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cm_create
</UL>

<P><STRONG><a name="[4c5]"></a>l2cc_data_send</STRONG> (Thumb, 364 bytes, Stack size 64 bytes, l2cc.o(i.l2cc_data_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = l2cc_data_send &rArr; l2cc_pdu_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller (via Veneer)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_util_buf_acl_tx_free (via Veneer)
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_util_buf_acl_tx_alloc (via Veneer)
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_conhdl
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cm_tx_status
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_send_cmp_evt
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_pack
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_dbg_pdu_pack
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cm_l2cap_tx_handler
</UL>

<P><STRONG><a name="[4c8]"></a>l2cc_dbg_pdu_pack</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, l2cc_pdu.o(i.l2cc_dbg_pdu_pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = l2cc_dbg_pdu_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_data_send
</UL>

<P><STRONG><a name="[4cb]"></a>l2cc_init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, l2cc.o(i.l2cc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = l2cc_init &rArr; l2cc_cleanup &rArr; l2cc_op_complete &rArr; l2cc_send_cmp_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_create (via Veneer)
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cm_init
</UL>

<P><STRONG><a name="[4c2]"></a>l2cc_op_complete</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, l2cc.o(i.l2cc_op_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = l2cc_op_complete &rArr; l2cc_send_cmp_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free (via Veneer)
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_update_state
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_send_cmp_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_cleanup
</UL>

<P><STRONG><a name="[36a]"></a>l2cc_pdu_alloc</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, l2cc_task.o(i.l2cc_pdu_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = l2cc_pdu_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_sig_send_param_resp
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_update_cmd_handler
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_sig_send_cmd_reject
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_hdl_cfm
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_execute
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cmd_handler
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_cmd_handler
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_exc_mtu_cmd_handler
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_disc_cmd_handler
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_sign_ind_handler
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_rsp_send
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_send_event
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_send_error
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_req
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_mult_req
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_by_type_req
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_by_grp_type_req
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_blob_req
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_prepare_write_req
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_mtu_exc_req
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_info_req
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_by_type_req
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_execute_write_req
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_by_type_rsp_handler
</UL>

<P><STRONG><a name="[4ae]"></a>l2cc_pdu_header_check</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, l2cc_pdu.o(i.l2cc_pdu_header_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = l2cc_pdu_header_check
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_mtu
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_max_mtu
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_data_handler
</UL>

<P><STRONG><a name="[4c7]"></a>l2cc_pdu_pack</STRONG> (Thumb, 650 bytes, Stack size 48 bytes, l2cc_pdu.o(i.l2cc_pdu_pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = l2cc_pdu_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_max_mtu
</UL>
<BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_data_send
</UL>

<P><STRONG><a name="[4ad]"></a>l2cc_pdu_rx_init</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, l2cc_pdu.o(i.l2cc_pdu_rx_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = l2cc_pdu_rx_init
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_data_handler
</UL>

<P><STRONG><a name="[36f]"></a>l2cc_pdu_send</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, l2cc_task.o(i.l2cc_pdu_send))
<BR><BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_sig_send_param_resp
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_update_cmd_handler
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_sig_send_cmd_reject
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_att_req
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_rsp_send
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_send_event
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_send_error
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_req
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_mult_req
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_by_type_req
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_by_grp_type_req
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_blob_req
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_prepare_write_req
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_mtu_exc_req
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_info_req
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_by_type_req
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_execute_write_req
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send
</UL>

<P><STRONG><a name="[4af]"></a>l2cc_pdu_unpack</STRONG> (Thumb, 656 bytes, Stack size 80 bytes, l2cc_pdu.o(i.l2cc_pdu_unpack))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = l2cc_pdu_unpack
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_data_handler
</UL>

<P><STRONG><a name="[4c3]"></a>l2cc_send_cmp_evt</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, l2cc.o(i.l2cc_send_cmp_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = l2cc_send_cmp_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_data_send
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_cleanup
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send_cmd_handler
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_sdu_send_cmd_handler
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_dbg_pdu_send_cmd_handler
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_op_complete
</UL>

<P><STRONG><a name="[4cf]"></a>l2cc_sig_pdu_recv_handler</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, l2cc_sig.o(i.l2cc_sig_pdu_recv_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = l2cc_sig_pdu_recv_handler &rArr; l2cc_sig_send_cmd_reject &rArr; l2cc_pdu_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_sig_send_cmd_reject
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler
</UL>

<P><STRONG><a name="[4c0]"></a>l2cc_sig_send_cmd_reject</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, l2cc_sig.o(i.l2cc_sig_send_cmd_reject))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = l2cc_sig_send_cmd_reject &rArr; l2cc_pdu_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_sig_pdu_recv_handler
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_conn_param_upd_resp_handler
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_conn_param_upd_req_handler
</UL>

<P><STRONG><a name="[4cc]"></a>l2cc_update_state</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, l2cc.o(i.l2cc_update_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = l2cc_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_op_complete
</UL>

<P><STRONG><a name="[432]"></a>l2cm_cleanup</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, l2cm.o(i.l2cm_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = l2cm_cleanup &rArr; l2cc_cleanup &rArr; l2cc_op_complete &rArr; l2cc_send_cmp_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_size (via Veneer)
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_cleanup
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cm_tx_status
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_con_cleanup
</UL>

<P><STRONG><a name="[436]"></a>l2cm_create</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, l2cm.o(i.l2cm_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = l2cm_create &rArr; l2cc_create
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_create
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_con_create
</UL>

<P><STRONG><a name="[44b]"></a>l2cm_get_nb_buffer_available</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, l2cm.o(i.l2cm_get_nb_buffer_available))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_nb_cmp_pkts_evt_handler
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_op_reset_continue
</UL>

<P><STRONG><a name="[4d0]"></a>l2cm_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, l2cm.o(i.l2cm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = l2cm_init &rArr; l2cc_init &rArr; l2cc_cleanup &rArr; l2cc_op_complete &rArr; l2cc_send_cmp_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_clear (via Veneer)
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_callback_set (via Veneer)
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_hl_init_imp
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_hl_reset
</UL>

<P><STRONG><a name="[4b7]"></a>l2cm_set_link_layer_buff_size</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, l2cm.o(i.l2cm_set_link_layer_buff_size))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_buff_size_cmd_cmp_evt_handler
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_buff_size_cmd_cmp_evt_handler
</UL>

<P><STRONG><a name="[4ca]"></a>l2cm_tx_status</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, l2cm.o(i.l2cm_tx_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = l2cm_tx_status
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_set (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cm_cleanup
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_data_send
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send_cmd_handler
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_dbg_pdu_send_cmd_handler
</UL>

<P><STRONG><a name="[269]"></a>light_ctl_server_msg_handler</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, light_ctl_setup_server.o(i.light_ctl_server_msg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = light_ctl_server_msg_handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sig_mesh_led.o(.data)
</UL>
<P><STRONG><a name="[26b]"></a>light_hsl_hue_server_msg_handler</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, light_hsl_hue_server.o(i.light_hsl_hue_server_msg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = light_hsl_hue_server_msg_handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sig_mesh_led.o(.data)
</UL>
<P><STRONG><a name="[26c]"></a>light_hsl_saturation_server_msg_handler</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, light_hsl_saturation_server.o(i.light_hsl_saturation_server_msg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = light_hsl_saturation_server_msg_handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sig_mesh_led.o(.data)
</UL>
<P><STRONG><a name="[26a]"></a>light_hsl_server_msg_handler</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, light_hsl_setup_server.o(i.light_hsl_server_msg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = light_hsl_server_msg_handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sig_mesh_led.o(.data)
</UL>
<P><STRONG><a name="[2af]"></a>light_start_transition</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, app_light.o(i.light_start_transition))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = light_start_transition &rArr; __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Light_SetHSL
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Light_SetTemperature
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Light_SetRGB
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Light_SetOnOff
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Light_SetLevel
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Light_Init
</UL>

<P><STRONG><a name="[268]"></a>lightness_server_msg_handler</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, light_lightness_setup_server.o(i.lightness_server_msg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = lightness_server_msg_handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sig_mesh_led.o(.data)
</UL>
<P><STRONG><a name="[275]"></a>llc_patch_1</STRONG> (Thumb, 1034 bytes, Stack size 104 bytes, patch_rf.o(i.llc_patch_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = llc_patch_1
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_le_evt_mask_check (via Veneer)
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_is_dev_connected (via Veneer)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_dev_list_search (via Veneer)
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_cmd_cmp_send (via Veneer)
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_white_list_rem (via Veneer)
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_res_list_peer_update (via Veneer)
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_start (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host (via Veneer)
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_ble_conhdl_register (via Veneer)
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_util_buf_adv_tx_free (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(.data)
</UL>
<P><STRONG><a name="[4e2]"></a>m_al_activity_cmd_send</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, m_al_activity.o(i.m_al_activity_cmd_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = m_al_activity_cmd_send &rArr; m_al_activity_cmd_exec
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_activity_cmd_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_scan_stop_continue
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_scan_start_continue
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_stop
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_start
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_adv_start_cont
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_adv_continue
</UL>

<P><STRONG><a name="[42b]"></a>m_al_activity_cmp_evt_handler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, m_al_activity.o(i.m_al_activity_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = m_al_activity_cmp_evt_handler &rArr; m_al_con_cmp_evt_handler &rArr; m_al_con_adv_start_cont &rArr; m_al_activity_cmd_send &rArr; m_al_activity_cmd_exec
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_scan_cmp_evt_handler
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_cmp_evt_handler
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_adv_cmp_evt_handler
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_activity_cmd_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
</UL>

<P><STRONG><a name="[4e6]"></a>m_al_activity_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, m_al_activity.o(i.m_al_activity_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_al_activity_init
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free (via Veneer)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_destroy
</UL>

<P><STRONG><a name="[4e3]"></a>m_al_adv_cmp_evt_handler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, m_al_adv.o(i.m_al_adv_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = m_al_adv_cmp_evt_handler &rArr; m_al_adv_continue &rArr; m_al_activity_cmd_send &rArr; m_al_activity_cmd_exec
</UL>
<BR>[Calls]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_adv_continue
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_activity_cmp_evt_handler
</UL>

<P><STRONG><a name="[403]"></a>m_al_adv_created_ind_handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, m_al_adv.o(i.m_al_adv_created_ind_handler))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_activity_created_ind_handler
</UL>

<P><STRONG><a name="[4f2]"></a>m_al_adv_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, m_al_adv.o(i.m_al_adv_init))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_destroy
</UL>

<P><STRONG><a name="[407]"></a>m_al_adv_stopped_ind_handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, m_al_adv.o(i.m_al_adv_stopped_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = m_al_adv_stopped_ind_handler &rArr; m_al_adv_continue &rArr; m_al_activity_cmd_send &rArr; m_al_activity_cmd_exec
</UL>
<BR>[Calls]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_adv_continue
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_activity_stopped_ind_handler
</UL>

<P><STRONG><a name="[4e8]"></a>m_al_con_cleanup</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, m_al_con.o(i.m_al_con_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = m_al_con_cleanup &rArr; m_al_con_type_init &rArr; attmdb_svc_visibility_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear (via Veneer)
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free (via Veneer)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_type_init
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_cleanup
</UL>

<P><STRONG><a name="[4e5]"></a>m_al_con_cmp_evt_handler</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, m_al_con.o(i.m_al_con_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = m_al_con_cmp_evt_handler &rArr; m_al_con_adv_start_cont &rArr; m_al_activity_cmd_send &rArr; m_al_activity_cmd_exec
</UL>
<BR>[Calls]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_adv_start_cont
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_activity_cmp_evt_handler
</UL>

<P><STRONG><a name="[4ee]"></a>m_al_con_create</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, m_al_con.o(i.m_al_con_create))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_create
</UL>

<P><STRONG><a name="[405]"></a>m_al_con_created_ind_handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, m_al_con.o(i.m_al_con_created_ind_handler))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_activity_created_ind_handler
</UL>

<P><STRONG><a name="[4ec]"></a>m_al_con_init</STRONG> (Thumb, 300 bytes, Stack size 64 bytes, m_al_con.o(i.m_al_con_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = m_al_con_init &rArr; attm_svc_create_db &rArr; attmdb_add_service &rArr; attmdb_svc_init &rArr; attm_uuid16_comp &rArr; attm_uuid_comp &rArr; attm_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free (via Veneer)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_svc_create_db
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_svc_visibility_set
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_reserve_handle_range
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_destroy
</UL>

<P><STRONG><a name="[409]"></a>m_al_con_stopped_ind_handler</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, m_al_con.o(i.m_al_con_stopped_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = m_al_con_stopped_ind_handler &rArr; m_al_con_type_init &rArr; attmdb_svc_visibility_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init (via Veneer)
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_type_init
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_activity_stopped_ind_handler
</UL>

<P><STRONG><a name="[4f1]"></a>m_al_djob_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, m_al_djob.o(i.m_al_djob_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_al_djob_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_callback_set (via Veneer)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_destroy
</UL>

<P><STRONG><a name="[4f5]"></a>m_al_djob_reg</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, m_al_djob.o(i.m_al_djob_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_al_djob_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_set (via Veneer)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_find (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_sent
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_send_continue
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_send
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_start
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_opcode_status
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process_next
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_cb_rx
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_rx
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_model_check
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_tx
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_send
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_ccm_enc_finished_cb
</UL>

<P><STRONG><a name="[4f7]"></a>m_al_free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_al_task.o(i.m_al_free))
<BR><BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_set_scan_rsp_data
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_pbrs_prov_bearer_gatt_send
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_scan_clear
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_revoke_old
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_delete
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_init
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_friend_new_ind
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_friend_end_ind
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_app_delete
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_friend_revoke_old
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_init
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_block_free
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_init
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_compo_data_get
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_subs_list_ind
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_binding_ind
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_load_fsm
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_init
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_clean_up
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_link_closed
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pub_key_res_cb
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_bearer_init
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_bearer_closed_cb
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_addr_list_start
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_send_subs_list
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_handler_update
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_clean_env
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_handler_clear_cfm
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_end_friendship
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_cb_repeat_timer
</UL>

<P><STRONG><a name="[41e]"></a>m_al_get_local_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_al_task.o(i.m_al_get_local_addr))
<BR><BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_addr_set_rand_addr
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_cmd_cmp_evt_creating_handler
</UL>

<P><STRONG><a name="[4be]"></a>m_al_int_message_handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, m_al_task.o(i.m_al_int_message_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = m_al_int_message_handler &rArr; mesh_timer_ind_handler &rArr; m_tb_timer_expired &rArr; m_tb_timer_prog &rArr; m_al_timer_get_delay &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_timer_ind_handler
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_con_timer_ind_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_default_handler
</UL>

<P><STRONG><a name="[4fc]"></a>m_al_local_id_get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, m_al_task.o(i.m_al_local_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_src_task_get
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_msg_send
</UL>

<P><STRONG><a name="[4ff]"></a>m_al_malloc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, m_al_task.o(i.m_al_malloc))
<BR><BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_set_scan_rsp_data
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_pbrs_prov_bearer_gatt_send
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_alloc
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_handler_scan
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_update
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_add
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_friend_new_ind
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_dev_add
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_app_update
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_app_add
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_friend_finished_cb
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_finished_cb
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_block_alloc
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_load
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_start
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_bearer_gatt_start
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_start
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_compo_data_get
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_subs_list_ind
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_binding_ind
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_rx
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_bearer_opened_cb
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_addr_list_start
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_send_subs_list
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_handler_request
</UL>

<P><STRONG><a name="[500]"></a>m_al_msg_alloc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, m_al_task.o(i.m_al_msg_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_al_msg_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_prov_state_cb
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_prov_param_req_cb
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_prov_oob_auth_req_cb
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_model_sent_cb
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_model_rx_cb
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_model_publish_period_cb
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_model_opcode_check_cb
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_exec_cmd
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_buf_block_freed_cb
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_basic_cmp_evt_send
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_send_update_ind
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_send_node_reset_ind
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_send_lpn_status_ind
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_send_lpn_offer_ind
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_send_fault_test_req_ind
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_send_fault_period_ind
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_send_fault_get_req_ind
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_send_fault_clear_ind
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_send_compo_data_req_ind
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_send_attention_update_ind
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_proxy_end_ind
</UL>

<P><STRONG><a name="[501]"></a>m_al_msg_send</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, m_al_task.o(i.m_al_msg_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_local_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_prov_state_cb
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_prov_param_req_cb
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_prov_oob_auth_req_cb
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_model_sent_cb
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_model_rx_cb
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_model_publish_period_cb
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_model_opcode_check_cb
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_exec_cmd
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_buf_block_freed_cb
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_basic_cmp_evt_send
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_send_update_ind
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_send_node_reset_ind
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_send_lpn_status_ind
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_send_lpn_offer_ind
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_send_fault_test_req_ind
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_send_fault_period_ind
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_send_fault_get_req_ind
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_send_fault_clear_ind
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_send_compo_data_req_ind
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_send_attention_update_ind
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_proxy_end_ind
</UL>

<P><STRONG><a name="[94]"></a>m_al_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_al_task.o(i.m_al_prf_itf_get))
<BR>[Address Reference Count : 1]<UL><LI> mesh_api.o(i.mesh_init)
</UL>
<P><STRONG><a name="[4e4]"></a>m_al_scan_cmp_evt_handler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, m_al_scan.o(i.m_al_scan_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = m_al_scan_cmp_evt_handler &rArr; m_al_scan_start_continue &rArr; m_al_activity_cmd_send &rArr; m_al_activity_cmd_exec
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_scan_stop_continue
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_scan_start_continue
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_activity_cmp_evt_handler
</UL>

<P><STRONG><a name="[404]"></a>m_al_scan_created_ind_handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, m_al_scan.o(i.m_al_scan_created_ind_handler))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_activity_created_ind_handler
</UL>

<P><STRONG><a name="[4f3]"></a>m_al_scan_init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, m_al_scan.o(i.m_al_scan_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_al_scan_init &rArr; os_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_destroy
</UL>

<P><STRONG><a name="[fa]"></a>m_al_scan_start</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, m_al_scan.o(i.m_al_scan_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = m_al_scan_start &rArr; os_timer_start &rArr; os_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save (via Veneer)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore (via Veneer)
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_scan_start_continue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_al_adv.o(.constdata)
</UL>
<P><STRONG><a name="[fb]"></a>m_al_scan_stop</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, m_al_scan.o(i.m_al_scan_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = m_al_scan_stop &rArr; m_al_scan_stop_continue &rArr; m_al_activity_cmd_send &rArr; m_al_activity_cmd_exec
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_scan_stop_continue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_al_adv.o(.constdata)
</UL>
<P><STRONG><a name="[408]"></a>m_al_scan_stopped_ind_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, m_al_scan.o(i.m_al_scan_stopped_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = m_al_scan_stopped_ind_handler &rArr; m_al_scan_stop_continue &rArr; m_al_activity_cmd_send &rArr; m_al_activity_cmd_exec
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_scan_stop_continue
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_activity_stopped_ind_handler
</UL>

<P><STRONG><a name="[504]"></a>m_al_sec_aes</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, m_al_sec.o(i.m_al_sec_aes))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_al_sec_aes
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_execute
</UL>

<P><STRONG><a name="[505]"></a>m_al_sec_aes_ccm</STRONG> (Thumb, 36 bytes, Stack size 56 bytes, m_al_sec.o(i.m_al_sec_aes_ccm))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_execute
</UL>

<P><STRONG><a name="[507]"></a>m_al_sec_aes_cmac</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, m_al_sec.o(i.m_al_sec_aes_cmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_al_sec_aes_cmac
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_execute
</UL>

<P><STRONG><a name="[509]"></a>m_al_sec_aes_k1</STRONG> (Thumb, 18 bytes, Stack size 32 bytes, m_al_sec.o(i.m_al_sec_aes_k1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = m_al_sec_aes_k1
</UL>
<BR>[Calls]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_k1 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_execute
</UL>

<P><STRONG><a name="[50b]"></a>m_al_sec_aes_k2</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, m_al_sec.o(i.m_al_sec_aes_k2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_al_sec_aes_k2
</UL>
<BR>[Calls]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_k2 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_execute
</UL>

<P><STRONG><a name="[50d]"></a>m_al_sec_aes_k3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m_al_sec.o(i.m_al_sec_aes_k3))
<BR><BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_k3 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_execute
</UL>

<P><STRONG><a name="[50f]"></a>m_al_sec_aes_k4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m_al_sec.o(i.m_al_sec_aes_k4))
<BR><BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_k4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_execute
</UL>

<P><STRONG><a name="[511]"></a>m_al_sec_aes_s1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m_al_sec.o(i.m_al_sec_aes_s1))
<BR><BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_s1 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_execute
</UL>

<P><STRONG><a name="[42c]"></a>m_al_sec_cmp_evt_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, m_al_sec.o(i.m_al_sec_cmp_evt_handler))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
</UL>

<P><STRONG><a name="[513]"></a>m_al_sec_ecdh_secret</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, m_al_sec.o(i.m_al_sec_ecdh_secret))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = m_al_sec_ecdh_secret
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_cfm_salt_finished_cb
</UL>

<P><STRONG><a name="[4ef]"></a>m_al_sec_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, m_al_sec.o(i.m_al_sec_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_al_sec_init
</UL>
<BR>[Calls]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_destroy
</UL>

<P><STRONG><a name="[515]"></a>m_al_sec_pub_key_read</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, m_al_sec.o(i.m_al_sec_pub_key_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_al_sec_pub_key_read
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_param_rsp
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_link_closed
</UL>

<P><STRONG><a name="[516]"></a>m_al_sec_rand</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m_al_sec.o(i.m_al_sec_rand))
<BR><BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_rand (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_execute
</UL>

<P><STRONG><a name="[4f9]"></a>m_al_set_local_addr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, m_al_task.o(i.m_al_set_local_addr))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_init
</UL>

<P><STRONG><a name="[517]"></a>m_al_timer_clear</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, m_al_timer.o(i.m_al_timer_clear))
<BR><BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_prog
</UL>

<P><STRONG><a name="[518]"></a>m_al_timer_get_clock</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, m_al_timer.o(i.m_al_timer_get_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = m_al_timer_get_clock &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_timer_update_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_get_cur_time
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_get_run_time
</UL>

<P><STRONG><a name="[51a]"></a>m_al_timer_get_delay</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, m_al_timer.o(i.m_al_timer_get_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = m_al_timer_get_delay &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_timer_update_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_prog
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_expired
</UL>

<P><STRONG><a name="[51b]"></a>m_al_timer_get_time_ms</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, m_al_timer.o(i.m_al_timer_get_time_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = m_al_timer_get_time_ms &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_timer_update_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_set
</UL>

<P><STRONG><a name="[4f0]"></a>m_al_timer_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, m_al_timer.o(i.m_al_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_al_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_time (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_destroy
</UL>

<P><STRONG><a name="[51d]"></a>m_al_timer_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, m_al_timer.o(i.m_al_timer_set))
<BR><BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_prog
</UL>

<P><STRONG><a name="[583]"></a>m_al_timer_set_clock</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, m_al_timer.o(i.m_al_timer_set_clock))
<BR><BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_set_run_time
</UL>

<P><STRONG><a name="[52c]"></a>m_api_buf_alloc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, m_api.o(i.m_api_buf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = m_api_buf_alloc &rArr; m_tb_buf_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_exec_cmd
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_model_rsp_send_cmd_handler
</UL>

<P><STRONG><a name="[52e]"></a>m_api_buf_alloc_block</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_api.o(i.m_api_buf_alloc_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = m_api_buf_alloc_block &rArr; m_tb_buf_block_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_block_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_exec_cmd
</UL>

<P><STRONG><a name="[55f]"></a>m_api_buf_data_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, m_api.o(i.m_api_buf_data_get))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_model_rx_cb
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_exec_cmd
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_model_rsp_send_cmd_handler
</UL>

<P><STRONG><a name="[571]"></a>m_api_buf_data_len_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, m_api.o(i.m_api_buf_data_len_get))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_model_rx_cb
</UL>

<P><STRONG><a name="[530]"></a>m_api_buf_free_block</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, m_api.o(i.m_api_buf_free_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = m_api_buf_free_block &rArr; m_tb_buf_block_free
</UL>
<BR>[Calls]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_block_free
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_exec_cmd
</UL>

<P><STRONG><a name="[532]"></a>m_api_buf_release</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_api.o(i.m_api_buf_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = m_api_buf_release &rArr; m_tb_buf_release &rArr; m_tb_buf_block_free
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_model_sent_cb
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_exec_cmd
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_model_rsp_send_cmd_handler
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pdu_sent
</UL>

<P><STRONG><a name="[534]"></a>m_api_compo_data_cfm</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_api.o(i.m_api_compo_data_cfm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_api_compo_data_cfm &rArr; m_tb_store_rx_compo_data
</UL>
<BR>[Calls]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_rx_compo_data
</UL>
<BR>[Called By]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_handler
</UL>

<P><STRONG><a name="[536]"></a>m_api_disable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, m_api.o(i.m_api_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = m_api_disable &rArr; m_bearer_stop &rArr; m_bearer_adv_stop &rArr; m_bearer_adv_update &rArr; m_bearer_adv_stopped &rArr; m_bearer_closed &rArr; m_tb_buf_release &rArr; m_tb_buf_block_free
</UL>
<BR>[Calls]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_is_enabled
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_exec_cmd
</UL>

<P><STRONG><a name="[539]"></a>m_api_enable</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, m_api.o(i.m_api_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = m_api_enable &rArr; m_bearer_start &rArr; m_bearer_gatt_start
</UL>
<BR>[Calls]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_is_enabled
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_exec_cmd
</UL>

<P><STRONG><a name="[4f8]"></a>m_api_get_env_size</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, m_api.o(i.m_api_get_env_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = m_api_get_env_size &rArr; m_tb_get_env_size
</UL>
<BR>[Calls]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_get_env_size
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_get_env_size
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_get_env_size
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_get_env_size
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_get_env_size
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_get_env_size
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_init
</UL>

<P><STRONG><a name="[541]"></a>m_api_get_run_time</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_api.o(i.m_api_get_run_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = m_api_get_run_time &rArr; m_al_timer_get_clock &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_timer_get_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_exec_cmd
</UL>

<P><STRONG><a name="[542]"></a>m_api_health_cfm</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, m_api.o(i.m_api_health_cfm))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = m_api_health_cfm &rArr; m_fnd_hlths_cfm &rArr; m_fnd_hlths_send_status &rArr; m_fnd_hlths_process_next &rArr; m_fnd_hlths_process &rArr;  m_fnd_hlths_send_status (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_cfm
</UL>
<BR>[Called By]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_handler
</UL>

<P><STRONG><a name="[544]"></a>m_api_health_status_send</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_api.o(i.m_api_health_status_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = m_api_health_status_send &rArr; m_fnd_hlths_status_ind &rArr; m_fnd_hlths_send_status &rArr; m_fnd_hlths_process_next &rArr; m_fnd_hlths_process &rArr;  m_fnd_hlths_send_status (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_status_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_exec_cmd
</UL>

<P><STRONG><a name="[4f4]"></a>m_api_init</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, m_api.o(i.m_api_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = m_api_init &rArr; m_fnd_init &rArr; m_fnd_pbrs_init &rArr; m_api_register_model &rArr; m_tb_mio_register_model &rArr; m_tb_mio_get_local_id
</UL>
<BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_is_feature_sup
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_init
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_init
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_init
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_init
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_init
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_init
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_init
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_destroy
</UL>

<P><STRONG><a name="[54d]"></a>m_api_iv_upd_test_mode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_api.o(i.m_api_iv_upd_test_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = m_api_iv_upd_test_mode &rArr; m_tb_key_iv_upd_test_mode_ind &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_iv_upd_test_mode_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_exec_cmd
</UL>

<P><STRONG><a name="[54f]"></a>m_api_load_stored_info</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, m_api.o(i.m_api_load_stored_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = m_api_load_stored_info &rArr; m_tb_store_load &rArr; m_tb_store_load_fsm &rArr; m_tb_store_load_states &rArr; m_tb_state_set_beacon_state &rArr; m_bcn_state_update &rArr; m_bcn_adv_tx_check &rArr; m_bcn_prep_secure_bcn &rArr; m_bcn_insert_encrypt_queue &rArr; m_tb_sec_cmac_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_load
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_is_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_exec_cmd
</UL>

<P><STRONG><a name="[551]"></a>m_api_lpn_select_friend</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_api.o(i.m_api_lpn_select_friend))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = m_api_lpn_select_friend &rArr; m_lay_lpn_select_friend &rArr; m_tb_key_friend_new_ind &rArr; m_tb_sec_k2_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_select_friend
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_exec_cmd
</UL>

<P><STRONG><a name="[553]"></a>m_api_lpn_start</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, m_api.o(i.m_api_lpn_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = m_api_lpn_start &rArr; m_lay_lpn_start &rArr; m_lay_lpn_send_req &rArr; m_lay_lpn_pack &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_start
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_exec_cmd
</UL>

<P><STRONG><a name="[555]"></a>m_api_lpn_stop</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_api.o(i.m_api_lpn_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = m_api_lpn_stop &rArr; m_lay_lpn_stop &rArr; m_lay_lpn_pack &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_exec_cmd
</UL>

<P><STRONG><a name="[4bf]"></a>m_api_message_handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, m_api.o(i.m_api_message_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = m_api_message_handler &rArr; m_api_msg_handler &rArr; m_api_msg_exec_cmd &rArr; m_api_load_stored_info &rArr; m_tb_store_load &rArr; m_tb_store_load_fsm &rArr; m_tb_store_load_states &rArr; m_tb_state_set_beacon_state &rArr; m_bcn_state_update &rArr; m_bcn_adv_tx_check &rArr; m_bcn_prep_secure_bcn &rArr; m_bcn_insert_encrypt_queue &rArr; m_tb_sec_cmac_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_default_handler
</UL>

<P><STRONG><a name="[558]"></a>m_api_model_opcode_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_api.o(i.m_api_model_opcode_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = m_api_model_opcode_status &rArr; m_lay_access_opcode_status &rArr; m_al_djob_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_opcode_status
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_cb_opcode_check
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_handler
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_cb_opcode_check
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_cb_opcode_check
</UL>

<P><STRONG><a name="[55a]"></a>m_api_model_publish</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, m_api.o(i.m_api_model_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = m_api_model_publish &rArr; m_lay_access_publish &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_publish
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_exec_cmd
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_send_status
</UL>

<P><STRONG><a name="[55c]"></a>m_api_model_rsp_send</STRONG> (Thumb, 26 bytes, Stack size 40 bytes, m_api.o(i.m_api_model_rsp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_rsp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_pdu_sent
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_pdu_rx
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_send
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_scan_timer_handler
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_scan_report
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_link_timer_handler
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_link_state_report
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_model_rsp_send_cmd_handler
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_send
</UL>

<P><STRONG><a name="[557]"></a>m_api_msg_handler</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, m_api_msg.o(i.m_api_msg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = m_api_msg_handler &rArr; m_api_msg_exec_cmd &rArr; m_api_load_stored_info &rArr; m_tb_store_load &rArr; m_tb_store_load_fsm &rArr; m_tb_store_load_states &rArr; m_tb_state_set_beacon_state &rArr; m_bcn_state_update &rArr; m_bcn_adv_tx_check &rArr; m_bcn_prep_secure_bcn &rArr; m_bcn_insert_encrypt_queue &rArr; m_tb_sec_cmac_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_model_opcode_status
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_exec_cmd
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_prov_param_rsp
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_prov_oob_auth_rsp
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_health_cfm
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_compo_data_cfm
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_message_handler
</UL>

<P><STRONG><a name="[54c]"></a>m_api_msg_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, m_api_msg.o(i.m_api_msg_init))
<BR><BR>[Calls]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_set
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_init
</UL>

<P><STRONG><a name="[56f]"></a>m_api_prov_oob_auth_rsp</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_api.o(i.m_api_prov_oob_auth_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = m_api_prov_oob_auth_rsp &rArr; m_prov_oob_auth_rsp &rArr; m_tb_sec_rand_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_oob_auth_rsp
</UL>
<BR>[Called By]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_handler
</UL>

<P><STRONG><a name="[56e]"></a>m_api_prov_param_rsp</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_api.o(i.m_api_prov_param_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = m_api_prov_param_rsp &rArr; m_prov_param_rsp &rArr; m_al_sec_pub_key_read
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_param_rsp
</UL>
<BR>[Called By]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_handler
</UL>

<P><STRONG><a name="[56b]"></a>m_api_prov_pub_key_read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_api.o(i.m_api_prov_pub_key_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_api_prov_pub_key_read &rArr; m_prov_pub_key_get
</UL>
<BR>[Calls]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pub_key_get
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_exec_cmd
</UL>

<P><STRONG><a name="[56d]"></a>m_api_prov_stop_link_timeout</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_api.o(i.m_api_prov_stop_link_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = m_api_prov_stop_link_timeout &rArr; m_prov_stop_link_timeout &rArr; m_tb_timer_clear &rArr; m_tb_timer_remove &rArr; m_tb_timer_prog &rArr; m_al_timer_get_delay &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_stop_link_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_exec_cmd
</UL>

<P><STRONG><a name="[56c]"></a>m_api_proxy_ctrl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, m_api.o(i.m_api_proxy_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = m_api_proxy_ctrl &rArr; m_lay_proxy_bearer_adv_ctrl &rArr; m_lay_proxy_adv_data_set &rArr; m_tb_sec_rand_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_bearer_adv_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_exec_cmd
</UL>

<P><STRONG><a name="[577]"></a>m_api_proxy_end_ind</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, m_api.o(i.m_api_proxy_end_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = m_api_proxy_end_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_msg_send
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_bearer_stopped
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_bearer_closed_cb
</UL>

<P><STRONG><a name="[562]"></a>m_api_register_model</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, m_api.o(i.m_api_register_model))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = m_api_register_model &rArr; m_tb_mio_register_model &rArr; m_tb_mio_get_local_id
</UL>
<BR>[Calls]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_is_enabled
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_register_model
</UL>
<BR>[Called By]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_init
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_init
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_init
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_exec_cmd
</UL>

<P><STRONG><a name="[579]"></a>m_api_send_attention_update_ind</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, m_api.o(i.m_api_send_attention_update_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = m_api_send_attention_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_msg_send
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_cb_timer_attention
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_set_attention_state
</UL>

<P><STRONG><a name="[57a]"></a>m_api_send_compo_data_req_ind</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, m_api.o(i.m_api_send_compo_data_req_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = m_api_send_compo_data_req_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_msg_send
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_get_compo_data
</UL>

<P><STRONG><a name="[57b]"></a>m_api_send_fault_clear_ind</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, m_api.o(i.m_api_send_fault_clear_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = m_api_send_fault_clear_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_msg_send
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_process
</UL>

<P><STRONG><a name="[57c]"></a>m_api_send_fault_get_req_ind</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, m_api.o(i.m_api_send_fault_get_req_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = m_api_send_fault_get_req_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_msg_send
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_process
</UL>

<P><STRONG><a name="[57d]"></a>m_api_send_fault_period_ind</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, m_api.o(i.m_api_send_fault_period_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = m_api_send_fault_period_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_msg_send
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_handler_period
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_cb_publish_period
</UL>

<P><STRONG><a name="[57e]"></a>m_api_send_fault_test_req_ind</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, m_api.o(i.m_api_send_fault_test_req_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = m_api_send_fault_test_req_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_msg_send
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_process
</UL>

<P><STRONG><a name="[57f]"></a>m_api_send_lpn_offer_ind</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, m_api.o(i.m_api_send_lpn_offer_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = m_api_send_lpn_offer_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_msg_send
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_handler_offer
</UL>

<P><STRONG><a name="[580]"></a>m_api_send_lpn_status_ind</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, m_api.o(i.m_api_send_lpn_status_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = m_api_send_lpn_status_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_msg_send
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_handler_update
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_cb_timer_offer
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_cb_timer
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_cb_key
</UL>

<P><STRONG><a name="[581]"></a>m_api_send_node_reset_ind</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, m_api.o(i.m_api_send_node_reset_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = m_api_send_node_reset_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_msg_send
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_cb_sent
</UL>

<P><STRONG><a name="[582]"></a>m_api_send_update_ind</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, m_api.o(i.m_api_send_update_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_msg_send
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_subs_list_ind
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_state_ind
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_publi_param_ind
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_net_key_ind
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_binding_ind
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_app_key_ind
</UL>

<P><STRONG><a name="[570]"></a>m_api_set</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, m_api.o(i.m_api_set))
<BR><BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_init
</UL>

<P><STRONG><a name="[561]"></a>m_api_set_run_time</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, m_api.o(i.m_api_set_run_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_api_set_run_time
</UL>
<BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_timer_set_clock
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_is_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_exec_cmd
</UL>

<P><STRONG><a name="[540]"></a>m_bcn_get_env_size</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, m_bcn.o(i.m_bcn_get_env_size))
<BR><BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_get_env_size
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_init
</UL>

<P><STRONG><a name="[54b]"></a>m_bcn_init</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, m_bcn.o(i.m_bcn_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = m_bcn_init
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_connect_client_cb
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_buf_init
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_get_env_size
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_init
</UL>

<P><STRONG><a name="[58f]"></a>m_bcn_proxy_con_start</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, m_bcn.o(i.m_bcn_proxy_con_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = m_bcn_proxy_con_start &rArr; m_bcn_proxy_tx_check &rArr; m_bcn_adv_tx_check &rArr; m_bcn_prep_secure_bcn &rArr; m_bcn_insert_encrypt_queue &rArr; m_tb_sec_cmac_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_proxy_tx_check
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_cmac_finished_cb
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_bearer_opened_cb
</UL>

<P><STRONG><a name="[529]"></a>m_bcn_restart_tx_unprov_bcn</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, m_bcn.o(i.m_bcn_restart_tx_unprov_bcn))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = m_bcn_restart_tx_unprov_bcn &rArr; m_bcn_adv_tx_check &rArr; m_bcn_prep_secure_bcn &rArr; m_bcn_insert_encrypt_queue &rArr; m_tb_sec_cmac_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_set
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_buf_rts_set
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_adv_tx_check
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_bearer_operation_open_cb
</UL>

<P><STRONG><a name="[595]"></a>m_bcn_start_tx_unprov_bcn</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, m_bcn.o(i.m_bcn_start_tx_unprov_bcn))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = m_bcn_start_tx_unprov_bcn &rArr; m_bcn_adv_tx_check &rArr; m_bcn_prep_secure_bcn &rArr; m_bcn_insert_encrypt_queue &rArr; m_tb_sec_cmac_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_set
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_buf_rts_set
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_adv_tx_check
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pub_key_res_cb
</UL>

<P><STRONG><a name="[526]"></a>m_bcn_state_update</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, m_bcn.o(i.m_bcn_state_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = m_bcn_state_update &rArr; m_bcn_adv_tx_check &rArr; m_bcn_prep_secure_bcn &rArr; m_bcn_insert_encrypt_queue &rArr; m_tb_sec_cmac_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_set
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_clear
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_beacon_state
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_adv_tx_check
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_prov_state
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_stop_tx_unprov_bcn
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_bearer_operation_open_cb
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_set_beacon_state
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_link_closed
</UL>

<P><STRONG><a name="[521]"></a>m_bcn_stop_tx_security_bcn</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, m_bcn.o(i.m_bcn_stop_tx_security_bcn))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = m_bcn_stop_tx_security_bcn &rArr; m_tb_timer_clear &rArr; m_tb_timer_remove &rArr; m_tb_timer_prog &rArr; m_al_timer_get_delay &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_bearer_operation_close_cb
</UL>

<P><STRONG><a name="[523]"></a>m_bcn_stop_tx_unprov_bcn</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, m_bcn.o(i.m_bcn_stop_tx_unprov_bcn))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = m_bcn_stop_tx_unprov_bcn &rArr; m_tb_timer_clear &rArr; m_tb_timer_remove &rArr; m_tb_timer_prog &rArr; m_al_timer_get_delay &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_clear
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_buf_rts_set
</UL>
<BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_state_update
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_bearer_operation_close_cb
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_link_open
</UL>

<P><STRONG><a name="[597]"></a>m_bcn_subnet_update_ind</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, m_bcn.o(i.m_bcn_subnet_update_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = m_bcn_subnet_update_ind &rArr; m_bcn_adv_tx_check &rArr; m_bcn_prep_secure_bcn &rArr; m_bcn_insert_encrypt_queue &rArr; m_tb_sec_cmac_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_adv_tx_check
</UL>
<BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_delete
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_finished_cb
</UL>

<P><STRONG><a name="[653]"></a>m_bearer_adv_connect_api_al</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m_bearer_adv.o(i.m_bearer_adv_connect_api_al))
<BR><BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_init
</UL>

<P><STRONG><a name="[599]"></a>m_bearer_adv_send</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, m_bearer_adv.o(i.m_bearer_adv_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = m_bearer_adv_send
</UL>
<BR>[Calls]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_get_sending_buf_in_queue
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_net_tx_params
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_send_continue
</UL>

<P><STRONG><a name="[59d]"></a>m_bearer_adv_start</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, m_bearer_adv.o(i.m_bearer_adv_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_bearer_adv_start
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_start
</UL>

<P><STRONG><a name="[5a0]"></a>m_bearer_adv_stop</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, m_bearer_adv.o(i.m_bearer_adv_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = m_bearer_adv_stop &rArr; m_bearer_adv_update &rArr; m_bearer_adv_stopped &rArr; m_bearer_closed &rArr; m_tb_buf_release &rArr; m_tb_buf_block_free
</UL>
<BR>[Calls]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_adv_update
</UL>
<BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_stop
</UL>

<P><STRONG><a name="[5a4]"></a>m_bearer_adv_tx_prepare</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, m_bearer_adv.o(i.m_bearer_adv_tx_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_bearer_adv_tx_prepare
</UL>
<BR>[Calls]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_head_reserve
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_send
</UL>

<P><STRONG><a name="[5a1]"></a>m_bearer_adv_update</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, m_bearer_adv.o(i.m_bearer_adv_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = m_bearer_adv_update &rArr; m_bearer_adv_stopped &rArr; m_bearer_closed &rArr; m_tb_buf_release &rArr; m_tb_buf_block_free
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_adv_stopped
</UL>
<BR>[Called By]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_adv_stop
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_update
</UL>

<P><STRONG><a name="[5a2]"></a>m_bearer_closed</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, m_bearer.o(i.m_bearer_closed))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = m_bearer_closed &rArr; m_tb_buf_release &rArr; m_tb_buf_block_free
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_gatt_closed
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_adv_stopped
</UL>

<P><STRONG><a name="[593]"></a>m_bearer_connect_client_cb</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, m_bearer.o(i.m_bearer_connect_client_cb))
<BR><BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_init
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_init
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_bearer_init
</UL>

<P><STRONG><a name="[654]"></a>m_bearer_gatt_connect_api_al</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m_bearer_gatt.o(i.m_bearer_gatt_connect_api_al))
<BR><BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_init
</UL>

<P><STRONG><a name="[5a8]"></a>m_bearer_gatt_send</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, m_bearer_gatt.o(i.m_bearer_gatt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_bearer_gatt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_send_continue
</UL>

<P><STRONG><a name="[5aa]"></a>m_bearer_gatt_start</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, m_bearer_gatt.o(i.m_bearer_gatt_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = m_bearer_gatt_start
</UL>
<BR>[Called By]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_start
</UL>

<P><STRONG><a name="[5ab]"></a>m_bearer_gatt_stop</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, m_bearer_gatt.o(i.m_bearer_gatt_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_bearer_gatt_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_stop
</UL>

<P><STRONG><a name="[5a7]"></a>m_bearer_gatt_tx_prepare</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, m_bearer_gatt.o(i.m_bearer_gatt_tx_prepare))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_send
</UL>

<P><STRONG><a name="[5ac]"></a>m_bearer_gatt_update</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, m_bearer_gatt.o(i.m_bearer_gatt_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_bearer_gatt_update
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_update
</UL>

<P><STRONG><a name="[53c]"></a>m_bearer_get_env_size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_bearer.o(i.m_bearer_get_env_size))
<BR><BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_get_env_size
</UL>

<P><STRONG><a name="[547]"></a>m_bearer_init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, m_bearer.o(i.m_bearer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = m_bearer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_init
</UL>

<P><STRONG><a name="[59f]"></a>m_bearer_opened</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, m_bearer.o(i.m_bearer_opened))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = m_bearer_opened
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_gatt_created
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_adv_started
</UL>

<P><STRONG><a name="[598]"></a>m_bearer_rx</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, m_bearer.o(i.m_bearer_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = m_bearer_rx &rArr; m_tb_buf_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_alloc
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_copy_data_from_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_gatt_rx
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_adv_rx
</UL>

<P><STRONG><a name="[59c]"></a>m_bearer_sent</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, m_bearer.o(i.m_bearer_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = m_bearer_sent &rArr; m_tb_buf_release &rArr; m_tb_buf_block_free
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_head_release
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_djob_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_gatt_sent
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_adv_sent
</UL>

<P><STRONG><a name="[53a]"></a>m_bearer_start</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, m_bearer.o(i.m_bearer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = m_bearer_start &rArr; m_bearer_gatt_start
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_gatt_start
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_adv_start
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_bearer_gatt_start
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_enable
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_bearer_start
</UL>

<P><STRONG><a name="[59e]"></a>m_bearer_started</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, m_bearer.o(i.m_bearer_started))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_gatt_started
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_adv_started
</UL>

<P><STRONG><a name="[538]"></a>m_bearer_stop</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, m_bearer.o(i.m_bearer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = m_bearer_stop &rArr; m_bearer_adv_stop &rArr; m_bearer_adv_update &rArr; m_bearer_adv_stopped &rArr; m_bearer_closed &rArr; m_tb_buf_release &rArr; m_tb_buf_block_free
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_gatt_stop
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_adv_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_bearer_adv_ctrl
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_bearer_gatt_stop
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_disable
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_bearer_started
</UL>

<P><STRONG><a name="[5a3]"></a>m_bearer_stopped</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, m_bearer.o(i.m_bearer_stopped))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_gatt_stopped
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_adv_stopped
</UL>

<P><STRONG><a name="[5fe]"></a>m_fnd_confs_get_env_size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_fnd_confs.o(i.m_fnd_confs_get_env_size))
<BR><BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_get_env_size
</UL>

<P><STRONG><a name="[5da]"></a>m_fnd_confs_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, m_fnd_confs.o(i.m_fnd_confs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = m_fnd_confs_init &rArr; m_api_register_model &rArr; m_tb_mio_register_model &rArr; m_tb_mio_get_local_id
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_register_model
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_init
</UL>

<P><STRONG><a name="[53f]"></a>m_fnd_get_env_size</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, m_fnd.o(i.m_fnd_get_env_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_fnd_get_env_size
</UL>
<BR>[Calls]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_get_env_size
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_get_env_size
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_get_env_size
</UL>
<BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_get_env_size
</UL>

<P><STRONG><a name="[543]"></a>m_fnd_hlths_cfm</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, m_fnd_hlths.o(i.m_fnd_hlths_cfm))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = m_fnd_hlths_cfm &rArr; m_fnd_hlths_send_status &rArr; m_fnd_hlths_process_next &rArr; m_fnd_hlths_process &rArr;  m_fnd_hlths_send_status (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_send_status
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_process_next
</UL>
<BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_health_cfm
</UL>

<P><STRONG><a name="[5ff]"></a>m_fnd_hlths_get_env_size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_fnd_hlths.o(i.m_fnd_hlths_get_env_size))
<BR><BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_get_env_size
</UL>

<P><STRONG><a name="[608]"></a>m_fnd_hlths_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, m_fnd_hlths.o(i.m_fnd_hlths_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = m_fnd_hlths_init &rArr; m_api_register_model &rArr; m_tb_mio_register_model &rArr; m_tb_mio_get_local_id
</UL>
<BR>[Calls]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_register_model
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_init
</UL>

<P><STRONG><a name="[545]"></a>m_fnd_hlths_status_ind</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, m_fnd_hlths.o(i.m_fnd_hlths_status_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = m_fnd_hlths_status_ind &rArr; m_fnd_hlths_send_status &rArr; m_fnd_hlths_process_next &rArr; m_fnd_hlths_process &rArr;  m_fnd_hlths_send_status (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_send_status
</UL>
<BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_health_status_send
</UL>

<P><STRONG><a name="[54a]"></a>m_fnd_init</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, m_fnd.o(i.m_fnd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = m_fnd_init &rArr; m_fnd_pbrs_init &rArr; m_api_register_model &rArr; m_tb_mio_register_model &rArr; m_tb_mio_get_local_id
</UL>
<BR>[Calls]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_init
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_init
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_init
</UL>

<P><STRONG><a name="[60d]"></a>m_fnd_pbrs_bind</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, m_fnd_pbrs.o(i.m_fnd_pbrs_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = m_fnd_pbrs_bind &rArr; m_tb_key_model_bind
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_model_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_ccm_finished_cb
</UL>

<P><STRONG><a name="[43b]"></a>m_fnd_pbrs_check_adv_report</STRONG> (Thumb, 736 bytes, Stack size 56 bytes, m_fnd_pbrs.o(i.m_fnd_pbrs_check_adv_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = m_fnd_pbrs_check_adv_report &rArr; m_fnd_pbrs_scan_report &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_scan_report
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_scan_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_ext_adv_report_ind_handler
</UL>

<P><STRONG><a name="[600]"></a>m_fnd_pbrs_get_env_size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_fnd_pbrs.o(i.m_fnd_pbrs_get_env_size))
<BR><BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_get_env_size
</UL>

<P><STRONG><a name="[60c]"></a>m_fnd_pbrs_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, m_fnd_pbrs.o(i.m_fnd_pbrs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = m_fnd_pbrs_init &rArr; m_api_register_model &rArr; m_tb_mio_register_model &rArr; m_tb_mio_get_local_id
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_register_model
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_init
</UL>

<P><STRONG><a name="[619]"></a>m_fnd_pbrs_link_closed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, m_fnd_pbrs.o(i.m_fnd_pbrs_link_closed))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = m_fnd_pbrs_link_closed &rArr; m_fnd_pbrs_link_state_report &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_link_state_report
</UL>
<BR>[Called By]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_pbrs_prov_bearer_gatt_closed
</UL>

<P><STRONG><a name="[61b]"></a>m_fnd_pbrs_link_created</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, m_fnd_pbrs.o(i.m_fnd_pbrs_link_created))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = m_fnd_pbrs_link_created &rArr; m_fnd_pbrs_link_state_report &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_link_state_report
</UL>
<BR>[Called By]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_pbrs_prov_bearer_gatt_opened
</UL>

<P><STRONG><a name="[61c]"></a>m_fnd_pbrs_link_open_failed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, m_fnd_pbrs.o(i.m_fnd_pbrs_link_open_failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = m_fnd_pbrs_link_open_failed &rArr; m_fnd_pbrs_link_state_report &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_link_state_report
</UL>
<BR>[Called By]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_pbrs_prov_bearer_gatt_opened
</UL>

<P><STRONG><a name="[61d]"></a>m_fnd_pbrs_pdu_rx</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, m_fnd_pbrs.o(i.m_fnd_pbrs_pdu_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = m_fnd_pbrs_pdu_rx &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_model_rsp_send
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_buf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_pbrs_prov_bearer_gatt_rx
</UL>

<P><STRONG><a name="[61e]"></a>m_fnd_pbrs_pdu_sent</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, m_fnd_pbrs.o(i.m_fnd_pbrs_pdu_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = m_fnd_pbrs_pdu_sent &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_model_rsp_send
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_buf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_pbrs_prov_bearer_gatt_sent
</UL>

<P><STRONG><a name="[665]"></a>m_lay_access_connect_api_utrans</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m_lay_access.o(i.m_lay_access_connect_api_utrans))
<BR><BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_init
</UL>

<P><STRONG><a name="[644]"></a>m_lay_access_get_env_size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_lay_access.o(i.m_lay_access_get_env_size))
<BR><BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_get_env_size
</UL>

<P><STRONG><a name="[620]"></a>m_lay_access_init</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, m_lay_access.o(i.m_lay_access_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = m_lay_access_init
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_init
</UL>

<P><STRONG><a name="[559]"></a>m_lay_access_opcode_status</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, m_lay_access.o(i.m_lay_access_opcode_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = m_lay_access_opcode_status &rArr; m_al_djob_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_djob_reg
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_cb_get
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_model_opcode_status
</UL>

<P><STRONG><a name="[55b]"></a>m_lay_access_publish</STRONG> (Thumb, 254 bytes, Stack size 64 bytes, m_lay_access.o(i.m_lay_access_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = m_lay_access_publish &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_is_feature_sup
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_model_bind_check
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_get_iv_seq
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_app_get
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_acquire
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_publi_param
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_element_addr
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_opcode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_model_publish
</UL>

<P><STRONG><a name="[55d]"></a>m_lay_access_rsp_send</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, m_lay_access.o(i.m_lay_access_rsp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_model_bind_check
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_get_iv_seq
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_app_get
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_acquire
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_element_addr
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_opcode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_model_rsp_send
</UL>

<P><STRONG><a name="[23a]"></a>m_lay_friend_cb_state_updated</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, m_lay_friend.o(i.m_lay_friend_cb_state_updated))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = m_lay_friend_cb_state_updated &rArr; m_lay_friend_end_friendship &rArr; m_tb_timer_clear &rArr; m_tb_timer_remove &rArr; m_tb_timer_prog &rArr; m_al_timer_get_delay &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_end_friendship
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_friend.o(.constdata)
</UL>
<P><STRONG><a name="[65f]"></a>m_lay_friend_connect_api_net</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m_lay_friend.o(i.m_lay_friend_connect_api_net))
<BR><BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_init
</UL>

<P><STRONG><a name="[660]"></a>m_lay_friend_connect_api_utrans</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m_lay_friend.o(i.m_lay_friend_connect_api_utrans))
<BR><BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_init
</UL>

<P><STRONG><a name="[647]"></a>m_lay_friend_get_env_size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_lay_friend.o(i.m_lay_friend_get_env_size))
<BR><BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_get_env_size
</UL>

<P><STRONG><a name="[638]"></a>m_lay_friend_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, m_lay_friend.o(i.m_lay_friend_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_lay_friend_init
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_free
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_init
</UL>

<P><STRONG><a name="[53d]"></a>m_lay_get_env_size</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, m_lay.o(i.m_lay_get_env_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_lay_get_env_size
</UL>
<BR>[Calls]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_get_env_size
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_get_env_size
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_get_env_size
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_get_env_size
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_get_env_size
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_hb_get_env_size
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_get_env_size
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_get_env_size
</UL>
<BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_get_env_size
</UL>

<P><STRONG><a name="[23d]"></a>m_lay_hb_cb_state_updated</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, m_lay_hb.o(i.m_lay_hb_cb_state_updated))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = m_lay_hb_cb_state_updated &rArr; m_lay_hb_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_set
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_clear
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_hb_subs_params
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_hb_pub_params
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_hb_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_hb.o(.constdata)
</UL>
<P><STRONG><a name="[65b]"></a>m_lay_hb_connect_api_utrans</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m_lay_hb.o(i.m_lay_hb_connect_api_utrans))
<BR><BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_init
</UL>

<P><STRONG><a name="[645]"></a>m_lay_hb_get_env_size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_lay_hb.o(i.m_lay_hb_get_env_size))
<BR><BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_get_env_size
</UL>

<P><STRONG><a name="[64b]"></a>m_lay_hb_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, m_lay_hb.o(i.m_lay_hb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_lay_hb_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_init
</UL>

<P><STRONG><a name="[548]"></a>m_lay_init</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, m_lay.o(i.m_lay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = m_lay_init &rArr; m_lay_lpn_init &rArr; m_lay_lpn_clean_env &rArr; m_tb_key_friend_end_ind &rArr; m_tb_key_friend_nid_tbl_del
</UL>
<BR>[Calls]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_connect_client_cb
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_set_hb_cb
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_set_friend_cb
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_init
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_connect_cb
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_connect_api_ltrans
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_init
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_connect_api_net
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_bearer_connect_api
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_init
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_connect_cb_lpn_rx
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_connect_cb
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_connect_api_bearer
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_init
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_connect_cb_seg
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_connect_cb
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_connect_api_net
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_init
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_connect_api_utrans
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_hb_init
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_hb_connect_api_utrans
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_init
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_connect_api_utrans
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_connect_api_net
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_init
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_connect_api_utrans
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_gatt_connect_api_al
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_adv_connect_api_al
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_init
</UL>

<P><STRONG><a name="[661]"></a>m_lay_lpn_connect_api_utrans</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m_lay_lpn.o(i.m_lay_lpn_connect_api_utrans))
<BR><BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_init
</UL>

<P><STRONG><a name="[646]"></a>m_lay_lpn_get_env_size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_lay_lpn.o(i.m_lay_lpn_get_env_size))
<BR><BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_get_env_size
</UL>

<P><STRONG><a name="[651]"></a>m_lay_lpn_init</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, m_lay_lpn.o(i.m_lay_lpn_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = m_lay_lpn_init &rArr; m_lay_lpn_clean_env &rArr; m_tb_key_friend_end_ind &rArr; m_tb_key_friend_nid_tbl_del
</UL>
<BR>[Calls]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_clean_env
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_init
</UL>

<P><STRONG><a name="[552]"></a>m_lay_lpn_select_friend</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, m_lay_lpn.o(i.m_lay_lpn_select_friend))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = m_lay_lpn_select_friend &rArr; m_tb_key_friend_new_ind &rArr; m_tb_sec_k2_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_clear
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_friend_new_ind
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_prim_addr
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_seek_offer
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_clean_list_offer
</UL>
<BR>[Called By]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_lpn_select_friend
</UL>

<P><STRONG><a name="[554]"></a>m_lay_lpn_start</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, m_lay_lpn.o(i.m_lay_lpn_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = m_lay_lpn_start &rArr; m_lay_lpn_send_req &rArr; m_lay_lpn_pack &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init (via Veneer)
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_malloc
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_send_req
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_clean_env
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_lpn_start
</UL>

<P><STRONG><a name="[556]"></a>m_lay_lpn_stop</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, m_lay_lpn.o(i.m_lay_lpn_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = m_lay_lpn_stop &rArr; m_lay_lpn_pack &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_clear
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_set_lpn_state
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_lpn_state
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_prim_addr
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_pack
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_clean_list_offer
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_clean_env
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_lpn_stop
</UL>

<P><STRONG><a name="[657]"></a>m_lay_ltrans_connect_api_net</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m_lay_ltrans.o(i.m_lay_ltrans_connect_api_net))
<BR><BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_init
</UL>

<P><STRONG><a name="[658]"></a>m_lay_ltrans_connect_cb</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m_lay_ltrans.o(i.m_lay_ltrans_connect_cb))
<BR><BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_init
</UL>

<P><STRONG><a name="[65e]"></a>m_lay_ltrans_connect_cb_seg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m_lay_ltrans.o(i.m_lay_ltrans_connect_cb_seg))
<BR><BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_init
</UL>

<P><STRONG><a name="[642]"></a>m_lay_ltrans_get_env_size</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, m_lay_ltrans.o(i.m_lay_ltrans_get_env_size))
<BR><BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_get_env_size
</UL>

<P><STRONG><a name="[64f]"></a>m_lay_ltrans_init</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, m_lay_ltrans.o(i.m_lay_ltrans_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = m_lay_ltrans_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset (via Veneer)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_init
</UL>

<P><STRONG><a name="[655]"></a>m_lay_net_connect_api_bearer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m_lay_net.o(i.m_lay_net_connect_api_bearer))
<BR><BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_init
</UL>

<P><STRONG><a name="[656]"></a>m_lay_net_connect_cb</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, m_lay_net.o(i.m_lay_net_connect_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_lay_net_connect_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_intf_type_to_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_init
</UL>

<P><STRONG><a name="[662]"></a>m_lay_net_connect_cb_lpn_rx</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m_lay_net.o(i.m_lay_net_connect_cb_lpn_rx))
<BR><BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_init
</UL>

<P><STRONG><a name="[641]"></a>m_lay_net_get_env_size</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, m_lay_net.o(i.m_lay_net_get_env_size))
<BR><BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_get_env_size
</UL>

<P><STRONG><a name="[59b]"></a>m_lay_net_get_sending_buf_in_queue</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, m_lay_net.o(i.m_lay_net_get_sending_buf_in_queue))
<BR><BR>[Called By]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_adv_send
</UL>

<P><STRONG><a name="[64e]"></a>m_lay_net_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, m_lay_net.o(i.m_lay_net_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_lay_net_init
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_init
</UL>

<P><STRONG><a name="[576]"></a>m_lay_proxy_bearer_adv_ctrl</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, m_lay_proxy.o(i.m_lay_proxy_bearer_adv_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = m_lay_proxy_bearer_adv_ctrl &rArr; m_lay_proxy_adv_data_set &rArr; m_tb_sec_rand_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_set
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_clear
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_set_node_identity
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_stop
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_adv_data_set
</UL>
<BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_set_node_identity
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_state_set
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_proxy_ctrl
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_bearer_adv_timer_handler
</UL>

<P><STRONG><a name="[664]"></a>m_lay_proxy_bearer_connect_api</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, m_lay_proxy.o(i.m_lay_proxy_bearer_connect_api))
<BR><BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_init
</UL>

<P><STRONG><a name="[663]"></a>m_lay_proxy_connect_api_net</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, m_lay_proxy.o(i.m_lay_proxy_connect_api_net))
<BR><BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_init
</UL>

<P><STRONG><a name="[648]"></a>m_lay_proxy_get_env_size</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, m_lay_proxy.o(i.m_lay_proxy_get_env_size))
<BR><BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_get_env_size
</UL>

<P><STRONG><a name="[652]"></a>m_lay_proxy_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, m_lay_proxy.o(i.m_lay_proxy_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = m_lay_proxy_init &rArr; m_lay_proxy_bearer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_bearer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_init
</UL>

<P><STRONG><a name="[522]"></a>m_lay_proxy_state_set</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, m_lay_proxy.o(i.m_lay_proxy_state_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = m_lay_proxy_state_set &rArr; m_lay_proxy_bearer_adv_ctrl &rArr; m_lay_proxy_adv_data_set &rArr; m_tb_sec_rand_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_bearer_adv_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_bearer_operation_close_cb
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_set_gatt_proxy_state
</UL>

<P><STRONG><a name="[659]"></a>m_lay_utrans_connect_api_ltrans</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m_lay_utrans.o(i.m_lay_utrans_connect_api_ltrans))
<BR><BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_init
</UL>

<P><STRONG><a name="[65a]"></a>m_lay_utrans_connect_cb</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, m_lay_utrans.o(i.m_lay_utrans_connect_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_lay_utrans_connect_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_intf_type_to_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_init
</UL>

<P><STRONG><a name="[643]"></a>m_lay_utrans_get_env_size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_lay_utrans.o(i.m_lay_utrans_get_env_size))
<BR><BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_get_env_size
</UL>

<P><STRONG><a name="[650]"></a>m_lay_utrans_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, m_lay_utrans.o(i.m_lay_utrans_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_lay_utrans_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_init
</UL>

<P><STRONG><a name="[70a]"></a>m_pbrs_prov_bearer_gatt_cb_regist</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, m_pbrs_prov_bearer.o(i.m_pbrs_prov_bearer_gatt_cb_regist))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_remote_central_init
</UL>

<P><STRONG><a name="[614]"></a>m_pbrs_prov_bearer_gatt_close</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, m_pbrs_prov_bearer.o(i.m_pbrs_prov_bearer_gatt_close))
<BR><BR>[Called By]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_handler_link
</UL>

<P><STRONG><a name="[699]"></a>m_pbrs_prov_bearer_gatt_closed</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, m_pbrs_prov_bearer.o(i.m_pbrs_prov_bearer_gatt_closed))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = m_pbrs_prov_bearer_gatt_closed &rArr; m_fnd_pbrs_link_closed &rArr; m_fnd_pbrs_link_state_report &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_link_closed
</UL>
<BR>[Called By]<UL><LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_remote_disconnected
</UL>

<P><STRONG><a name="[613]"></a>m_pbrs_prov_bearer_gatt_create</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, m_pbrs_prov_bearer.o(i.m_pbrs_prov_bearer_gatt_create))
<BR><BR>[Called By]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_handler_link
</UL>

<P><STRONG><a name="[69a]"></a>m_pbrs_prov_bearer_gatt_opened</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, m_pbrs_prov_bearer.o(i.m_pbrs_prov_bearer_gatt_opened))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = m_pbrs_prov_bearer_gatt_opened &rArr; m_fnd_pbrs_link_open_failed &rArr; m_fnd_pbrs_link_state_report &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_link_open_failed
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_link_created
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_remote_connect_timeout
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_remote_central_msg_handler
</UL>

<P><STRONG><a name="[69b]"></a>m_pbrs_prov_bearer_gatt_rx</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, m_pbrs_prov_bearer.o(i.m_pbrs_prov_bearer_gatt_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = m_pbrs_prov_bearer_gatt_rx &rArr; m_fnd_pbrs_pdu_rx &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_pdu_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_remote_central_msg_handler
</UL>

<P><STRONG><a name="[61f]"></a>m_pbrs_prov_bearer_gatt_send</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, m_pbrs_prov_bearer.o(i.m_pbrs_prov_bearer_gatt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = m_pbrs_prov_bearer_gatt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_malloc
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_free
</UL>
<BR>[Called By]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_process
</UL>

<P><STRONG><a name="[69c]"></a>m_pbrs_prov_bearer_gatt_sent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_pbrs_prov_bearer.o(i.m_pbrs_prov_bearer_gatt_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = m_pbrs_prov_bearer_gatt_sent &rArr; m_fnd_pbrs_pdu_sent &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_pdu_sent
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_remote_central_msg_handler
</UL>

<P><STRONG><a name="[69d]"></a>m_prov_adv_trans_clean_up</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, m_prov_adv_trans.o(i.m_prov_adv_trans_clean_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = m_prov_adv_trans_clean_up &rArr; m_prov_pdu_sent &rArr; m_tb_timer_set &rArr; m_tb_timer_insert &rArr; m_tb_timer_prog &rArr; m_al_timer_get_delay &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_free
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_clear
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pdu_sent
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_sent
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_link_closed
</UL>

<P><STRONG><a name="[69f]"></a>m_prov_adv_trans_link_close_send</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, m_prov_adv_trans.o(i.m_prov_adv_trans_link_close_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = m_prov_adv_trans_link_close_send &rArr; m_prov_adv_trans_tx_set &rArr; m_tb_timer_set &rArr; m_tb_timer_insert &rArr; m_tb_timer_prog &rArr; m_al_timer_get_delay &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_tx_set
</UL>
<BR>[Called By]<UL><LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_bearer_close
</UL>

<P><STRONG><a name="[6a1]"></a>m_prov_adv_trans_rx</STRONG> (Thumb, 690 bytes, Stack size 48 bytes, m_prov_adv_trans.o(i.m_prov_adv_trans_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = m_prov_adv_trans_rx &rArr; m_prov_link_closed &rArr; m_bcn_state_update &rArr; m_bcn_adv_tx_check &rArr; m_bcn_prep_secure_bcn &rArr; m_bcn_insert_encrypt_queue &rArr; m_tb_sec_cmac_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init (via Veneer)
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_malloc
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_alloc
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_head_release
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pdu_sent
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_link_open
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_link_closed
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_tx_set
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_rx_check
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_bearer_rx_cb
</UL>

<P><STRONG><a name="[6a7]"></a>m_prov_adv_trans_send</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, m_prov_adv_trans.o(i.m_prov_adv_trans_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = m_prov_adv_trans_send &rArr; m_prov_adv_trans_tx_set &rArr; m_tb_timer_set &rArr; m_tb_timer_insert &rArr; m_tb_timer_prog &rArr; m_al_timer_get_delay &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_acquire
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_tx_set
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_fcs_compute
</UL>
<BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pdu_send
</UL>

<P><STRONG><a name="[6a8]"></a>m_prov_adv_trans_sent</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, m_prov_adv_trans.o(i.m_prov_adv_trans_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = m_prov_adv_trans_sent &rArr; m_prov_link_closed &rArr; m_bcn_state_update &rArr; m_bcn_adv_tx_check &rArr; m_bcn_prep_secure_bcn &rArr; m_bcn_insert_encrypt_queue &rArr; m_tb_sec_cmac_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_clean_up
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_link_closed
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_tx_set
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_bearer_sent_cb
</UL>

<P><STRONG><a name="[6aa]"></a>m_prov_bearer_close</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, m_prov_bearer.o(i.m_prov_bearer_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = m_prov_bearer_close &rArr; m_prov_adv_trans_link_close_send &rArr; m_prov_adv_trans_tx_set &rArr; m_tb_timer_set &rArr; m_tb_timer_insert &rArr; m_tb_timer_prog &rArr; m_al_timer_get_delay &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_link_close_send
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_trans_timeout_cb
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_link_timeout_cb
</UL>

<P><STRONG><a name="[6ab]"></a>m_prov_bearer_gatt_send</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, m_prov_bearer.o(i.m_prov_bearer_gatt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_prov_bearer_gatt_send &rArr; m_prov_bearer_send
</UL>
<BR>[Calls]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_head_reserve
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_bearer_send
</UL>
<BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pdu_send
</UL>

<P><STRONG><a name="[52a]"></a>m_prov_bearer_gatt_start</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, m_prov_bearer.o(i.m_prov_bearer_gatt_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = m_prov_bearer_gatt_start &rArr; m_tb_buf_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_malloc
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_alloc
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_bearer_operation_open_cb
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pub_key_res_cb
</UL>

<P><STRONG><a name="[525]"></a>m_prov_bearer_gatt_stop</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, m_prov_bearer.o(i.m_prov_bearer_gatt_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = m_prov_bearer_gatt_stop &rArr; m_bearer_stop &rArr; m_bearer_adv_stop &rArr; m_bearer_adv_update &rArr; m_bearer_adv_stopped &rArr; m_bearer_closed &rArr; m_tb_buf_release &rArr; m_tb_buf_block_free
</UL>
<BR>[Calls]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_bearer_operation_close_cb
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_link_open
</UL>

<P><STRONG><a name="[6ac]"></a>m_prov_bearer_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, m_prov_bearer.o(i.m_prov_bearer_init))
<BR><BR>[Calls]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_connect_client_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_init
</UL>

<P><STRONG><a name="[6b6]"></a>m_prov_bearer_scan_start</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, m_prov_bearer.o(i.m_prov_bearer_scan_start))
<BR><BR>[Called By]<UL><LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_link_closed
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pub_key_res_cb
</UL>

<P><STRONG><a name="[6b7]"></a>m_prov_bearer_scan_stop</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, m_prov_bearer.o(i.m_prov_bearer_scan_stop))
<BR><BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_link_open
</UL>

<P><STRONG><a name="[6a9]"></a>m_prov_bearer_send</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, m_prov_bearer.o(i.m_prov_bearer_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_prov_bearer_send
</UL>
<BR>[Called By]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_bearer_gatt_send
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_tx_cb
</UL>

<P><STRONG><a name="[53e]"></a>m_prov_get_env_size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_prov.o(i.m_prov_get_env_size))
<BR><BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_get_env_size
</UL>

<P><STRONG><a name="[549]"></a>m_prov_init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, m_prov.o(i.m_prov_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_prov_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_free
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_bearer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_init
</UL>

<P><STRONG><a name="[6a2]"></a>m_prov_link_closed</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, m_prov.o(i.m_prov_link_closed))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = m_prov_link_closed &rArr; m_bcn_state_update &rArr; m_bcn_adv_tx_check &rArr; m_bcn_prep_secure_bcn &rArr; m_bcn_insert_encrypt_queue &rArr; m_tb_sec_cmac_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_free
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_clear
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_is_feature_sup
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_set_node_identity
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_next
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_sec_pub_key_read
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_state_update
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_set_prov_state
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_set_gatt_proxy_state
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_bearer_scan_start
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_clean_up
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_state_send
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_sent
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_rx
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_bearer_closed_cb
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_link_timeout_cb
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_tx_cb
</UL>

<P><STRONG><a name="[6a3]"></a>m_prov_link_open</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, m_prov.o(i.m_prov_link_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = m_prov_link_open &rArr; m_prov_bearer_gatt_stop &rArr; m_bearer_stop &rArr; m_bearer_adv_stop &rArr; m_bearer_adv_update &rArr; m_bearer_adv_stopped &rArr; m_bearer_closed &rArr; m_tb_buf_release &rArr; m_tb_buf_block_free
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_set
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_is_feature_sup
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_bearer_gatt_stop
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_stop_tx_unprov_bcn
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_bearer_scan_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_rx
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_bearer_opened_cb
</UL>

<P><STRONG><a name="[572]"></a>m_prov_oob_auth_rsp</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, m_prov.o(i.m_prov_oob_auth_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = m_prov_oob_auth_rsp &rArr; m_tb_sec_rand_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pdu_send
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_error_handle
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_rand_start
</UL>
<BR>[Called By]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_prov_oob_auth_rsp
</UL>

<P><STRONG><a name="[573]"></a>m_prov_param_rsp</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, m_prov.o(i.m_prov_param_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = m_prov_param_rsp &rArr; m_al_sec_pub_key_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_sec_pub_key_read
</UL>
<BR>[Called By]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_prov_param_rsp
</UL>

<P><STRONG><a name="[6a6]"></a>m_prov_pdu_rx</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, m_prov.o(i.m_prov_pdu_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = m_prov_pdu_rx &rArr; m_prov_error_handle &rArr; m_prov_pdu_send &rArr; m_prov_adv_trans_send &rArr; m_prov_adv_trans_tx_set &rArr; m_tb_timer_set &rArr; m_tb_timer_insert &rArr; m_tb_timer_prog &rArr; m_al_timer_get_delay &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_set
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pdu_handle
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_error_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_bearer_rx_cb
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_rx_check
</UL>

<P><STRONG><a name="[69e]"></a>m_prov_pdu_sent</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, m_prov.o(i.m_prov_pdu_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = m_prov_pdu_sent &rArr; m_tb_timer_set &rArr; m_tb_timer_insert &rArr; m_tb_timer_prog &rArr; m_al_timer_get_delay &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_set
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_clear
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_buf_release
</UL>
<BR>[Called By]<UL><LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_rx
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_bearer_sent_cb
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_clean_up
</UL>

<P><STRONG><a name="[574]"></a>m_prov_pub_key_get</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, m_prov.o(i.m_prov_pub_key_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_prov_pub_key_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_prov_pub_key_read
</UL>

<P><STRONG><a name="[528]"></a>m_prov_start</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, m_prov.o(i.m_prov_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = m_prov_start &rArr; m_al_djob_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_malloc
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_djob_reg
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_set_prov_state
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_bearer_operation_open_cb
</UL>

<P><STRONG><a name="[575]"></a>m_prov_stop_link_timeout</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, m_prov.o(i.m_prov_stop_link_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = m_prov_stop_link_timeout &rArr; m_tb_timer_clear &rArr; m_tb_timer_remove &rArr; m_tb_timer_prog &rArr; m_al_timer_get_delay &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_prov_stop_link_timeout
</UL>

<P><STRONG><a name="[58c]"></a>m_tb_buf_acquire</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m_tb_buf.o(i.m_tb_buf_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_send
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_cb_rx
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_rsp_send
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_publish
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_send
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_handler_offer
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_rx
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_tx_cb
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_send
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_rx
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_send
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_rx
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_send_seg
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_send
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_block_ack_send
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_rx_ltrans_unseg
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_rx_ltrans_seg
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_handler_subs_list
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_handler_poll
</UL>

<P><STRONG><a name="[52d]"></a>m_tb_buf_alloc</STRONG> (Thumb, 194 bytes, Stack size 56 bytes, m_tb_buf.o(i.m_tb_buf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = m_tb_buf_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_extract (via Veneer)
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_cb_rx
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_buf_alloc
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_rx
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_bearer_gatt_start
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_buf_alloc
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_cb_rx
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_buf_alloc
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_rx
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pdu_send
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_rx
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_filt_status_send
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_bearer_start
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_pack
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_cb_rx
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_buf_alloc
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_ccm_enc_ready_cb
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_ccm_dec_ready_cb
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_send
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_desobfusc_finished_cb
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_check_relay
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_rx
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_hb_send
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_send
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_rx_seg_all
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_rx_ltrans_unseg
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_rx_ltrans_seg
</UL>

<P><STRONG><a name="[52f]"></a>m_tb_buf_block_alloc</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, m_tb_buf.o(i.m_tb_buf_block_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = m_tb_buf_block_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_init
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_buf_alloc_block
</UL>

<P><STRONG><a name="[531]"></a>m_tb_buf_block_free</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, m_tb_buf.o(i.m_tb_buf_block_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = m_tb_buf_block_free
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_extract (via Veneer)
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_free
</UL>
<BR>[Called By]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_buf_free_block
</UL>

<P><STRONG><a name="[5b2]"></a>m_tb_buf_copy</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, m_tb_buf.o(i.m_tb_buf_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = m_tb_buf_copy &rArr; m_tb_buf_copy_data
</UL>
<BR>[Calls]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_copy_data
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_cb_rx
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_cb_rx
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_rx
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_cb_rx
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_ccm_enc_ready_cb
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_ccm_dec_ready_cb
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_desobfusc_finished_cb
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_check_relay
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_ccm_enc_ready_cb
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_rx_seg_all
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_rx_ltrans_unseg
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_rx_ltrans_seg
</UL>

<P><STRONG><a name="[5a6]"></a>m_tb_buf_copy_data_from_mem</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, m_tb_buf.o(i.m_tb_buf_copy_data_from_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = m_tb_buf_copy_data_from_mem &rArr; m_tb_buf_copy_data
</UL>
<BR>[Calls]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_copy_data
</UL>
<BR>[Called By]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_rx
</UL>

<P><STRONG><a name="[6be]"></a>m_tb_buf_get_env_size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_tb_buf.o(i.m_tb_buf_get_env_size))
<BR><BR>[Called By]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_get_env_size
</UL>

<P><STRONG><a name="[5a9]"></a>m_tb_buf_head_release</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, m_tb_buf.o(i.m_tb_buf_head_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_tb_buf_head_release
</UL>
<BR>[Called By]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_sent
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_rx
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_bearer_rx_cb
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_rx
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_sent
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_ccm_dec_finished_cb
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_rx
</UL>

<P><STRONG><a name="[5a5]"></a>m_tb_buf_head_reserve</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, m_tb_buf.o(i.m_tb_buf_head_reserve))
<BR><BR>[Called By]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_adv_tx_prepare
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_bearer_gatt_send
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_opcode_set
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_add_header
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_send
</UL>

<P><STRONG><a name="[6ba]"></a>m_tb_buf_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, m_tb_buf.o(i.m_tb_buf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = m_tb_buf_init &rArr; m_tb_buf_block_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_free
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_block_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_init
</UL>

<P><STRONG><a name="[533]"></a>m_tb_buf_release</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, m_tb_buf.o(i.m_tb_buf_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = m_tb_buf_release &rArr; m_tb_buf_block_free
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_free
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_block_free
</UL>
<BR>[Called By]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_process_next
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_cb_sent
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_sent
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_rx
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_closed
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_send_continue
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_cmac_finished_cb
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_bearer_gatt_start
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_stop
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_buf_release
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process_next
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_cb_sent
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_sent
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_rx
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_bearer_gatt_started
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_clean_up
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pdu_send
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_sent
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_filt_status_send
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_check_relay
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_bearer_started
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_bearer_start
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_sent
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_pack
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_clean_list_offer
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_cb_timer_offer
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_sent
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_retx_timer_cb
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_model_check
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_process_next
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_cb_sent
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_tx_cb
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_rx_check
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_tx
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_sent
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_decrypt_err
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_ccm_enc_finished_cb
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_ccm_dec_finished_cb
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_sent
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_send
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_encrypt_err
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_decrypt_err
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_check_relay
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_ccm_dec_finished_cb
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_trans_incomp_timer
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_sent
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_send
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_seg_finished
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_rx
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_hb_send
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_hb_cb_sent
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_sent_utrans
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_send
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_rx_seg_all
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_rx_ltrans_unseg
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_rx_ltrans
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_handler_poll
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_check_queue_length
</UL>

<P><STRONG><a name="[63f]"></a>m_tb_buf_reuse</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, m_tb_buf.o(i.m_tb_buf_reuse))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_tb_buf_reuse
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_tx_cb
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_send_seg
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_block_ack_send
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_send
</UL>

<P><STRONG><a name="[679]"></a>m_tb_buf_tail_release</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, m_tb_buf.o(i.m_tb_buf_tail_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_tb_buf_tail_release
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_ccm_dec_finished_cb
</UL>

<P><STRONG><a name="[6c3]"></a>m_tb_friend_get_env_size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_tb_friend.o(i.m_tb_friend_get_env_size))
<BR><BR>[Called By]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_get_env_size
</UL>

<P><STRONG><a name="[632]"></a>m_tb_friend_get_friend_cnt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, m_tb_friend.o(i.m_tb_friend_get_friend_cnt))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_handler_request
</UL>

<P><STRONG><a name="[631]"></a>m_tb_friend_get_nb_lpn_known</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m_tb_friend.o(i.m_tb_friend_get_nb_lpn_known))
<BR><BR>[Called By]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_seek_lpn
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_handler_request
</UL>

<P><STRONG><a name="[5f7]"></a>m_tb_friend_get_polltimeout_ms</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, m_tb_friend.o(i.m_tb_friend_get_polltimeout_ms))
<BR><BR>[Called By]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_lpn_polltimeout_status
</UL>

<P><STRONG><a name="[6bb]"></a>m_tb_friend_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, m_tb_friend.o(i.m_tb_friend_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_tb_friend_init
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_init
</UL>

<P><STRONG><a name="[5f6]"></a>m_tb_friend_is_lpn</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, m_tb_friend.o(i.m_tb_friend_is_lpn))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = m_tb_friend_is_lpn
</UL>
<BR>[Called By]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_lpn_polltimeout_status
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_ccm_dec_finished_cb
</UL>

<P><STRONG><a name="[63c]"></a>m_tb_friend_is_subs_dst</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, m_tb_friend.o(i.m_tb_friend_is_subs_dst))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = m_tb_friend_is_subs_dst
</UL>
<BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_rx_seg_all
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_rx_ltrans_unseg
</UL>

<P><STRONG><a name="[633]"></a>m_tb_friend_lpn_add</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, m_tb_friend.o(i.m_tb_friend_lpn_add))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_handler_request
</UL>

<P><STRONG><a name="[630]"></a>m_tb_friend_lpn_estab</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, m_tb_friend.o(i.m_tb_friend_lpn_estab))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_handler_poll
</UL>

<P><STRONG><a name="[62e]"></a>m_tb_friend_lpn_rem</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, m_tb_friend.o(i.m_tb_friend_lpn_rem))
<BR><BR>[Called By]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_end_friendship
</UL>

<P><STRONG><a name="[637]"></a>m_tb_friend_subs_list_update</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, m_tb_friend.o(i.m_tb_friend_subs_list_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_tb_friend_subs_list_update
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_handler_subs_list
</UL>

<P><STRONG><a name="[53b]"></a>m_tb_get_env_size</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, m_tb.o(i.m_tb_get_env_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_tb_get_env_size
</UL>
<BR>[Calls]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_get_env_size
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_get_env_size
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_get_env_size
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_get_env_size
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_env_size
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_get_env_size
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_env_size
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_friend_get_env_size
</UL>
<BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_get_env_size
</UL>

<P><STRONG><a name="[546]"></a>m_tb_init</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, m_tb.o(i.m_tb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = m_tb_init &rArr; m_tb_key_init &rArr; m_tb_key_friend_end_ind &rArr; m_tb_key_friend_nid_tbl_del
</UL>
<BR>[Calls]<UL><LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_init
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_init
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_init
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_init
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_init
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_init
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_init
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_friend_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_init
</UL>

<P><STRONG><a name="[5bd]"></a>m_tb_key_app_add</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, m_tb_key.o(i.m_tb_key_app_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = m_tb_key_app_add &rArr; m_tb_sec_k4_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_malloc
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_k4_start
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_create_start
</UL>
<BR>[Called By]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_appkey
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_load_fsm
</UL>

<P><STRONG><a name="[5ba]"></a>m_tb_key_app_delete</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, m_tb_key.o(i.m_tb_key_app_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = m_tb_key_app_delete &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_free
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_ind
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_aid_tbl_del
</UL>
<BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_netkey
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_appkey
</UL>

<P><STRONG><a name="[563]"></a>m_tb_key_app_find</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, m_tb_key.o(i.m_tb_key_app_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = m_tb_key_app_find
</UL>
<BR>[Called By]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_app_update
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_exec_cmd
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_model_pub_set
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_model_app
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_appkey
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_cb_sec_cmac_pub_finished
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_load_publi_param
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_load_binding
</UL>

<P><STRONG><a name="[5fb]"></a>m_tb_key_app_get</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, m_tb_key.o(i.m_tb_key_app_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = m_tb_key_app_get
</UL>
<BR>[Called By]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_rsp_send
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_publish
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_model_pub_status
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_publi_param_ind
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_app_key_ind
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_retx_timer_cb
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_ccm_enc_ready_cb
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_ccm_dec_ready_cb
</UL>

<P><STRONG><a name="[5f2]"></a>m_tb_key_app_get_ids</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, m_tb_key.o(i.m_tb_key_app_get_ids))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = m_tb_key_app_get_ids
</UL>
<BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_appkey_list
</UL>

<P><STRONG><a name="[5d5]"></a>m_tb_key_app_get_lids</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, m_tb_key.o(i.m_tb_key_app_get_lids))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = m_tb_key_app_get_lids
</UL>
<BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_netkey
</UL>

<P><STRONG><a name="[698]"></a>m_tb_key_app_lid_from_net_aid</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, m_tb_key.o(i.m_tb_key_app_lid_from_net_aid))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = m_tb_key_app_lid_from_net_aid
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_rx
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_decrypt_err
</UL>

<P><STRONG><a name="[5bc]"></a>m_tb_key_app_update</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, m_tb_key.o(i.m_tb_key_app_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = m_tb_key_app_update &rArr; m_tb_sec_k4_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_malloc
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_k4_start
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_app_find
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_create_start
</UL>
<BR>[Called By]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_appkey
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_cb_appkey_added
</UL>

<P><STRONG><a name="[6ad]"></a>m_tb_key_dev_add</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, m_tb_key.o(i.m_tb_key_dev_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = m_tb_key_dev_add &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_malloc
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_load_states
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_ccm_finished_cb
</UL>

<P><STRONG><a name="[696]"></a>m_tb_key_dev_get</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, m_tb_key.o(i.m_tb_key_dev_get))
<BR><BR>[Called By]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_state_ind
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_ccm_enc_ready_cb
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_ccm_dec_ready_cb
</UL>

<P><STRONG><a name="[62d]"></a>m_tb_key_friend_end_ind</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, m_tb_key.o(i.m_tb_key_friend_end_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = m_tb_key_friend_end_ind &rArr; m_tb_key_friend_nid_tbl_del
</UL>
<BR>[Calls]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_free
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_friend_nid_tbl_del
</UL>
<BR>[Called By]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_init
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_clean_env
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_end_friendship
</UL>

<P><STRONG><a name="[67e]"></a>m_tb_key_friend_get_key</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, m_tb_key.o(i.m_tb_key_friend_get_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = m_tb_key_friend_get_key &rArr; m_tb_key_friend_get_cred
</UL>
<BR>[Calls]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_friend_get_cred
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_obfusc_ready_cb
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_desobfusc_ready_cb
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_ccm_enc_ready_cb
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_ccm_dec_ready_cb
</UL>

<P><STRONG><a name="[677]"></a>m_tb_key_friend_get_nid</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, m_tb_key.o(i.m_tb_key_friend_get_nid))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = m_tb_key_friend_get_nid &rArr; m_tb_key_friend_get_cred
</UL>
<BR>[Calls]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_friend_get_cred
</UL>
<BR>[Called By]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_add_header
</UL>

<P><STRONG><a name="[685]"></a>m_tb_key_friend_net_lid_from_nid</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, m_tb_key.o(i.m_tb_key_friend_net_lid_from_nid))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = m_tb_key_friend_net_lid_from_nid
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_rx
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_decrypt_err
</UL>

<P><STRONG><a name="[635]"></a>m_tb_key_friend_new_ind</STRONG> (Thumb, 332 bytes, Stack size 40 bytes, m_tb_key.o(i.m_tb_key_friend_new_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = m_tb_key_friend_new_ind &rArr; m_tb_sec_k2_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_malloc
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_free
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_k2_start
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_select_friend
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_handler_request
</UL>

<P><STRONG><a name="[6bd]"></a>m_tb_key_get_env_size</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, m_tb_key.o(i.m_tb_key_get_env_size))
<BR><BR>[Called By]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_get_env_size
</UL>

<P><STRONG><a name="[689]"></a>m_tb_key_get_iv_rx</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, m_tb_key.o(i.m_tb_key_get_iv_rx))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_rx
</UL>

<P><STRONG><a name="[627]"></a>m_tb_key_get_iv_seq</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, m_tb_key.o(i.m_tb_key_get_iv_seq))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_rsp_send
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_publish
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_filt_status_send
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_pack
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_retx_timer_cb
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_send_seg
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_block_ack_send
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_hb_send
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_send
</UL>

<P><STRONG><a name="[6f7]"></a>m_tb_key_get_iv_seq_no_inc</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, m_tb_key.o(i.m_tb_key_get_iv_seq_no_inc))
<BR><BR>[Called By]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_state_ind
</UL>

<P><STRONG><a name="[5f9]"></a>m_tb_key_get_model_appkey_ids</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, m_tb_key.o(i.m_tb_key_get_model_appkey_ids))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = m_tb_key_get_model_appkey_ids
</UL>
<BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_model_app_list
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_binding_ind
</UL>

<P><STRONG><a name="[5d4]"></a>m_tb_key_get_nb_app_keys</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, m_tb_key.o(i.m_tb_key_get_nb_app_keys))
<BR><BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_appkey_list
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_netkey
</UL>

<P><STRONG><a name="[5dd]"></a>m_tb_key_get_nb_net_keys</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, m_tb_key.o(i.m_tb_key_get_nb_net_keys))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process
</UL>

<P><STRONG><a name="[58b]"></a>m_tb_key_get_net_from_net_id</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, m_tb_key.o(i.m_tb_key_get_net_from_net_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = m_tb_key_get_net_from_net_id
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_cb_rx
</UL>

<P><STRONG><a name="[594]"></a>m_tb_key_get_net_info</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, m_tb_key.o(i.m_tb_key_get_net_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_tb_key_get_net_info
</UL>
<BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_prep_secure_bcn
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_send_update
</UL>

<P><STRONG><a name="[5f4]"></a>m_tb_key_get_netkey_id</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, m_tb_key.o(i.m_tb_key_get_netkey_id))
<BR><BR>[Called By]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_hbeat_pub_status
</UL>

<P><STRONG><a name="[5d9]"></a>m_tb_key_get_node_identity</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, m_tb_key.o(i.m_tb_key_get_node_identity))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_tb_key_get_node_identity
</UL>
<BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_is_feature_sup
</UL>
<BR>[Called By]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_node_id
</UL>

<P><STRONG><a name="[5c9]"></a>m_tb_key_get_phase</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, m_tb_key.o(i.m_tb_key_get_phase))
<BR><BR>[Called By]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_key_refresh_phase
</UL>

<P><STRONG><a name="[6c5]"></a>m_tb_key_init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, m_tb_key.o(i.m_tb_key_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = m_tb_key_init &rArr; m_tb_key_friend_end_ind &rArr; m_tb_key_friend_nid_tbl_del
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_free
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_friend_end_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_init
</UL>

<P><STRONG><a name="[54e]"></a>m_tb_key_iv_upd_test_mode_ind</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, m_tb_key.o(i.m_tb_key_iv_upd_test_mode_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = m_tb_key_iv_upd_test_mode_ind &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_iv_upd_test_mode
</UL>

<P><STRONG><a name="[564]"></a>m_tb_key_model_bind</STRONG> (Thumb, 202 bytes, Stack size 20 bytes, m_tb_key.o(i.m_tb_key_model_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = m_tb_key_model_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_bind
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_exec_cmd
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_model_app
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_load_states
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_load_binding
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_ccm_finished_cb
</UL>

<P><STRONG><a name="[621]"></a>m_tb_key_model_bind_check</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, m_tb_key.o(i.m_tb_key_model_bind_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = m_tb_key_model_bind_check
</UL>
<BR>[Called By]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_rsp_send
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_publish
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_model_check
</UL>

<P><STRONG><a name="[5cb]"></a>m_tb_key_model_unbind</STRONG> (Thumb, 166 bytes, Stack size 20 bytes, m_tb_key.o(i.m_tb_key_model_unbind))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = m_tb_key_model_unbind
</UL>
<BR>[Called By]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_model_app
</UL>

<P><STRONG><a name="[5d2]"></a>m_tb_key_net_add</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, m_tb_key.o(i.m_tb_key_net_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = m_tb_key_net_add &rArr; m_tb_sec_k2_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_malloc
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_k2_start
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_create_start
</UL>
<BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_netkey
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_load_fsm
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_ccm_finished_cb
</UL>

<P><STRONG><a name="[5d6]"></a>m_tb_key_net_delete</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, m_tb_key.o(i.m_tb_key_net_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = m_tb_key_net_delete &rArr; m_bcn_subnet_update_ind &rArr; m_bcn_adv_tx_check &rArr; m_bcn_prep_secure_bcn &rArr; m_bcn_insert_encrypt_queue &rArr; m_tb_sec_cmac_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_free
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_ind
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_subnet_update_ind
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_nid_tbl_del
</UL>
<BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_netkey
</UL>

<P><STRONG><a name="[5b9]"></a>m_tb_key_net_find</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, m_tb_key.o(i.m_tb_key_net_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = m_tb_key_net_find
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_node_id
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_netkey
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_key_refresh_phase
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_appkey
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_load_fsm
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_cb_appkey_added
</UL>

<P><STRONG><a name="[591]"></a>m_tb_key_net_get</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, m_tb_key.o(i.m_tb_key_net_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = m_tb_key_net_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_cmac_ready_cb
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_net_key_ind
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_app_key_ind
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_adv_data_set
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_send
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_obfusc_ready_cb
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_desobfusc_ready_cb
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_ccm_enc_ready_cb
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_ccm_dec_ready_cb
</UL>

<P><STRONG><a name="[5df]"></a>m_tb_key_net_get_ids</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, m_tb_key.o(i.m_tb_key_net_get_ids))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_tb_key_net_get_ids
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process
</UL>

<P><STRONG><a name="[684]"></a>m_tb_key_net_lid_from_nid</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, m_tb_key.o(i.m_tb_key_net_lid_from_nid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_tb_key_net_lid_from_nid
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_rx
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_decrypt_err
</UL>

<P><STRONG><a name="[527]"></a>m_tb_key_net_next</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, m_tb_key.o(i.m_tb_key_net_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = m_tb_key_net_next
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_bearer_operation_open_cb
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_link_closed
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_adv_data_set
</UL>

<P><STRONG><a name="[6dc]"></a>m_tb_key_net_revoke_old</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, m_tb_key.o(i.m_tb_key_net_revoke_old))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = m_tb_key_net_revoke_old &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_free
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_ind
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_nid_tbl_del
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_nid_tbl_add
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_friend_revoke_old
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_aid_tbl_del
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_aid_tbl_add
</UL>
<BR>[Called By]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_secure_bcn_rx_ind
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_phase_transition_ind
</UL>

<P><STRONG><a name="[5d3]"></a>m_tb_key_net_update</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, m_tb_key.o(i.m_tb_key_net_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = m_tb_key_net_update &rArr; m_tb_sec_k2_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_malloc
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_k2_start
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_create_start
</UL>
<BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_netkey
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_cb_netkey_added
</UL>

<P><STRONG><a name="[6dd]"></a>m_tb_key_net_use_new</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, m_tb_key.o(i.m_tb_key_net_use_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = m_tb_key_net_use_new &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_secure_bcn_rx_ind
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_phase_transition_ind
</UL>

<P><STRONG><a name="[5c5]"></a>m_tb_key_phase_transition_ind</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, m_tb_key.o(i.m_tb_key_phase_transition_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = m_tb_key_phase_transition_ind &rArr; m_tb_key_net_revoke_old &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_use_new
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_revoke_old
</UL>
<BR>[Called By]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_key_refresh_phase
</UL>

<P><STRONG><a name="[58e]"></a>m_tb_key_secure_bcn_rx_ind</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, m_tb_key.o(i.m_tb_key_secure_bcn_rx_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = m_tb_key_secure_bcn_rx_ind &rArr; m_tb_key_net_revoke_old &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_use_new
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_revoke_old
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_check_iv
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_cmac_finished_cb
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_handler_update
</UL>

<P><STRONG><a name="[6b0]"></a>m_tb_key_set_iv_seq</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, m_tb_key.o(i.m_tb_key_set_iv_seq))
<BR><BR>[Called By]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_load_states
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_ccm_finished_cb
</UL>

<P><STRONG><a name="[52b]"></a>m_tb_key_set_node_identity</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, m_tb_key.o(i.m_tb_key_set_node_identity))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = m_tb_key_set_node_identity &rArr;  m_lay_proxy_bearer_adv_ctrl (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_is_feature_sup
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_bearer_adv_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_bearer_adv_ctrl
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_bearer_operation_open_cb
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_node_id
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_link_closed
</UL>

<P><STRONG><a name="[567]"></a>m_tb_mio_add_subscription</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, m_tb_mio.o(i.m_tb_mio_add_subscription))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = m_tb_mio_add_subscription &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_ind
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_subs_find_addr
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_addr_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_exec_cmd
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_model_subs
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_load_subs_list
</UL>

<P><STRONG><a name="[566]"></a>m_tb_mio_add_subscription_virt</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, m_tb_mio.o(i.m_tb_mio_add_subscription_virt))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = m_tb_mio_add_subscription_virt &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_ind
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_subs_find_va_lid
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_find_label_uuid
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_addr_list_add
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_add_virt_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_exec_cmd
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_cb_sec_cmac_subs_finished
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_load_subs_list
</UL>

<P><STRONG><a name="[66f]"></a>m_tb_mio_addr_list_get_size</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, m_tb_mio.o(i.m_tb_mio_addr_list_get_size))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_handler_update
</UL>

<P><STRONG><a name="[66e]"></a>m_tb_mio_addr_list_start</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, m_tb_mio.o(i.m_tb_mio_addr_list_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = m_tb_mio_addr_list_start &rArr; m_tb_mio_addr_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_malloc
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_free
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_addr_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_handler_update
</UL>

<P><STRONG><a name="[5bb]"></a>m_tb_mio_app_key_rem_ind</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, m_tb_mio.o(i.m_tb_mio_app_key_rem_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = m_tb_mio_app_key_rem_ind &rArr; m_tb_mio_set_publi_param &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_set_publi_param
</UL>
<BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_netkey
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_appkey
</UL>

<P><STRONG><a name="[565]"></a>m_tb_mio_bind</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, m_tb_mio.o(i.m_tb_mio_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = m_tb_mio_bind &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_exec_cmd
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_model_app
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_load_binding
</UL>

<P><STRONG><a name="[623]"></a>m_tb_mio_cb_get</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, m_tb_mio.o(i.m_tb_mio_cb_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_tb_mio_cb_get
</UL>
<BR>[Called By]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_opcode_status
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_sent
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_retx_timer_cb
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_model_check
</UL>

<P><STRONG><a name="[5b7]"></a>m_tb_mio_delete_all_subscription</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, m_tb_mio.o(i.m_tb_mio_delete_all_subscription))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = m_tb_mio_delete_all_subscription &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_ind
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_rem_virt_addr
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_addr_list_rem
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_model_subs
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_cb_sec_cmac_subs_finished
</UL>

<P><STRONG><a name="[56a]"></a>m_tb_mio_delete_subscription</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, m_tb_mio.o(i.m_tb_mio_delete_subscription))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = m_tb_mio_delete_subscription &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_ind
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_subs_find_addr
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_addr_list_rem
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_exec_cmd
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_model_subs
</UL>

<P><STRONG><a name="[569]"></a>m_tb_mio_delete_subscription_virt</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, m_tb_mio.o(i.m_tb_mio_delete_subscription_virt))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = m_tb_mio_delete_subscription_virt &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_ind
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_subs_find_va_lid
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_rem_virt_addr
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_find_label_uuid
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_exec_cmd
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_model_subs_vaddr
</UL>

<P><STRONG><a name="[626]"></a>m_tb_mio_get_element_addr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, m_tb_mio.o(i.m_tb_mio_get_element_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_tb_mio_get_element_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_rsp_send
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_publish
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_subs_list_ind
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_publi_param_ind
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_binding_ind
</UL>

<P><STRONG><a name="[6c0]"></a>m_tb_mio_get_env_size</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, m_tb_mio.o(i.m_tb_mio_get_env_size))
<BR><BR>[Called By]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_get_env_size
</UL>

<P><STRONG><a name="[682]"></a>m_tb_mio_get_label_uuid</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, m_tb_mio.o(i.m_tb_mio_get_label_uuid))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = m_tb_mio_get_label_uuid
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_ccm_enc_ready_cb
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_ccm_dec_ready_cb
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_check_group_dst
</UL>

<P><STRONG><a name="[5b4]"></a>m_tb_mio_get_local_id</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, m_tb_mio.o(i.m_tb_mio_get_local_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = m_tb_mio_get_local_id
</UL>
<BR>[Called By]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_register_model
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_model_subs_vaddr
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_model_subs
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_model_pub_set
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_model_app
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_cb_sec_cmac_subs_finished
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_cb_sec_cmac_pub_finished
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_load_subs_list
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_load_publi_param
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_load_binding
</UL>

<P><STRONG><a name="[6f1]"></a>m_tb_mio_get_model_id</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, m_tb_mio.o(i.m_tb_mio_get_model_id))
<BR><BR>[Called By]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_subs_list_ind
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_publi_param_ind
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_binding_ind
</UL>

<P><STRONG><a name="[5c3]"></a>m_tb_mio_get_model_ids</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, m_tb_mio.o(i.m_tb_mio_get_model_ids))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = m_tb_mio_get_model_ids
</UL>
<BR>[Called By]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_compo_data_get
</UL>

<P><STRONG><a name="[5f8]"></a>m_tb_mio_get_nb_bound_app</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, m_tb_mio.o(i.m_tb_mio_get_nb_bound_app))
<BR><BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_model_app_list
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_binding_ind
</UL>

<P><STRONG><a name="[5c0]"></a>m_tb_mio_get_nb_elements</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, m_tb_mio.o(i.m_tb_mio_get_nb_elements))
<BR><BR>[Called By]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_compo_data_get
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_send_req
</UL>

<P><STRONG><a name="[624]"></a>m_tb_mio_get_nb_model</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, m_tb_mio.o(i.m_tb_mio_get_nb_model))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_model_check
</UL>

<P><STRONG><a name="[5c1]"></a>m_tb_mio_get_nb_models</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, m_tb_mio.o(i.m_tb_mio_get_nb_models))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_tb_mio_get_nb_models
</UL>
<BR>[Called By]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_compo_data_get
</UL>

<P><STRONG><a name="[606]"></a>m_tb_mio_get_period</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, m_tb_mio.o(i.m_tb_mio_get_period))
<BR><BR>[Calls]<UL><LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_convert_period
</UL>
<BR>[Called By]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_handler_period
</UL>

<P><STRONG><a name="[634]"></a>m_tb_mio_get_prim_addr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, m_tb_mio.o(i.m_tb_mio_get_prim_addr))
<BR><BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_stop
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_select_friend
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_state_ind
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_set_hb_subs_params
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_rand_finished
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_filt_status_send
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_rx_ctl
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_pack
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_block_ack_send
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_hb_send
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_send
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_rx_utrans
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_handler_request
</UL>

<P><STRONG><a name="[5fa]"></a>m_tb_mio_get_publi_param</STRONG> (Thumb, 84 bytes, Stack size 28 bytes, m_tb_mio.o(i.m_tb_mio_get_publi_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = m_tb_mio_get_publi_param
</UL>
<BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_publish
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_model_pub_status
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_publi_param_ind
</UL>

<P><STRONG><a name="[5fd]"></a>m_tb_mio_get_subscription_list</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, m_tb_mio.o(i.m_tb_mio_get_subscription_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = m_tb_mio_get_subscription_list
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_model_subs_list
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_subs_list_ind
</UL>

<P><STRONG><a name="[5fc]"></a>m_tb_mio_get_subscription_list_size</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, m_tb_mio.o(i.m_tb_mio_get_subscription_list_size))
<BR><BR>[Called By]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_model_subs_list
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_subs_list_ind
</UL>

<P><STRONG><a name="[6f8]"></a>m_tb_mio_get_subscription_list_size_vaddr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, m_tb_mio.o(i.m_tb_mio_get_subscription_list_size_vaddr))
<BR><BR>[Called By]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_subs_list_ind
</UL>

<P><STRONG><a name="[6f6]"></a>m_tb_mio_get_vaddr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, m_tb_mio.o(i.m_tb_mio_get_vaddr))
<BR><BR>[Called By]<UL><LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_publi_param_ind
</UL>

<P><STRONG><a name="[6c7]"></a>m_tb_mio_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, m_tb_mio.o(i.m_tb_mio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_tb_mio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_free
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_init
</UL>

<P><STRONG><a name="[622]"></a>m_tb_mio_is_dest_addr</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, m_tb_mio.o(i.m_tb_mio_is_dest_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = m_tb_mio_is_dest_addr &rArr; m_tb_mio_subs_find_va_lid
</UL>
<BR>[Calls]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_subs_find_va_lid
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_subs_find_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_model_check
</UL>

<P><STRONG><a name="[5b3]"></a>m_tb_mio_is_local_addr</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, m_tb_mio.o(i.m_tb_mio_is_local_addr))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_model_subs_vaddr
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_model_subs
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_model_pub_set
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_model_app
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_cb_sec_cmac_pub_finished
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_desobfusc_finished_cb
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_ccm_dec_finished_cb
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_rx
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_block_ack_send
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_rx_ltrans
</UL>

<P><STRONG><a name="[578]"></a>m_tb_mio_register_model</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, m_tb_mio.o(i.m_tb_mio_register_model))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = m_tb_mio_register_model &rArr; m_tb_mio_get_local_id
</UL>
<BR>[Calls]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_local_id
</UL>
<BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_register_model
</UL>

<P><STRONG><a name="[6ae]"></a>m_tb_mio_set_prim_addr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, m_tb_mio.o(i.m_tb_mio_set_prim_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = m_tb_mio_set_prim_addr &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_load_states
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_ccm_finished_cb
</UL>

<P><STRONG><a name="[568]"></a>m_tb_mio_set_publi_param</STRONG> (Thumb, 206 bytes, Stack size 72 bytes, m_tb_mio.o(i.m_tb_mio_set_publi_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = m_tb_mio_set_publi_param &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_ind
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_rem_virt_addr
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_convert_period
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_add_virt_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_exec_cmd
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_model_pub_set
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_cb_sec_cmac_pub_finished
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_load_publi_param
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_unbind
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_app_key_rem_ind
</UL>

<P><STRONG><a name="[5cc]"></a>m_tb_mio_unbind</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, m_tb_mio.o(i.m_tb_mio_unbind))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = m_tb_mio_unbind &rArr; m_tb_mio_set_publi_param &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_ind
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_set_publi_param
</UL>
<BR>[Called By]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_model_app
</UL>

<P><STRONG><a name="[680]"></a>m_tb_sec_aes_start</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, m_tb_sec.o(i.m_tb_sec_aes_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = m_tb_sec_aes_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_start
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_rand_finished
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_rx
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_check_encrypt_queue
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_ccm_enc_finished_cb
</UL>

<P><STRONG><a name="[687]"></a>m_tb_sec_ccm_dec_start</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, m_tb_sec.o(i.m_tb_sec_ccm_dec_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = m_tb_sec_ccm_dec_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_start
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pdu_data_handler
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_rx
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_check_decrypt_queue
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_desobfusc_finished_cb
</UL>

<P><STRONG><a name="[681]"></a>m_tb_sec_ccm_enc_start</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, m_tb_sec.o(i.m_tb_sec_ccm_enc_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = m_tb_sec_ccm_enc_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_start
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_tx
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_send
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_check_encrypt_queue
</UL>

<P><STRONG><a name="[590]"></a>m_tb_sec_cmac_start</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, m_tb_sec.o(i.m_tb_sec_cmac_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = m_tb_sec_cmac_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_start
</UL>
<BR>[Called By]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_insert_encrypt_queue
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_cmac_finished_cb
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_model_subs_vaddr
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pdu_random_handler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_k1_finished_cb
</UL>

<P><STRONG><a name="[6bc]"></a>m_tb_sec_get_env_size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_tb_sec.o(i.m_tb_sec_get_env_size))
<BR><BR>[Called By]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_get_env_size
</UL>

<P><STRONG><a name="[6c4]"></a>m_tb_sec_init</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, m_tb_sec.o(i.m_tb_sec_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = m_tb_sec_init
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_init
</UL>

<P><STRONG><a name="[6b5]"></a>m_tb_sec_k1_start</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, m_tb_sec.o(i.m_tb_sec_k1_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = m_tb_sec_k1_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_start
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_finished_cb
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_rand_finished_cb
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_psalt_finished_cb
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_k1_finished_cb
</UL>

<P><STRONG><a name="[6d4]"></a>m_tb_sec_k2_start</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, m_tb_sec.o(i.m_tb_sec_k2_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = m_tb_sec_k2_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_start
</UL>
<BR>[Called By]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_update
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_add
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_friend_new_ind
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_friend_finished_cb
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_finished_cb
</UL>

<P><STRONG><a name="[6d2]"></a>m_tb_sec_k3_start</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, m_tb_sec.o(i.m_tb_sec_k3_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = m_tb_sec_k3_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_start
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_finished_cb
</UL>

<P><STRONG><a name="[6cb]"></a>m_tb_sec_k4_start</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, m_tb_sec.o(i.m_tb_sec_k4_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = m_tb_sec_k4_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_start
</UL>
<BR>[Called By]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_app_update
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_app_add
</UL>

<P><STRONG><a name="[68b]"></a>m_tb_sec_rand_start</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, m_tb_sec.o(i.m_tb_sec_rand_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = m_tb_sec_rand_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_start
</UL>
<BR>[Called By]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_oob_auth_rsp
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pdu_cfm_handler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_ecdh_secret_res_cb
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_adv_data_set
</UL>

<P><STRONG><a name="[6b2]"></a>m_tb_sec_s1_start</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, m_tb_sec.o(i.m_tb_sec_s1_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = m_tb_sec_s1_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_start
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pdu_pub_key_handler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_cmac_finished_cb
</UL>

<P><STRONG><a name="[60b]"></a>m_tb_state_get_attention_state</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, m_tb_state.o(i.m_tb_state_get_attention_state))
<BR><BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_state_send
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_send_attention_status
</UL>

<P><STRONG><a name="[596]"></a>m_tb_state_get_beacon_state</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, m_tb_state.o(i.m_tb_state_get_beacon_state))
<BR><BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_state_update
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_state_ind
</UL>

<P><STRONG><a name="[5c2]"></a>m_tb_state_get_compo_info</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, m_tb_state.o(i.m_tb_state_get_compo_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_tb_state_get_compo_info
</UL>
<BR>[Called By]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_compo_data_get
</UL>

<P><STRONG><a name="[5e3]"></a>m_tb_state_get_default_ttl</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, m_tb_state.o(i.m_tb_state_get_default_ttl))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_state_ind
</UL>

<P><STRONG><a name="[6c1]"></a>m_tb_state_get_env_size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_tb_state.o(i.m_tb_state_get_env_size))
<BR><BR>[Called By]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_get_env_size
</UL>

<P><STRONG><a name="[5e5]"></a>m_tb_state_get_friend_state</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, m_tb_state.o(i.m_tb_state_get_friend_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = m_tb_state_get_friend_state
</UL>
<BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_is_feature_sup
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_state_ind
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_check_group_dst
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_block_ack_send
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_hb_send
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_rx_utrans
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_rx_ltrans
</UL>

<P><STRONG><a name="[5e7]"></a>m_tb_state_get_gatt_proxy_state</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, m_tb_state.o(i.m_tb_state_get_gatt_proxy_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = m_tb_state_get_gatt_proxy_state
</UL>
<BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_is_feature_sup
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_state_ind
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_check_group_dst
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_hb_send
</UL>

<P><STRONG><a name="[5f3]"></a>m_tb_state_get_hb_pub_params</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m_tb_state.o(i.m_tb_state_get_hb_pub_params))
<BR><BR>[Called By]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_hbeat_pub_status
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_hb_cb_state_updated
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_hb_send
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_hb_cb_timer_pub
</UL>

<P><STRONG><a name="[5f5]"></a>m_tb_state_get_hb_subs_params</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m_tb_state.o(i.m_tb_state_get_hb_subs_params))
<BR><BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_hbeat_subs_status
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_hb_cb_state_updated
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_hb_cb_timer_subs
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_hb_cb_rx
</UL>

<P><STRONG><a name="[64c]"></a>m_tb_state_get_lpn_state</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, m_tb_state.o(i.m_tb_state_get_lpn_state))
<BR><BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_stop
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_rx
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_decrypt_err
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_ccm_dec_finished_cb
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_block_ack_send
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_hb_send
</UL>

<P><STRONG><a name="[5af]"></a>m_tb_state_get_nb_cdata_page</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, m_tb_state.o(i.m_tb_state_get_nb_cdata_page))
<BR><BR>[Called By]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_compo_data_get
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_cb_compo_data
</UL>

<P><STRONG><a name="[59a]"></a>m_tb_state_get_net_tx_params</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, m_tb_state.o(i.m_tb_state_get_net_tx_params))
<BR><BR>[Called By]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_adv_send
</UL>

<P><STRONG><a name="[5ea]"></a>m_tb_state_get_net_tx_state</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, m_tb_state.o(i.m_tb_state_get_net_tx_state))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_state_ind
</UL>

<P><STRONG><a name="[520]"></a>m_tb_state_get_prov_state</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, m_tb_state.o(i.m_tb_state_get_prov_state))
<BR><BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_state_update
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_bearer_operation_open_cb
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_bearer_operation_close_cb
</UL>

<P><STRONG><a name="[5ec]"></a>m_tb_state_get_relay_state</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, m_tb_state.o(i.m_tb_state_get_relay_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = m_tb_state_get_relay_state
</UL>
<BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_is_feature_sup
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_state_ind
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_check_relay
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_check_group_dst
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_hb_send
</UL>

<P><STRONG><a name="[5e8]"></a>m_tb_state_hb_check_features</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, m_tb_state.o(i.m_tb_state_hb_check_features))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_tb_state_hb_check_features
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process
</UL>

<P><STRONG><a name="[649]"></a>m_tb_state_hb_rx_ind</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, m_tb_state.o(i.m_tb_state_hb_rx_ind))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_hb_cb_rx
</UL>

<P><STRONG><a name="[64d]"></a>m_tb_state_hb_tx_ind</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, m_tb_state.o(i.m_tb_state_hb_tx_ind))
<BR><BR>[Called By]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_hb_send
</UL>

<P><STRONG><a name="[6c8]"></a>m_tb_state_init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, m_tb_state.o(i.m_tb_state_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_tb_state_init
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_init
</UL>

<P><STRONG><a name="[537]"></a>m_tb_state_is_enabled</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, m_tb_state.o(i.m_tb_state_is_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_register_model
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_set_run_time
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_load_stored_info
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_enable
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_disable
</UL>

<P><STRONG><a name="[524]"></a>m_tb_state_is_feature_sup</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, m_tb_state.o(i.m_tb_state_is_feature_sup))
<BR><BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_init
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_set_node_identity
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_get_node_identity
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_publish
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_bearer_operation_open_cb
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_bearer_operation_close_cb
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_set_relay_state
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_set_friend_state
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_relay_state
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_gatt_proxy_state
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_friend_state
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_set_gatt_proxy_state
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_link_open
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_link_closed
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pub_key_res_cb
</UL>

<P><STRONG><a name="[6d1]"></a>m_tb_state_is_iv_update_auth</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, m_tb_state.o(i.m_tb_state_is_iv_update_auth))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = m_tb_state_is_iv_update_auth &rArr; m_tb_timer_get_cur_time &rArr; m_al_timer_get_clock &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_get_cur_time
</UL>
<BR>[Called By]<UL><LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_check_iv
</UL>

<P><STRONG><a name="[6d0]"></a>m_tb_state_iv_update_ind</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, m_tb_state.o(i.m_tb_state_iv_update_ind))
<BR><BR>[Called By]<UL><LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_check_iv
</UL>

<P><STRONG><a name="[5d7]"></a>m_tb_state_net_key_rem_ind</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, m_tb_state.o(i.m_tb_state_net_key_rem_ind))
<BR><BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_netkey
</UL>

<P><STRONG><a name="[609]"></a>m_tb_state_set_attention_state</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, m_tb_state.o(i.m_tb_state_set_attention_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = m_tb_state_set_attention_state &rArr; m_tb_timer_set &rArr; m_tb_timer_insert &rArr; m_tb_timer_prog &rArr; m_al_timer_get_delay &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_set
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_clear
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_send_attention_update_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_state_send
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pdu_invite_handler
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_process
</UL>

<P><STRONG><a name="[5e1]"></a>m_tb_state_set_beacon_state</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, m_tb_state.o(i.m_tb_state_set_beacon_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = m_tb_state_set_beacon_state &rArr; m_bcn_state_update &rArr; m_bcn_adv_tx_check &rArr; m_bcn_prep_secure_bcn &rArr; m_bcn_insert_encrypt_queue &rArr; m_tb_sec_cmac_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_ind
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_state_update
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_load_states
</UL>

<P><STRONG><a name="[5e2]"></a>m_tb_state_set_default_ttl</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, m_tb_state.o(i.m_tb_state_set_default_ttl))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = m_tb_state_set_default_ttl &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_load_states
</UL>

<P><STRONG><a name="[51f]"></a>m_tb_state_set_enabled</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, m_tb_state.o(i.m_tb_state_set_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_bearer_operation_open_cb
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_bearer_operation_close_cb
</UL>

<P><STRONG><a name="[65d]"></a>m_tb_state_set_friend_cb</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m_tb_state.o(i.m_tb_state_set_friend_cb))
<BR><BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_init
</UL>

<P><STRONG><a name="[5e4]"></a>m_tb_state_set_friend_state</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, m_tb_state.o(i.m_tb_state_set_friend_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = m_tb_state_set_friend_state &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_ind
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_is_feature_sup
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_load_states
</UL>

<P><STRONG><a name="[5e6]"></a>m_tb_state_set_gatt_proxy_state</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, m_tb_state.o(i.m_tb_state_set_gatt_proxy_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = m_tb_state_set_gatt_proxy_state &rArr; m_lay_proxy_state_set &rArr; m_lay_proxy_bearer_adv_ctrl &rArr; m_lay_proxy_adv_data_set &rArr; m_tb_sec_rand_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_ind
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_is_feature_sup
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_state_set
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_load_states
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_link_closed
</UL>

<P><STRONG><a name="[65c]"></a>m_tb_state_set_hb_cb</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m_tb_state.o(i.m_tb_state_set_hb_cb))
<BR><BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_init
</UL>

<P><STRONG><a name="[5ed]"></a>m_tb_state_set_hb_pub_params</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, m_tb_state.o(i.m_tb_state_set_hb_pub_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = m_tb_state_set_hb_pub_params
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process
</UL>

<P><STRONG><a name="[5ef]"></a>m_tb_state_set_hb_subs_params</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, m_tb_state.o(i.m_tb_state_set_hb_subs_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = m_tb_state_set_hb_subs_params
</UL>
<BR>[Calls]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_prim_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process
</UL>

<P><STRONG><a name="[66a]"></a>m_tb_state_set_lpn_state</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, m_tb_state.o(i.m_tb_state_set_lpn_state))
<BR><BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_stop
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_handler_update
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_cb_timer
</UL>

<P><STRONG><a name="[5e9]"></a>m_tb_state_set_net_tx_state</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, m_tb_state.o(i.m_tb_state_set_net_tx_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = m_tb_state_set_net_tx_state &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_load_states
</UL>

<P><STRONG><a name="[6b3]"></a>m_tb_state_set_prov_state</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, m_tb_state.o(i.m_tb_state_set_prov_state))
<BR><BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_start
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_load_fsm
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_link_closed
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_error_handle
</UL>

<P><STRONG><a name="[5eb]"></a>m_tb_state_set_relay_state</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, m_tb_state.o(i.m_tb_state_set_relay_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = m_tb_state_set_relay_state &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_ind
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_is_feature_sup
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_load_states
</UL>

<P><STRONG><a name="[5bf]"></a>m_tb_store_get_compo_data</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, m_tb_store_wvt.o(i.m_tb_store_get_compo_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = m_tb_store_get_compo_data &rArr; m_api_send_compo_data_req_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_send_compo_data_req_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_compo_data_get
</UL>

<P><STRONG><a name="[6c2]"></a>m_tb_store_get_env_size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_tb_store_wvt.o(i.m_tb_store_get_env_size))
<BR><BR>[Called By]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_get_env_size
</UL>

<P><STRONG><a name="[6c9]"></a>m_tb_store_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, m_tb_store_wvt.o(i.m_tb_store_init))
<BR><BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_init
</UL>

<P><STRONG><a name="[550]"></a>m_tb_store_load</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, m_tb_store_wvt.o(i.m_tb_store_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = m_tb_store_load &rArr; m_tb_store_load_fsm &rArr; m_tb_store_load_states &rArr; m_tb_state_set_beacon_state &rArr; m_bcn_state_update &rArr; m_bcn_adv_tx_check &rArr; m_bcn_prep_secure_bcn &rArr; m_bcn_insert_encrypt_queue &rArr; m_tb_sec_cmac_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_malloc
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_load_fsm
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_check_stored_info
</UL>
<BR>[Called By]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_load_stored_info
</UL>

<P><STRONG><a name="[535]"></a>m_tb_store_rx_compo_data</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, m_tb_store_wvt.o(i.m_tb_store_rx_compo_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_tb_store_rx_compo_data
</UL>
<BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_compo_data_cfm
</UL>

<P><STRONG><a name="[6cd]"></a>m_tb_store_update_ind</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, m_tb_store_wvt.o(i.m_tb_store_update_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_subs_list_ind
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_state_ind
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_publi_param_ind
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_net_key_ind
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_binding_ind
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_app_key_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_use_new
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_revoke_old
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_delete
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_iv_upd_test_mode_ind
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_get_iv_seq
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_dev_add
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_app_delete
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_finished_cb
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_check_iv
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_set_publi_param
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_delete_subscription_virt
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_delete_subscription
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_bind
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_add_subscription_virt
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_add_subscription
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_set_relay_state
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_set_net_tx_state
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_set_friend_state
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_set_default_ttl
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_set_beacon_state
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_unbind
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_delete_all_subscription
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_set_gatt_proxy_state
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_set_prim_addr
</UL>

<P><STRONG><a name="[587]"></a>m_tb_timer_clear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_tb_timer.o(i.m_tb_timer_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = m_tb_timer_clear &rArr; m_tb_timer_remove &rArr; m_tb_timer_prog &rArr; m_al_timer_get_delay &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_scan_clear
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_bearer_adv_ctrl
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_cb_closed
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_stop_link_timeout
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_stop
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_select_friend
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_stop_tx_unprov_bcn
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_stop_tx_security_bcn
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_state_update
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_clean_up
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pdu_sent
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_link_closed
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_handler_update
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_clean_list_offer
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_set_attention_state
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_trans_incomp_timer
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_seg_finished
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_rx
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_hb_cb_state_updated
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_handler_clear_cfm
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_end_friendship
</UL>

<P><STRONG><a name="[6fa]"></a>m_tb_timer_expired</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, m_tb_timer.o(i.m_tb_timer_expired))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = m_tb_timer_expired &rArr; m_tb_timer_prog &rArr; m_al_timer_get_delay &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init (via Veneer)
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_prog
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_timer_get_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_timer_ind_handler
</UL>

<P><STRONG><a name="[6cf]"></a>m_tb_timer_get_cur_time</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_tb_timer.o(i.m_tb_timer_get_cur_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = m_tb_timer_get_cur_time &rArr; m_al_timer_get_clock &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_timer_get_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_is_iv_update_auth
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_check_iv
</UL>

<P><STRONG><a name="[6bf]"></a>m_tb_timer_get_env_size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_tb_timer.o(i.m_tb_timer_get_env_size))
<BR><BR>[Called By]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_get_env_size
</UL>

<P><STRONG><a name="[6c6]"></a>m_tb_timer_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, m_tb_timer.o(i.m_tb_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_tb_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_init
</UL>

<P><STRONG><a name="[58a]"></a>m_tb_timer_set</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, m_tb_timer.o(i.m_tb_timer_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = m_tb_timer_set &rArr; m_tb_timer_insert &rArr; m_tb_timer_prog &rArr; m_al_timer_get_delay &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_remove
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_insert
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_timer_get_time_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_scan_timer_handler
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_handler_scan
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_bearer_adv_ctrl
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_start_tx_unprov_bcn
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_cb_timer_obs_expired
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_cb_timer_bcn_expired
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_cb_opened
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_state_update
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_restart_tx_unprov_bcn
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_cb_timer_attention
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pdu_sent
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pdu_rx
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_link_open
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_trans_timeout_cb
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pdu_send
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_link_timeout_cb
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_error_handle
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_bearer_opened_cb
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_adv_data_set
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_send_req
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_handler_update
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_handler_offer
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_check_tx_list
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_cb_timer
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_sent
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_set_attention_state
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_tx_set
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_tx_handler
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_rx
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_hb_cb_state_updated
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_hb_cb_timer_subs
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_hb_cb_timer_pub
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_send_clear
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_handler_subs_list
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_handler_request
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_handler_poll
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_cb_timer
</UL>

<P><STRONG><a name="[334]"></a>mesh_add_model</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, mesh_api.o(i.mesh_add_model))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mesh_add_model
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_led_init
</UL>

<P><STRONG><a name="[43a]"></a>mesh_adv_report_ind_user_handler</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, mesh_api.o(i.mesh_adv_report_ind_user_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mesh_adv_report_ind_user_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_ext_adv_report_ind_handler
</UL>

<P><STRONG><a name="[f1]"></a>mesh_api_compo_data_req_ind_handler</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, mesh_api.o(i.mesh_api_compo_data_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mesh_api_compo_data_req_ind_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mesh_api.o(.constdata)
</UL>
<P><STRONG><a name="[f2]"></a>mesh_api_fault_get_req_ind_handler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mesh_api.o(i.mesh_api_fault_get_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mesh_api_fault_get_req_ind_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mesh_api.o(.constdata)
</UL>
<P><STRONG><a name="[f3]"></a>mesh_api_proxy_end_ind_handler</STRONG> (Thumb, 22 bytes, Stack size 32 bytes, mesh_api.o(i.mesh_api_proxy_end_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mesh_api_proxy_end_ind_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mesh_api.o(.constdata)
</UL>
<P><STRONG><a name="[4fa]"></a>mesh_con_timer_ind_handler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, m_al_con.o(i.mesh_con_timer_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mesh_con_timer_ind_handler &rArr; m_al_con_disconnect
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_int_message_handler
</UL>

<P><STRONG><a name="[705]"></a>mesh_fatal_error_report</STRONG> (Thumb, 22 bytes, Stack size 32 bytes, mesh_api.o(i.mesh_fatal_error_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mesh_fatal_error_report
</UL>
<BR>[Called By]<UL><LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_event_end (via Veneer)
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_check_baseband_status_handler
</UL>

<P><STRONG><a name="[306]"></a>mesh_info_clear</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, app_mesh_info.o(i.mesh_info_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mesh_info_clear &rArr; flash_erase &rArr; flash_protect_enable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase (via Veneer)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Process
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sig_mesh_prov_timer_handler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_callback_func
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_info_load
</UL>

<P><STRONG><a name="[6fe]"></a>mesh_info_find_unicast_addr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_mesh_info.o(i.mesh_info_find_unicast_addr))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_api_cmp_handler
</UL>

<P><STRONG><a name="[6fd]"></a>mesh_info_load</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, app_mesh_info.o(i.mesh_info_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mesh_info_load &rArr; mesh_info_clear &rArr; flash_erase &rArr; flash_protect_enable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_reset_patch (via Veneer)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_info_clear
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read (via Veneer)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_api_cmp_handler
</UL>

<P><STRONG><a name="[6ff]"></a>mesh_info_store</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, app_mesh_info.o(i.mesh_info_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mesh_info_store &rArr; app_mesh_info_update_subs
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_info_update_subs
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_info_update_state
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_info_update_publish
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_info_update_net_key
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_info_update_bind
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_info_update_app_key
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_api_update_ind_handler
</UL>

<P><STRONG><a name="[337]"></a>mesh_info_store_into_flash</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, app_mesh_info.o(i.mesh_info_store_into_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mesh_info_store_into_flash &rArr; flash_write &rArr; flash_protect_enable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write (via Veneer)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_store_info_timer_handler
</UL>

<P><STRONG><a name="[335]"></a>mesh_init</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, mesh_api.o(i.mesh_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mesh_init &rArr; gatt_profile_task_add
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_profile_task_add
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_led_init
</UL>

<P><STRONG><a name="[701]"></a>mesh_proxy_ctrl</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mesh_api.o(i.mesh_proxy_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mesh_proxy_ctrl &rArr; prf_get_task_from_id
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_get_task_from_id
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_callback_func
</UL>

<P><STRONG><a name="[704]"></a>mesh_send_prov_auth_data_rsp</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, mesh_api.o(i.mesh_send_prov_auth_data_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mesh_send_prov_auth_data_rsp &rArr; prf_get_task_from_id
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_get_task_from_id
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_callback_func
</UL>

<P><STRONG><a name="[702]"></a>mesh_send_prov_param_rsp</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, mesh_api.o(i.mesh_send_prov_param_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mesh_send_prov_param_rsp &rArr; prf_get_task_from_id
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_get_task_from_id
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_callback_func
</UL>

<P><STRONG><a name="[2ca]"></a>mesh_send_rsp</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, mesh_api.o(i.mesh_send_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mesh_send_rsp &rArr; prf_get_task_from_id
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_get_task_from_id
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MESH_Status_Send
</UL>

<P><STRONG><a name="[332]"></a>mesh_set_adv_parameter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mesh_api.o(i.mesh_set_adv_parameter))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_led_init
</UL>

<P><STRONG><a name="[330]"></a>mesh_set_cb_func</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mesh_api.o(i.mesh_set_cb_func))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_led_init
</UL>

<P><STRONG><a name="[452]"></a>mesh_set_runtime</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, mesh_api.o(i.mesh_set_runtime))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mesh_set_runtime &rArr; prf_get_task_from_id
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_get_task_from_id
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_profile_added_ind_handler
</UL>

<P><STRONG><a name="[331]"></a>mesh_set_scan_parameter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mesh_api.o(i.mesh_set_scan_parameter))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_led_init
</UL>

<P><STRONG><a name="[333]"></a>mesh_set_scan_rsp_data</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, mesh_api.o(i.mesh_set_scan_rsp_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mesh_set_scan_rsp_data
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_malloc
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_led_init
</UL>

<P><STRONG><a name="[700]"></a>mesh_start</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mesh_api.o(i.mesh_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mesh_start &rArr; prf_get_task_from_id
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_get_task_from_id
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_callback_func
</UL>

<P><STRONG><a name="[4fb]"></a>mesh_timer_ind_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_al_timer.o(i.mesh_timer_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mesh_timer_ind_handler &rArr; m_tb_timer_expired &rArr; m_tb_timer_prog &rArr; m_al_timer_get_delay &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_expired
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_int_message_handler
</UL>

<P><STRONG><a name="[49b]"></a>model_delay_decode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, model_common.o(i.model_delay_decode))
<BR><BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set_message_validate
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_move_set
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_delta_set
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set_message_validate
</UL>

<P><STRONG><a name="[492]"></a>model_tid_validate</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, model_common.o(i.model_tid_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = model_tid_validate &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_linear_set
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_actual_set
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_temperature_set
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
</UL>

<P><STRONG><a name="[49a]"></a>model_transition_time_decode</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, model_common.o(i.model_transition_time_decode))
<BR><BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set_message_validate
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_move_set
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_delta_set
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set_message_validate
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set_message_validate
</UL>

<P><STRONG><a name="[750]"></a>model_transition_time_encode</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, model_common.o(i.model_transition_time_encode))
<BR><BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_linear_send
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_actual_send
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_temperature_send
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send
</UL>

<P><STRONG><a name="[499]"></a>model_transition_time_is_valid</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, model_common.o(i.model_transition_time_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set_message_validate
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_move_set
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_delta_set
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set_message_validate
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set_message_validate
</UL>

<P><STRONG><a name="[707]"></a>os_get_free_task_type</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_task.o(i.os_get_free_task_type))
<BR><BR>[Called By]<UL><LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_create_x
</UL>

<P><STRONG><a name="[30b]"></a>os_msg_post</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, os_msg_q.o(i.os_msg_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_msg_post
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YK_APP_Set_Evt
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_msg_default_handler_imp
</UL>

<P><STRONG><a name="[30a]"></a>os_task_create</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_task.o(i.os_task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = os_task_create &rArr; os_task_create_x &rArr; from_task_func_to_msg_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_create_x
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YK_APP_Init
</UL>

<P><STRONG><a name="[706]"></a>os_task_create_x</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, os_task.o(i.os_task_create_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = os_task_create_x &rArr; from_task_func_to_msg_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_create (via Veneer)
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_free_task_type
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;from_task_func_to_msg_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_task_create
</UL>

<P><STRONG><a name="[29f]"></a>os_timer_init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, os_timer.o(i.os_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save (via Veneer)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore (via Veneer)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_Reset
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Google_Init
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Platfrom_Init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MEM_Init
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_remote_central_init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_led_init
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;firmware_update_init
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_store_info_timer_init
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_scan_init
</UL>

<P><STRONG><a name="[2bf]"></a>os_timer_start</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, os_timer.o(i.os_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = os_timer_start &rArr; os_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save (via Veneer)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore (via Veneer)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set (via Veneer)
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_valid_tim_evt_id
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_Reset
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_UnProvision
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_Provision
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MEM_Slow_Save
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Platfrom_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;firmware_update_apply
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_store_info_timer_start
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_remote_gatt_create
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_remote_disconnected
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_scan_start
</UL>

<P><STRONG><a name="[2be]"></a>os_timer_stop</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, os_timer.o(i.os_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = os_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save (via Veneer)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore (via Veneer)
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear (via Veneer)
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_active (via Veneer)
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free (via Veneer)
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_time_evt_id
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MEM_Slow_Save
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_callback_func
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_store_info_timer_start
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_remote_connected
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_scan_stop
</UL>

<P><STRONG><a name="[2c3]"></a>pb_remote_central_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, pb_remote_central.o(i.pb_remote_central_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = pb_remote_central_init &rArr; gatt_add_client &rArr; gatt_add_client_uuid &rArr; gatt_write_peer_svc_to_flash &rArr; flash_write &rArr; flash_protect_enable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_init
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_pbrs_prov_bearer_gatt_cb_regist
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_add_client
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MESH_Init
</UL>

<P><STRONG><a name="[70b]"></a>pb_remote_connected</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pb_remote_central.o(i.pb_remote_connected))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = pb_remote_connected &rArr; gatt_discovery_all_peer_svc &rArr; gatt_load_peer_svc_from_flash &rArr; flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_discovery_all_peer_svc
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proj_ble_gap_evt_func
</UL>

<P><STRONG><a name="[70c]"></a>pb_remote_disconnected</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, pb_remote_central.o(i.pb_remote_disconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = pb_remote_disconnected &rArr; m_pbrs_prov_bearer_gatt_closed &rArr; m_fnd_pbrs_link_closed &rArr; m_fnd_pbrs_link_state_report &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_pbrs_prov_bearer_gatt_closed
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_start_conn
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proj_ble_gap_evt_func
</UL>

<P><STRONG><a name="[70d]"></a>pmu_bg_trim</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, driver_pmu.o(i.pmu_bg_trim))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pmu_bg_trim &rArr; frspim_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frspim_wr (via Veneer)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frspim_rd (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_sub_init
</UL>

<P><STRONG><a name="[70e]"></a>pmu_enable_irq</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, driver_pmu.o(i.pmu_enable_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pmu_enable_irq &rArr; frspim_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_enable_isr2 (via Veneer)
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_enable_isr (via Veneer)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frspim_wr (via Veneer)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frspim_rd (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_entry_before_ble_init
</UL>

<P><STRONG><a name="[711]"></a>pmu_qdec_get_cnt</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, driver_pmu_qdec.o(i.pmu_qdec_get_cnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pmu_qdec_get_cnt &rArr; frspim_rd
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frspim_rd (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdec_isr_ram (via Veneer)
</UL>

<P><STRONG><a name="[712]"></a>pmu_set_sys_power_mode</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, driver_pmu.o(i.pmu_set_sys_power_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pmu_set_sys_power_mode &rArr; frspim_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frspim_wr (via Veneer)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frspim_rd (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_entry_before_ble_init
</UL>

<P><STRONG><a name="[323]"></a>pmu_sub_init</STRONG> (Thumb, 778 bytes, Stack size 24 bytes, driver_pmu.o(i.pmu_sub_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pmu_sub_init &rArr; pmu_bg_trim &rArr; frspim_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_first_power_on (via Veneer)
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_bg_trim
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efuse_read
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frspim_wr (via Veneer)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frspim_rd (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[453]"></a>prf_add_profile</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, prf.o(i.prf_add_profile))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prf_add_profile
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_profile_task_add_cmd_handler
</UL>

<P><STRONG><a name="[434]"></a>prf_cleanup</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, prf.o(i.prf_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prf_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_con_cleanup
</UL>

<P><STRONG><a name="[438]"></a>prf_create</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, prf.o(i.prf_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prf_create
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_con_create
</UL>

<P><STRONG><a name="[4fd]"></a>prf_env_get</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, prf.o(i.prf_env_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prf_env_get
</UL>
<BR>[Called By]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_local_id_get
</UL>

<P><STRONG><a name="[47d]"></a>prf_extract_svc_info_uuid_128</STRONG> (Thumb, 414 bytes, Stack size 112 bytes, prf_utils.o(i.prf_extract_svc_info_uuid_128))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = prf_extract_svc_info_uuid_128 &rArr; attm_uuid_comp &rArr; attm_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_uuid_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_store_peer_prf_info
</UL>

<P><STRONG><a name="[41d]"></a>prf_get_task_from_id</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, prf.o(i.prf_get_task_from_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = prf_get_task_from_id
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_send_rsp
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_start
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_send_prov_param_rsp
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_send_prov_auth_data_rsp
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_proxy_ctrl
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_set_runtime
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_api_cmp_handler
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_addr_set_rand_addr
</UL>

<P><STRONG><a name="[441]"></a>prf_init</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, prf.o(i.prf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_msg_flush (via Veneer)
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_create (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_dev_config_cmd_handler
</UL>

<P><STRONG><a name="[f]"></a>prf_itf_get_imp</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app_prf.o(i.prf_itf_get_imp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prf_itf_get_imp
</UL>
<BR>[Calls]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gatt_default_itf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry.o(i.app_main)
</UL>
<P><STRONG><a name="[4fe]"></a>prf_src_task_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, prf.o(i.prf_src_task_get))
<BR><BR>[Called By]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_local_id_get
</UL>

<P><STRONG><a name="[97]"></a>proj_ble_gap_evt_func</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, proj_main.o(i.proj_ble_gap_evt_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = proj_ble_gap_evt_func &rArr; pb_remote_connected &rArr; gatt_discovery_all_peer_svc &rArr; gatt_load_peer_svc_from_flash &rArr; flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Google_Start_Advertising
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Platfrom_Get_Provision_Status
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_ota_state (via Veneer)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_remote_disconnected
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_remote_connected
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_mtu_exchange_req
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_get_connect_num
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proj_main.o(i.user_entry_after_ble_init)
</UL>
<P><STRONG><a name="[2da]"></a>pwm_init</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, driver_pwm.o(i.pwm_init), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_get_pclk (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_Init
</UL>

<P><STRONG><a name="[2dc]"></a>pwm_set_high_cnt</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, driver_pwm.o(i.pwm_set_high_cnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pwm_set_high_cnt
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save (via Veneer)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_Set_CmpData
</UL>

<P><STRONG><a name="[2db]"></a>pwm_start</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, driver_pwm.o(i.pwm_start), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWM_Init
</UL>

<P><STRONG><a name="[3b6]"></a>receive_blob_procedure_start</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, blob_procedure_server.o(i.receive_blob_procedure_start))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;firmware_update_start
</UL>

<P><STRONG><a name="[e]"></a>rwble_hl_init_imp</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rwble_hl.o(i.rwble_hl_init_imp))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = rwble_hl_init_imp &rArr; l2cm_init &rArr; l2cc_init &rArr; l2cc_cleanup &rArr; l2cc_op_complete &rArr; l2cc_send_cmp_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cm_init
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_init
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_init
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry.o(i.app_main)
</UL>
<P><STRONG><a name="[454]"></a>rwble_hl_reset</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rwble_hl.o(i.rwble_hl_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = rwble_hl_reset &rArr; l2cm_init &rArr; l2cc_init &rArr; l2cc_cleanup &rArr; l2cc_op_complete &rArr; l2cc_send_cmp_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cm_init
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_init
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_init
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_reset_cmd_handler
</UL>

<P><STRONG><a name="[718]"></a>sha256_final</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, sha256.o(i.sha256_final))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = sha256_final &rArr; sha256_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_transform
</UL>
<BR>[Called By]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_gen_auth_value
</UL>

<P><STRONG><a name="[703]"></a>sha256_gen_auth_value</STRONG> (Thumb, 212 bytes, Stack size 256 bytes, sha256.o(i.sha256_gen_auth_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = sha256_gen_auth_value &rArr; sha256_update &rArr; sha256_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_update
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_init
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_final
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_callback_func
</UL>

<P><STRONG><a name="[71a]"></a>sha256_init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, sha256.o(i.sha256_init))
<BR><BR>[Called By]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_gen_auth_value
</UL>

<P><STRONG><a name="[719]"></a>sha256_transform</STRONG> (Thumb, 294 bytes, Stack size 324 bytes, sha256.o(i.sha256_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = sha256_transform
</UL>
<BR>[Called By]<UL><LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_update
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_final
</UL>

<P><STRONG><a name="[71b]"></a>sha256_update</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, sha256.o(i.sha256_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = sha256_update &rArr; sha256_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_transform
</UL>
<BR>[Called By]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_gen_auth_value
</UL>

<P><STRONG><a name="[720]"></a>smpc_ShiftLeft1Bit16ByteNum</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, smpc_crypto.o(i.smpc_ShiftLeft1Bit16ByteNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpc_ShiftLeft1Bit16ByteNum
</UL>
<BR>[Called By]<UL><LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_aes_cmac_continue
</UL>

<P><STRONG><a name="[71d]"></a>smpc_XOR_16_Byte_Array</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, smpc_crypto.o(i.smpc_XOR_16_Byte_Array))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = smpc_XOR_16_Byte_Array
</UL>
<BR>[Called By]<UL><LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_aes_cmac_continue
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_aes_cmac_complete
</UL>

<P><STRONG><a name="[71c]"></a>smpc_aes_cmac_complete</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, smpc_crypto.o(i.smpc_aes_cmac_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = smpc_aes_cmac_complete &rArr; smpc_send_use_enc_block_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_use_enc_block_cmd
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_XOR_16_Byte_Array
</UL>
<BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_process_aes_cmac
</UL>

<P><STRONG><a name="[71f]"></a>smpc_aes_cmac_continue</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, smpc_crypto.o(i.smpc_aes_cmac_continue))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = smpc_aes_cmac_continue &rArr; smpc_send_use_enc_block_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_use_enc_block_cmd
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_XOR_16_Byte_Array
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_ShiftLeft1Bit16ByteNum
</UL>
<BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_process_aes_cmac
</UL>

<P><STRONG><a name="[721]"></a>smpc_aes_cmac_init</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, smpc_crypto.o(i.smpc_aes_cmac_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = smpc_aes_cmac_init &rArr; smpc_send_use_enc_block_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_use_enc_block_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_f6_init
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_f5_init
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_g2_init
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_f4_Init
</UL>

<P><STRONG><a name="[467]"></a>smpc_calc_confirm_cont</STRONG> (Thumb, 1360 bytes, Stack size 56 bytes, smpc_api.o(i.smpc_calc_confirm_cont))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = smpc_calc_confirm_cont &rArr; smpc_initiate_dhkey_verification &rArr; smpc_f6_init &rArr; smpc_aes_cmac_init &rArr; smpc_send_use_enc_block_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_local_public_key
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_enc_keysize_get
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_start_enc_cmd
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_req_ind
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_ltk_req_rsp
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_initiate_dhkey_verification
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_initiate_dhkey_check
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_init_mac_key_calculation
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_stk
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_rand
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_cfm
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_end
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_process_aes_cmac
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_g2_init
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_g2_complete
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_f6_complete
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_f5_complete
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_f4_complete
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_aes_cmac_init
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_use_enc_block_ind_handler
</UL>

<P><STRONG><a name="[730]"></a>smpc_calc_subkeys</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, smpc.o(i.smpc_calc_subkeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = smpc_calc_subkeys &rArr; smpc_xor
</UL>
<BR>[Calls]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_xor
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_sign_cont
</UL>

<P><STRONG><a name="[732]"></a>smpc_check_key_distrib</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, smpc.o(i.smpc_check_key_distrib))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = smpc_check_key_distrib
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_secure_connections_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_rsp
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_rsp_pdu
</UL>

<P><STRONG><a name="[733]"></a>smpc_check_max_key_size</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, smpc.o(i.smpc_check_max_key_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpc_check_max_key_size
</UL>
<BR>[Calls]<UL><LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_enc_keysize_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_rsp
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_rsp_pdu
</UL>

<P><STRONG><a name="[74b]"></a>smpc_check_pairing_feat</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, smpc.o(i.smpc_check_pairing_feat))
<BR><BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_start
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_rsp_pdu
</UL>

<P><STRONG><a name="[74c]"></a>smpc_check_param</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, smpc_util.o(i.smpc_check_param))
<BR><BR>[Called By]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_recv
</UL>

<P><STRONG><a name="[735]"></a>smpc_check_repeated_attempts</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, smpc.o(i.smpc_check_repeated_attempts))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = smpc_check_repeated_attempts &rArr; smpc_launch_rep_att_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_dest_task
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_launch_rep_att_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_sec_req_pdu
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_req_pdu
</UL>

<P><STRONG><a name="[3ee]"></a>smpc_clear_timeout_timer</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, smpc.o(i.smpc_clear_timeout_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_operation_cleanup
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_end
</UL>

<P><STRONG><a name="[43e]"></a>smpc_confirm_gen_rand</STRONG> (Thumb, 578 bytes, Stack size 32 bytes, smpc_api.o(i.smpc_confirm_gen_rand))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = smpc_confirm_gen_rand &rArr; smpc_init_mac_key_calculation &rArr; smpc_f5_init &rArr; smpc_aes_cmac_init &rArr; smpc_send_use_enc_block_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_local_public_key
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_req_ind
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_init_mac_key_calculation
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_get_next_passkey_bit
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_rand
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_e1
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_f4_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_gen_rand_nb_ind_handler
</UL>

<P><STRONG><a name="[3e3]"></a>smpc_encrypt_cfm</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, smpc_api.o(i.smpc_encrypt_cfm))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = smpc_encrypt_cfm &rArr; smpc_send_ltk_req_rsp &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_ltk_req_rsp
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_encrypt_cfm_handler
</UL>

<P><STRONG><a name="[3e5]"></a>smpc_encrypt_start</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, smpc_api.o(i.smpc_encrypt_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = smpc_encrypt_start &rArr; smpc_send_start_enc_cmd &rArr; gapc_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_enc_keysize_set
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_start_enc_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_encrypt_cmd_handler
</UL>

<P><STRONG><a name="[3e4]"></a>smpc_encrypt_start_handler</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, smpc_api.o(i.smpc_encrypt_start_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smpc_encrypt_start_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_dest_task
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_encrypt_cmd_handler
</UL>

<P><STRONG><a name="[739]"></a>smpc_f4_Init</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, smpc_crypto.o(i.smpc_f4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = smpc_f4_Init &rArr; smpc_aes_cmac_init &rArr; smpc_send_use_enc_block_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_aes_cmac_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_oob_exch
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_confirm_gen_rand
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_rand_pdu
</UL>

<P><STRONG><a name="[725]"></a>smpc_f4_complete</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, smpc_crypto.o(i.smpc_f4_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smpc_f4_complete
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont
</UL>

<P><STRONG><a name="[72c]"></a>smpc_f5_complete</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, smpc_crypto.o(i.smpc_f5_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smpc_f5_complete
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont
</UL>

<P><STRONG><a name="[73b]"></a>smpc_f5_init</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, smpc_crypto.o(i.smpc_f5_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = smpc_f5_init &rArr; smpc_aes_cmac_init &rArr; smpc_send_use_enc_block_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_aes_cmac_init
</UL>
<BR>[Called By]<UL><LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_init_mac_key_calculation
</UL>

<P><STRONG><a name="[72e]"></a>smpc_f6_complete</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, smpc_crypto.o(i.smpc_f6_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smpc_f6_complete
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont
</UL>

<P><STRONG><a name="[73c]"></a>smpc_f6_init</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, smpc_crypto.o(i.smpc_f6_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = smpc_f6_init &rArr; smpc_aes_cmac_init &rArr; smpc_send_use_enc_block_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_aes_cmac_init
</UL>
<BR>[Called By]<UL><LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_initiate_dhkey_verification
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_initiate_dhkey_check
</UL>

<P><STRONG><a name="[72a]"></a>smpc_g2_complete</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, smpc_crypto.o(i.smpc_g2_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smpc_g2_complete
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont
</UL>

<P><STRONG><a name="[728]"></a>smpc_g2_init</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, smpc_crypto.o(i.smpc_g2_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = smpc_g2_init &rArr; smpc_aes_cmac_init &rArr; smpc_send_use_enc_block_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_aes_cmac_init
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_rand_pdu
</UL>

<P><STRONG><a name="[722]"></a>smpc_generate_cfm</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, smpc.o(i.smpc_generate_cfm))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = smpc_generate_cfm &rArr; smpc_send_use_enc_block_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_bdaddr
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_xor
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_use_enc_block_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont
</UL>

<P><STRONG><a name="[73d]"></a>smpc_generate_ci</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, smpc.o(i.smpc_generate_ci))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = smpc_generate_ci &rArr; smpc_xor
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_csrk
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_xor
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_sign_cont
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_sign_command
</UL>

<P><STRONG><a name="[737]"></a>smpc_generate_e1</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, smpc.o(i.smpc_generate_e1))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = smpc_generate_e1 &rArr; smpc_xor
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_bdaddr
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_xor
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_confirm_gen_rand
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_rand_pdu
</UL>

<P><STRONG><a name="[73f]"></a>smpc_generate_l</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, smpc.o(i.smpc_generate_l))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = smpc_generate_l
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_csrk
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_sign_cont
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_sign_command
</UL>

<P><STRONG><a name="[729]"></a>smpc_generate_rand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, smpc.o(i.smpc_generate_rand))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpc_generate_rand
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_tk_exch
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_oob_exch
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_confirm_gen_rand
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_public_key_pdu
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_rsp_pdu
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_rand_pdu
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_cfm_pdu
</UL>

<P><STRONG><a name="[4b6]"></a>smpc_generate_stk</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, smpc.o(i.smpc_generate_stk))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = smpc_generate_stk &rArr; smpc_send_use_enc_block_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_use_enc_block_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_ltk_request_evt_handler
</UL>

<P><STRONG><a name="[740]"></a>smpc_get_key_sec_prop</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, smpc.o(i.smpc_get_key_sec_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smpc_get_key_sec_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_secure_connections_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_rsp
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_rsp_pdu
</UL>

<P><STRONG><a name="[738]"></a>smpc_get_next_passkey_bit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, smpc.o(i.smpc_get_next_passkey_bit))
<BR><BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_confirm_gen_rand
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_rand_pdu
</UL>

<P><STRONG><a name="[3e6]"></a>smpc_handle_dh_key_check_complete</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, smpc.o(i.smpc_handle_dh_key_check_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = smpc_handle_dh_key_check_complete &rArr; smpc_init_mac_key_calculation &rArr; smpc_f5_init &rArr; smpc_aes_cmac_init &rArr; smpc_send_use_enc_block_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_init_mac_key_calculation
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_gen_dh_key_ind_handler
</UL>

<P><STRONG><a name="[4b1]"></a>smpc_handle_enc_change_evt</STRONG> (Thumb, 308 bytes, Stack size 24 bytes, smpc.o(i.smpc_handle_enc_change_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = smpc_handle_enc_change_evt &rArr; smpc_tkdp_rcp_start &rArr; smpc_tkdp_rcp_continue &rArr; smpc_pairing_end &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_update_state
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_link_encrypted
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_dest_task
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_auth_get
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_send_start
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_rcp_start
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_secure_connections_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_enc_key_refr_evt_handler
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_enc_chg_evt_handler
</UL>

<P><STRONG><a name="[726]"></a>smpc_init_mac_key_calculation</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, smpc.o(i.smpc_init_mac_key_calculation))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = smpc_init_mac_key_calculation &rArr; smpc_f5_init &rArr; smpc_aes_cmac_init &rArr; smpc_send_use_enc_block_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_f5_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_nc_exch
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_handle_dh_key_check_complete
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_confirm_gen_rand
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_rand_pdu
</UL>

<P><STRONG><a name="[72d]"></a>smpc_initiate_dhkey_check</STRONG> (Thumb, 208 bytes, Stack size 80 bytes, smpc.o(i.smpc_initiate_dhkey_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = smpc_initiate_dhkey_check &rArr; smpc_f6_init &rArr; smpc_aes_cmac_init &rArr; smpc_send_use_enc_block_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_f6_init
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_dhkey_check_pdu
</UL>

<P><STRONG><a name="[72f]"></a>smpc_initiate_dhkey_verification</STRONG> (Thumb, 206 bytes, Stack size 80 bytes, smpc.o(i.smpc_initiate_dhkey_verification))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = smpc_initiate_dhkey_verification &rArr; smpc_f6_init &rArr; smpc_aes_cmac_init &rArr; smpc_send_use_enc_block_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_f6_init
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_dhkey_check_pdu
</UL>

<P><STRONG><a name="[74a]"></a>smpc_is_sec_mode_reached</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, smpc.o(i.smpc_is_sec_mode_reached))
<BR><BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_rsp
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_rsp_pdu
</UL>

<P><STRONG><a name="[745]"></a>smpc_key_press_notification_ind</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, smpc_api.o(i.smpc_key_press_notification_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smpc_key_press_notification_ind
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_dest_task
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_keypress_notification_pdu
</UL>

<P><STRONG><a name="[736]"></a>smpc_launch_rep_att_timer</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, smpc.o(i.smpc_launch_rep_att_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = smpc_launch_rep_att_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set (via Veneer)
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_check_repeated_attempts
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_end
</UL>

<P><STRONG><a name="[3c3]"></a>smpc_pairing_csrk_exch</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, smpc_api.o(i.smpc_pairing_csrk_exch))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = smpc_pairing_csrk_exch &rArr; smpc_tkdp_send_continue &rArr; smpc_tkdp_rcp_start &rArr; smpc_tkdp_rcp_continue &rArr; smpc_pairing_end &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_send_continue
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_cfm_handler
</UL>

<P><STRONG><a name="[3c2]"></a>smpc_pairing_end</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, smpc.o(i.smpc_pairing_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = smpc_pairing_end &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_clear_timeout_timer
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_ind
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_launch_rep_att_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_smp_timeout_timer_ind_handler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_cfm_handler
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_send_continue
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_rcp_continue
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_recv
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_nc_exch
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_rsp_pdu
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_fail_pdu
</UL>

<P><STRONG><a name="[3c6]"></a>smpc_pairing_irk_exch</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, smpc_api.o(i.smpc_pairing_irk_exch))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = smpc_pairing_irk_exch &rArr; smpc_tkdp_send_continue &rArr; smpc_tkdp_rcp_start &rArr; smpc_tkdp_rcp_continue &rArr; smpc_pairing_end &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_send_continue
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_cfm_handler
</UL>

<P><STRONG><a name="[3c5]"></a>smpc_pairing_ltk_exch</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, smpc_api.o(i.smpc_pairing_ltk_exch))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = smpc_pairing_ltk_exch &rArr; smpc_tkdp_send_continue &rArr; smpc_tkdp_rcp_start &rArr; smpc_tkdp_rcp_continue &rArr; smpc_pairing_end &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_enc_keysize_get
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_send_continue
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_cfm_handler
</UL>

<P><STRONG><a name="[3c8]"></a>smpc_pairing_nc_exch</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, smpc_api.o(i.smpc_pairing_nc_exch))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = smpc_pairing_nc_exch &rArr; smpc_init_mac_key_calculation &rArr; smpc_f5_init &rArr; smpc_aes_cmac_init &rArr; smpc_send_use_enc_block_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_init_mac_key_calculation
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_end
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_cfm_handler
</UL>

<P><STRONG><a name="[3c7]"></a>smpc_pairing_oob_exch</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, smpc_api.o(i.smpc_pairing_oob_exch))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = smpc_pairing_oob_exch &rArr; smpc_f4_Init &rArr; smpc_aes_cmac_init &rArr; smpc_send_use_enc_block_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_rand
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_f4_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_cfm_handler
</UL>

<P><STRONG><a name="[3ca]"></a>smpc_pairing_req_handler</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, smpc_api.o(i.smpc_pairing_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = smpc_pairing_req_handler &rArr; smpc_send_pairing_req_ind
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_req_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_cmd_handler
</UL>

<P><STRONG><a name="[3bf]"></a>smpc_pairing_rsp</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, smpc_api.o(i.smpc_pairing_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = smpc_pairing_rsp &rArr; smpc_pdu_send &rArr; l2cc_pdu_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_is_sec_con_pairing_supp
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_is_legacy_pairing_supp
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_req_ind
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_secure_connections_enabled
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_is_sec_mode_reached
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_get_key_sec_prop
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_check_max_key_size
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_check_key_distrib
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_cfm_handler
</UL>

<P><STRONG><a name="[3cb]"></a>smpc_pairing_start</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, smpc_api.o(i.smpc_pairing_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = smpc_pairing_start &rArr; smpc_pdu_send &rArr; l2cc_pdu_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_is_sec_con_pairing_supp
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_is_legacy_pairing_supp
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_check_pairing_feat
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_cmd_handler
</UL>

<P><STRONG><a name="[3c4]"></a>smpc_pairing_tk_exch</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, smpc_api.o(i.smpc_pairing_tk_exch))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = smpc_pairing_tk_exch &rArr; smpc_generate_rand
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_secure_connections_enabled
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_rand
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_cfm_handler
</UL>

<P><STRONG><a name="[4ce]"></a>smpc_pdu_recv</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, smpc.o(i.smpc_pdu_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = smpc_pdu_recv &rArr; smpc_pairing_end &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_check_param
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_end
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler
</UL>

<P><STRONG><a name="[3c0]"></a>smpc_pdu_send</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, smpc.o(i.smpc_pdu_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = smpc_pdu_send &rArr; l2cc_pdu_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set (via Veneer)
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear (via Veneer)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_key_press_notification_cmd_handler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_cfm_handler
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_send_continue
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_security_req_send
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_recv
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_start
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_rsp
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_nc_exch
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_ltk_exch
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_irk_exch
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_csrk_exch
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_confirm_gen_rand
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_sec_req_pdu
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_public_key_pdu
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_rsp_pdu
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_req_pdu
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_rand_pdu
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_cfm_pdu
</UL>

<P><STRONG><a name="[724]"></a>smpc_process_aes_cmac</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, smpc_crypto.o(i.smpc_process_aes_cmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = smpc_process_aes_cmac &rArr; smpc_aes_cmac_continue &rArr; smpc_send_use_enc_block_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_aes_cmac_continue
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_aes_cmac_complete
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont
</UL>

<P><STRONG><a name="[4b4]"></a>smpc_secure_connections_enabled</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, smpc.o(i.smpc_secure_connections_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_send_continue
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_rcp_continue
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_start_enc_cmd
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_handle_enc_change_evt
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_get_key_sec_prop
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_check_key_distrib
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_tk_exch
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_rsp
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_rsp_pdu
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_cfm_pdu
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_ltk_request_evt_handler
</UL>

<P><STRONG><a name="[3f9]"></a>smpc_security_req_send</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, smpc_api.o(i.smpc_security_req_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = smpc_security_req_send &rArr; smpc_pdu_send &rArr; l2cc_pdu_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_is_sec_con_pairing_supp
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_is_legacy_pairing_supp
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_security_cmd_handler
</UL>

<P><STRONG><a name="[74e]"></a>smpc_send_gen_dh_key_cmd</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, smpc.o(i.smpc_send_gen_dh_key_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smpc_send_gen_dh_key_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_public_key_pdu
</UL>

<P><STRONG><a name="[4b5]"></a>smpc_send_ltk_req_rsp</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, smpc.o(i.smpc_send_ltk_req_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = smpc_send_ltk_req_rsp &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller (via Veneer)
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_conhdl
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_update_state
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_encrypt_cfm
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_ltk_request_evt_handler
</UL>

<P><STRONG><a name="[747]"></a>smpc_send_pairing_ind</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, smpc.o(i.smpc_send_pairing_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = smpc_send_pairing_ind &rArr; gapc_auth_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_link_encrypted
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_dest_task
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_auth_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_end
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_sign_info_pdu
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_sec_req_pdu
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_req_pdu
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_fail_pdu
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_mst_id_pdu
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_id_addr_info_pdu
</UL>

<P><STRONG><a name="[72b]"></a>smpc_send_pairing_req_ind</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, smpc.o(i.smpc_send_pairing_req_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = smpc_send_pairing_req_ind
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_dest_task
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_enc_keysize_get
</UL>
<BR>[Called By]<UL><LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_send_continue
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_rsp
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_req_handler
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_confirm_gen_rand
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_public_key_pdu
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_rsp_pdu
</UL>

<P><STRONG><a name="[723]"></a>smpc_send_start_enc_cmd</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, smpc.o(i.smpc_send_start_enc_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = smpc_send_start_enc_cmd &rArr; gapc_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller (via Veneer)
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_conhdl
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_update_state
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_secure_connections_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_encrypt_start
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont
</UL>

<P><STRONG><a name="[71e]"></a>smpc_send_use_enc_block_cmd</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, smpc.o(i.smpc_send_use_enc_block_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smpc_send_use_enc_block_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_stk
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_cfm
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_aes_cmac_continue
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_aes_cmac_complete
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_aes_cmac_init
</UL>

<P><STRONG><a name="[3fc]"></a>smpc_sign_command</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, smpc_api.o(i.smpc_sign_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = smpc_sign_command &rArr; smpc_generate_ci &rArr; smpc_xor
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_sign_counter
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_l
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_ci
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_sign_cmd_handler
</UL>

<P><STRONG><a name="[468]"></a>smpc_sign_cont</STRONG> (Thumb, 466 bytes, Stack size 64 bytes, smpc_api.o(i.smpc_sign_cont))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = smpc_sign_cont &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_sign_counter
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_requester
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_operation_ptr
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_dest_task
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_xor
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_l
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_ci
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_subkeys
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_use_enc_block_ind_handler
</UL>

<P><STRONG><a name="[74d]"></a>smpc_tkdp_rcp_continue</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, smpc.o(i.smpc_tkdp_rcp_continue))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = smpc_tkdp_rcp_continue &rArr; smpc_pairing_end &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_send_start
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_secure_connections_enabled
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_end
</UL>
<BR>[Called By]<UL><LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_rcp_start
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_sign_info_pdu
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_mst_id_pdu
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_id_info_pdu
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_id_addr_info_pdu
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_enc_info_pdu
</UL>

<P><STRONG><a name="[744]"></a>smpc_tkdp_rcp_start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, smpc.o(i.smpc_tkdp_rcp_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = smpc_tkdp_rcp_start &rArr; smpc_tkdp_rcp_continue &rArr; smpc_pairing_end &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_rcp_continue
</UL>
<BR>[Called By]<UL><LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_send_continue
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_handle_enc_change_evt
</UL>

<P><STRONG><a name="[746]"></a>smpc_tkdp_send_continue</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, smpc.o(i.smpc_tkdp_send_continue))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = smpc_tkdp_send_continue &rArr; smpc_tkdp_rcp_start &rArr; smpc_tkdp_rcp_continue &rArr; smpc_pairing_end &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_irk
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_bdaddr
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_address_type
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_rcp_start
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_req_ind
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_secure_connections_enabled
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_end
</UL>
<BR>[Called By]<UL><LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_send_start
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_ltk_exch
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_irk_exch
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_csrk_exch
</UL>

<P><STRONG><a name="[743]"></a>smpc_tkdp_send_start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, smpc.o(i.smpc_tkdp_send_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = smpc_tkdp_send_start &rArr;  smpc_tkdp_send_continue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_send_continue
</UL>
<BR>[Called By]<UL><LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_rcp_continue
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_handle_enc_change_evt
</UL>

<P><STRONG><a name="[731]"></a>smpc_xor</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, smpc.o(i.smpc_xor))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = smpc_xor
</UL>
<BR>[Called By]<UL><LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_e1
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_ci
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_cfm
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_subkeys
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_sign_cont
</UL>

<P><STRONG><a name="[431]"></a>system_latency_enable</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, patch_rf.o(i.system_latency_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = system_latency_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_conhdl
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_con_cleanup
</UL>

<P><STRONG><a name="[751]"></a>system_sleep_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_utils.o(i.system_sleep_disable))
<BR><BR>[Calls]<UL><LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_set (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_entry_after_sleep_imp (via Veneer)
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_entry_after_ble_init
</UL>

<P><STRONG><a name="[2dd]"></a>timer_init</STRONG> (Thumb, 184 bytes, Stack size 72 bytes, driver_timer.o(i.timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_get_pclk_config (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIMER_Init
</UL>

<P><STRONG><a name="[328]"></a>trng_init_</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, sys_utils.o(i.trng_init_))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = trng_init_ &rArr; trng_flow_w_specific_smp_cnt
</UL>
<BR>[Calls]<UL><LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_flow_w_specific_smp_cnt
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[31c]"></a>user_custom_parameters</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, proj_main.o(i.user_custom_parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = user_custom_parameters &rArr; retry_handshake &rArr; _app_boot_host_comm &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_handshake (via Veneer)
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_table_set_static_keys_store_offset
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efuse_get_chip_unique_id
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[316]"></a>user_entry_after_ble_init</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, proj_main.o(i.user_entry_after_ble_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = user_entry_after_ble_init &rArr; YK_APP_Init &rArr; APP_Platfrom_Init &rArr; APP_MESH_Init &rArr; pb_remote_central_init &rArr; gatt_add_client &rArr; gatt_add_client_uuid &rArr; gatt_write_peer_svc_to_flash &rArr; flash_write &rArr; flash_protect_enable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_run (via Veneer)
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_address_get
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YK_APP_Init
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_sleep_disable
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_dev_name
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_cb_func
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frspim_rd (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_reset_complete_ind_func
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_db_init_complete_ind_func
</UL>

<P><STRONG><a name="[324]"></a>user_entry_before_ble_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, proj_main.o(i.user_entry_before_ble_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = user_entry_before_ble_init &rArr; BSP_Init &rArr; BSP_TIMER_Init &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_protect_enable (via Veneer)
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_sys_power_mode
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_enable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[31e]"></a>user_init_static_memory</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, proj_main.o(i.user_init_static_memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = user_init_static_memory &rArr; initial_static_memory &rArr; em_ble_generate_base_address_table
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_static_memory
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[758]"></a>wdt_init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, driver_wdt.o(i.wdt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wdt_init &rArr; frspim_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frspim_wr (via Veneer)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frspim_rd (via Veneer)
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_get_rc_clk (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_isr_ram (via Veneer)
</UL>

<P><STRONG><a name="[4d6]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_start_transition
</UL>

<P><STRONG><a name="[75a]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[75e]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[763]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[4d4]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_start_transition
</UL>

<P><STRONG><a name="[760]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[4d5]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_start_transition
</UL>

<P><STRONG><a name="[761]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[4d3]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_start_transition
</UL>

<P><STRONG><a name="[8ac]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[2ee]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hue_2_RGB
</UL>

<P><STRONG><a name="[762]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[8ad]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[2ed]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hue_2_RGB
</UL>

<P><STRONG><a name="[764]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[75d]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[75c]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[8ae]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)

<P><STRONG><a name="[765]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[2ec]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hue_2_RGB
</UL>

<P><STRONG><a name="[767]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[2e6]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hue_2_RGB
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSL_2_RGB
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_to_Level
</UL>

<P><STRONG><a name="[769]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[76c]"></a>__fpl_fcheck_NaN1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fcheck1.o(x$fpl$fcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>

<P><STRONG><a name="[2e5]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSL_2_RGB
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_to_Level
</UL>

<P><STRONG><a name="[76d]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[308]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_to_Level
</UL>

<P><STRONG><a name="[76e]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[2eb]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSL_2_RGB
</UL>

<P><STRONG><a name="[76f]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[307]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_to_Level
</UL>

<P><STRONG><a name="[8af]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[2e4]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSL_2_RGB
</UL>

<P><STRONG><a name="[8b0]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[2e7]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hue_2_RGB
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSL_2_RGB
</UL>

<P><STRONG><a name="[770]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[768]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[76b]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[2ef]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb))
<BR><BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hue_2_RGB
</UL>

<P><STRONG><a name="[771]"></a>_frsb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[2e8]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hue_2_RGB
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSL_2_RGB
</UL>

<P><STRONG><a name="[773]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[75f]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[2f0]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hue_2_RGB
</UL>

<P><STRONG><a name="[2e9]"></a>__ARM_scalbnf</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, scalbnf.o(x$fpl$scalbnf))
<BR><BR>[Calls]<UL><LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSL_2_RGB
</UL>

<P><STRONG><a name="[774]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>

<P><STRONG><a name="[31a]"></a>enable_cache</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, entry.o(ram_code_front))
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_cal
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_handshake
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_power_restore_entry_imp
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main (via Veneer)
</UL>

<P><STRONG><a name="[254]"></a>timer0_isr_ram</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fr801x_it.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = timer0_isr_ram &rArr; YK_APP_TimeProc &rArr; APP_Google_TimeProc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YK_APP_TimeProc (via Veneer)
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_clear_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[255]"></a>timer1_isr_ram</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fr801x_it.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = timer1_isr_ram &rArr; app_light_timer_cb &rArr; BSP_LED_SetWYLevel &rArr; BSP_PWM_Set_CmpData &rArr; pwm_set_high_cnt
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_light_timer_cb (via Veneer)
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_clear_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[790]"></a>app_get_ota_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_iap.o(ram_code))
<BR><BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</UL>

<P><STRONG><a name="[302]"></a>app_set_ota_state</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_iap.o(ram_code))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_StartOTA (via Veneer)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_Confirm (via Veneer)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proj_ble_gap_evt_func (via Veneer)
</UL>

<P><STRONG><a name="[2fc]"></a>app_otas_save_data</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, bsp_iap.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = app_otas_save_data &rArr; flash_write &rArr; flash_protect_enable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save (via Veneer)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_Confirm (via Veneer)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTA_Image_Update (via Veneer)
</UL>

<P><STRONG><a name="[775]"></a>Crc32CalByte</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, bsp_iap.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Crc32CalByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_cal
</UL>

<P><STRONG><a name="[13]"></a>user_entry_before_sleep_imp</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, proj_main.o(ram_code))
<BR><BR>[Calls]<UL><LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc_noint_no_wait (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry.o(i.app_main)
</UL>
<P><STRONG><a name="[779]"></a>user_entry_after_sleep_imp</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, proj_main.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = user_entry_after_sleep_imp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init (via Veneer)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_port_mux (via Veneer)
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ (via Veneer)
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc_noint_no_wait (via Veneer)
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_sleep_disable (via Veneer)
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_port_pull (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_isr_patch
</UL>

<P><STRONG><a name="[259]"></a>i2s_isr_ram</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, driver_i2s.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2s_isr_ram
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[77b]"></a>keyscan_isr_ram</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, driver_keyscan.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = keyscan_isr_ram &rArr; frspim_rd
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frspim_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_isr_ram_C
</UL>

<P><STRONG><a name="[77c]"></a>pmu_clear_isr_state</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, driver_pmu.o(ram_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save (via Veneer)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore (via Veneer)
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_delay_100us
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frspim_wr
</UL>
<BR>[Called By]<UL></UL>

<P><STRONG><a name="[77e]"></a>charge_isr_ram</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, driver_pmu.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = charge_isr_ram
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_enable_isr (via Veneer)
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_disable_isr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_isr_ram_C
</UL>

<P><STRONG><a name="[780]"></a>lvd_isr_ram</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, driver_pmu.o(ram_code))
<BR><BR>[Calls]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_disable_isr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_isr_ram_C
</UL>

<P><STRONG><a name="[781]"></a>otd_isr_ram</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, driver_pmu.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = otd_isr_ram
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_disable_isr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_isr_ram_C
</UL>

<P><STRONG><a name="[782]"></a>pmu_gpio_isr_ram</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, driver_pmu.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pmu_gpio_isr_ram &rArr; frspim_rd
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frspim_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_isr_ram_C
</UL>

<P><STRONG><a name="[783]"></a>onkey_isr_ram</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, driver_pmu.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = onkey_isr_ram &rArr; frspim_rd
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_enable_isr2 (via Veneer)
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_disable_isr2 (via Veneer)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frspim_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_isr_ram_C
</UL>

<P><STRONG><a name="[785]"></a>pmu_isr_ram_C</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, driver_pmu.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pmu_isr_ram_C &rArr; wdt_isr_ram &rArr; wdt_init &rArr; frspim_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onkey_isr_ram
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_gpio_isr_ram
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otd_isr_ram
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvd_isr_ram
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charge_isr_ram
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_isr_ram
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_isr_ram
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdec_isr_ram
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_get_isr_state (via Veneer)
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_isr_ram
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_delay_100us
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frspim_wr
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frspim_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_isr_ram
</UL>

<P><STRONG><a name="[789]"></a>qdec_isr_ram</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, driver_pmu_qdec.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = qdec_isr_ram &rArr; pmu_qdec_get_cnt &rArr; frspim_rd
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_qdec_get_cnt (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_isr_ram_C
</UL>

<P><STRONG><a name="[2b0]"></a>timer_run</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, driver_timer.o(ram_code))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Light_Init (via Veneer)
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_entry_after_ble_init (via Veneer)
</UL>

<P><STRONG><a name="[8b1]"></a>timer_stop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, driver_timer.o(ram_code), UNUSED)

<P><STRONG><a name="[777]"></a>timer_clear_interrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, driver_timer.o(ram_code))
<BR><BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_isr_ram
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_isr_ram
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set_load_value
</UL>

<P><STRONG><a name="[78a]"></a>timer_set_load_value</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, driver_timer.o(ram_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_clear_interrupt
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
</UL>

<P><STRONG><a name="[788]"></a>wdt_isr_ram</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, driver_wdt.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wdt_isr_ram &rArr; wdt_init &rArr; frspim_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frspim_wr
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frspim_rd
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_isr_ram_C
</UL>

<P><STRONG><a name="[787]"></a>rtc_isr_ram</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, driver_rtc.o(ram_code))
<BR><BR>[Called By]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_isr_ram_C
</UL>

<P><STRONG><a name="[25a]"></a>exti_isr_ram</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, driver_exti.o(ram_code))
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[78b]"></a>HardFault_Handler_C</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, core_cm3_isr.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HardFault_Handler_C &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_reset_patch
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_delay_100us
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler_Ram
</UL>

<P><STRONG><a name="[25c]"></a>adc_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, app_boot_vectors.o(ram_code))
<BR>[Address Reference Count : 1]<UL><LI> app_boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[25d]"></a>pdm_isr_ram</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, app_boot_vectors.o(ram_code))
<BR>[Address Reference Count : 1]<UL><LI> app_boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[258]"></a>ssp_isr_ram</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, app_boot_vectors.o(ram_code))
<BR>[Address Reference Count : 1]<UL><LI> app_boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[256]"></a>uart0_isr_ram</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, app_boot_vectors.o(ram_code))
<BR>[Address Reference Count : 1]<UL><LI> app_boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[257]"></a>uart1_isr_ram</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, app_boot_vectors.o(ram_code))
<BR>[Address Reference Count : 1]<UL><LI> app_boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[322]"></a>patch_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, patch.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = patch_init
</UL>
<BR>[Calls]<UL><LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPB_CompSet (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_power_restore_entry_imp
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main (via Veneer)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler (via Veneer)
</UL>

<P><STRONG><a name="[321]"></a>patch_set_entry</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, patch.o(ram_code))
<BR><BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main (via Veneer)
</UL>

<P><STRONG><a name="[42d]"></a>patch_reset_entry</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, patch.o(ram_code))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_power_restore_entry_imp
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler (via Veneer)
</UL>

<P><STRONG><a name="[14]"></a>svc_exception_handler_ram</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, patch.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svc_exception_handler_ram
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry.o(i.app_main)
</UL>
<P><STRONG><a name="[11]"></a>low_power_save_entry_imp</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, patch.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = low_power_save_entry_imp &rArr; frspim_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frspim_wr
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frspim_rd
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_calibration_stop (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry.o(i.app_main)
</UL>
<P><STRONG><a name="[12]"></a>low_power_restore_entry_imp</STRONG> (Thumb, 252 bytes, Stack size 8 bytes, patch.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = low_power_restore_entry_imp &rArr; frspim_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_cache
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_get_isr_state (via Veneer)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frspim_wr
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frspim_rd
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_calibration_start (via Veneer)
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_reset_entry
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry.o(i.app_main)
</UL>
<P><STRONG><a name="[2f9]"></a>flash_write</STRONG> (Thumb, 250 bytes, Stack size 48 bytes, patch.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = flash_write &rArr; flash_protect_enable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_ota_state
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_protect_enable
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_protect_disable
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_cache
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_cache
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save (via Veneer)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore (via Veneer)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_Write (via Veneer)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_otas_save_data
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_info_store_into_flash (via Veneer)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bond_write_info_to_flash (via Veneer)
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_table_set_static_keys (via Veneer)
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_write_peer_svc_to_flash (via Veneer)
</UL>

<P><STRONG><a name="[2f7]"></a>flash_erase</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, patch.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = flash_erase &rArr; flash_protect_enable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_ota_state
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_protect_enable
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_protect_disable
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_cache
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_cache
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save (via Veneer)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_StartOTA (via Veneer)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_info_clear (via Veneer)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_Write (via Veneer)
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_Erase (via Veneer)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_info_store_into_flash (via Veneer)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bond_write_info_to_flash (via Veneer)
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_table_set_static_keys (via Veneer)
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_table_get_static_keys (via Veneer)
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_write_peer_svc_to_flash (via Veneer)
</UL>

<P><STRONG><a name="[2f8]"></a>flash_read</STRONG> (Thumb, 298 bytes, Stack size 56 bytes, patch.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_cache
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_cache
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save (via Veneer)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_cal
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_Write (via Veneer)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_Read (via Veneer)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bond_write_info_to_flash (via Veneer)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bond_read_info_from_flash (via Veneer)
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_info_load (via Veneer)
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_write_peer_svc_to_flash (via Veneer)
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_load_peer_svc_from_flash (via Veneer)
</UL>

<P><STRONG><a name="[329]"></a>user_entry4</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, entry.o(ram_code))
<BR><BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main (via Veneer)
</UL>

<P><STRONG><a name="[272]"></a>frspim_rd</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, entry.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = frspim_rd
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save (via Veneer)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onkey_isr_ram
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_gpio_isr_ram
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_isr_ram
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_isr_ram_C
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_sub_init (via Veneer)
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_bg_trim (via Veneer)
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_isr_ram
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_sys_power_mode (via Veneer)
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_enable_irq (via Veneer)
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_entry_after_ble_init (via Veneer)
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_power_restore_entry_imp
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_power_save_entry_imp
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_init (via Veneer)
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_qdec_get_cnt (via Veneer)
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_lvd_protect_handle
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_system_power_off
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_lp_clock
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(.data)
</UL>
<P><STRONG><a name="[271]"></a>frspim_wr</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, entry.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = frspim_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save (via Veneer)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_isr_ram
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_isr_ram_C
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_clear_isr_state
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_sub_init (via Veneer)
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_bg_trim (via Veneer)
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set_sys_power_mode (via Veneer)
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_enable_irq (via Veneer)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep_patch
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_power_restore_entry_imp
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_power_save_entry_imp
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_init (via Veneer)
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_lvd_protect_handle
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_system_power_off
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init_pll
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_lp_clock
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(.data)
</UL>
<P><STRONG><a name="[793]"></a>check_lp_clock</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, entry.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = check_lp_clock &rArr; pmu_smooth_calc_calib_result
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_delay_10us
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frspim_wr
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frspim_rd
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_calibration_start (via Veneer)
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_clear (via Veneer)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_smooth_calc_calib_result
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep_patch
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[795]"></a>check_lp_clock_reset</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, entry.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = check_lp_clock_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_set (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep_patch
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[318]"></a>main_loop</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, entry.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = main_loop &rArr; check_lp_clock &rArr; pmu_smooth_calc_calib_result
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save (via Veneer)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore (via Veneer)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frspim_wr
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep (via Veneer)
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_schedule (via Veneer)
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_power_save (via Veneer)
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_power_restore (via Veneer)
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLOBAL_INT_START (via Veneer)
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_lp_clock_reset
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_lp_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main (via Veneer)
</UL>

<P><STRONG><a name="[776]"></a>disable_cache</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, entry.o(ram_code))
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_cal
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_handshake
</UL>

<P><STRONG><a name="[260]"></a>__asm___10_patch_rf_c_e73c1e89__rf_rssi_convert_patch</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, patch_rf.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __asm___10_patch_rf_c_e73c1e89__rf_rssi_convert_patch &rArr; upload_rssi_value &rArr; gapc_get_conidx_imp
</UL>
<BR>[Calls]<UL><LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_rssi_value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch_rf.o(ram_code)
</UL>
<P><STRONG><a name="[7a2]"></a>rf_init_modem</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, patch_rf.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rf_init_modem
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init_app
</UL>

<P><STRONG><a name="[79c]"></a>rf_init_pll</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, patch_rf.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rf_init_pll &rArr; frspim_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frspim_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init_app
</UL>

<P><STRONG><a name="[79b]"></a>upload_rssi_value</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, patch_rf.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = upload_rssi_value &rArr; gapc_get_conidx_imp
</UL>
<BR>[Calls]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_rssi_ind (via Veneer)
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_conidx_imp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___10_patch_rf_c_e73c1e89__rf_rssi_convert_patch
</UL>

<P><STRONG><a name="[10]"></a>rf_init_app</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, patch_rf.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rf_init_app &rArr; rf_init_pll &rArr; frspim_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_pclk (via Veneer)
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init_controller (via Veneer)
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init_api (via Veneer)
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_em_init (via Veneer)
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init_pll
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init_modem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry.o(i.app_main)
</UL>
<P><STRONG><a name="[7a3]"></a>sch_arb_event_start_isr_patch</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, patch_rf.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sch_arb_event_start_isr_patch &rArr; patch_handle_lld_con_env
</UL>
<BR>[Calls]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_time_get (via Veneer)
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sw_int_req (via Veneer)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_handle_lld_con_env
</UL>
<BR>[Called By]<UL><LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_isr_timestamp
</UL>

<P><STRONG><a name="[7a7]"></a>sch_arb_event_start_direct</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, patch_rf.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sch_arb_event_start_direct
</UL>
<BR>[Calls]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_time_get (via Veneer)
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_set (via Veneer)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_isr_patch
</UL>

<P><STRONG><a name="[7a8]"></a>rwble_isr_timestamp</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, patch_rf.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rwble_isr_timestamp &rArr; sch_arb_event_start_isr_patch &rArr; patch_handle_lld_con_env
</UL>
<BR>[Calls]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_arb_event_start_isr_patch
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_isr_patch
</UL>

<P><STRONG><a name="[7ad]"></a>rwble_isr_entry1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, patch_rf.o(ram_code))
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_isr_patch
</UL>

<P><STRONG><a name="[7a9]"></a>rwip_isr_patch</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, patch_rf.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rwip_isr_patch &rArr; sch_arb_event_start_direct
</UL>
<BR>[Calls]<UL><LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_arb_sw_isr (via Veneer)
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_clear (via Veneer)
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_set (via Veneer)
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_arb_event_start_direct
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_isr_patch
</UL>

<P><STRONG><a name="[7ab]"></a>check_end_event</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, patch_rf.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = check_end_event &rArr; scan_event_end &rArr; mesh_fatal_error_report
</UL>
<BR>[Calls]<UL><LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_event_end
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_isr_patch
</UL>

<P><STRONG><a name="[7b2]"></a>sch_prog_rx_isr_ram</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, patch_rf.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sch_prog_rx_isr_ram
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_isr_patch
</UL>

<P><STRONG><a name="[7b1]"></a>rwble_isr_rx_patch</STRONG> (Thumb, 198 bytes, Stack size 20 bytes, patch_rf.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rwble_isr_rx_patch
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_isr_patch
</UL>

<P><STRONG><a name="[7af]"></a>sch_prog_tx_isr_ram</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, patch_rf.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sch_prog_tx_isr_ram
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_isr_patch
</UL>

<P><STRONG><a name="[253]"></a>rwble_isr_patch</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, patch_rf.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rwble_isr_patch &rArr; check_end_event &rArr; scan_event_end &rArr; mesh_fatal_error_report
</UL>
<BR>[Calls]<UL><LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_entry_after_sleep_imp
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_prog_skip_isr (via Veneer)
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_prog_end_isr (via Veneer)
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_isr (via Veneer)
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_isr_entry1
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_lld_rx_isr
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_lld_evt_end_isr
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_prog_tx_isr_ram
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_isr_rx_patch
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_prog_rx_isr_ram
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_end_event
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_isr_patch
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_isr_timestamp
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_optimize_power_consumption_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[78d]"></a>con_sched_patch</STRONG> (Thumb, 142 bytes, Stack size 20 bytes, patch_rf.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = con_sched_patch
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[274]"></a>adv_tx_free_imp</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, patch_rf.o(ram_code))
<BR><BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(.data)
</UL>
<P><STRONG><a name="[273]"></a>vPortSuppressTicksAndSleep_patch</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, patch_rtos.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vPortSuppressTicksAndSleep_patch &rArr; check_lp_clock &rArr; pmu_smooth_calc_calib_result
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority (via Veneer)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save (via Veneer)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frspim_wr
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPB_CompSet (via Veneer)
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_time_get (via Veneer)
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep_time_calc (via Veneer)
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_sleep_enter (via Veneer)
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_power_save (via Veneer)
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_power_restore (via Veneer)
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskConfirmSleepModeStatus (via Veneer)
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_lp_clock_reset
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_lp_clock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(.data)
</UL>
<P><STRONG><a name="[7b9]"></a>__asm___11_sys_utils_c_415ab936__cpu_delay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_utils.o(ram_code))
<BR><BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_delay_10us
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_delay_100us
</UL>

<P><STRONG><a name="[77d]"></a>co_delay_100us</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sys_utils.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_get_pclk_config (via Veneer)
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_sys_utils_c_415ab936__cpu_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_protect_enable
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_protect_disable
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_isr_ram_C
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_clear_isr_state
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_handshake
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler_C
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_lvd_protect_handle
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_app_boot_host_comm
</UL>

<P><STRONG><a name="[326]"></a>co_delay_10us</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sys_utils.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = co_delay_10us
</UL>
<BR>[Calls]<UL><LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_get_pclk_config (via Veneer)
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_sys_utils_c_415ab936__cpu_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_OTP_erase
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_OTP_write
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_lp_clock
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main (via Veneer)
</UL>

<P><STRONG><a name="[7ba]"></a>_system_power_off</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sys_utils.o(ram_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frspim_wr
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frspim_rd
</UL>
<BR>[Called By]<UL></UL>

<P><STRONG><a name="[270]"></a>platform_reset_patch</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, sys_utils.o(ram_code))
<BR><BR>[Calls]<UL><LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPB_CompSet (via Veneer)
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLOBAL_INT_STOP (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reboot_timer_handler (via Veneer)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Process (via Veneer)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Google_Task (via Veneer)
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_apply_reset_cb (via Veneer)
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sig_mesh_prov_timer_handler (via Veneer)
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_callback_func (via Veneer)
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler_C
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_info_load (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(.data)
</UL>
<P><STRONG><a name="[7bc]"></a>system_lvd_protect_handle</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, sys_utils.o(ram_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_delay_100us
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frspim_wr
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frspim_rd
</UL>

<P><STRONG><a name="[31d]"></a>system_optimize_power_consumption_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_utils.o(ram_code))
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_isr_patch
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main (via Veneer)
</UL>

<P><STRONG><a name="[755]"></a>retry_handshake</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, sys_utils.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = retry_handshake &rArr; _app_boot_host_comm &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init (via Veneer)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_port_mux (via Veneer)
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_cache
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_cache
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_delay_100us
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_port_pull (via Veneer)
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_pclk (via Veneer)
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_app_boot_host_comm
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_custom_parameters (via Veneer)
</UL>

<P><STRONG><a name="[7c1]"></a>flash_OTP_write</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, flash.o(ram_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save (via Veneer)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore (via Veneer)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_delay_10us
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_stig_cmd (via Veneer)
</UL>

<P><STRONG><a name="[7c3]"></a>flash_OTP_read</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, flash.o(ram_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save (via Veneer)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore (via Veneer)
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_stig_cmd (via Veneer)
</UL>

<P><STRONG><a name="[7c4]"></a>flash_OTP_erase</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, flash.o(ram_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save (via Veneer)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore (via Veneer)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_delay_10us
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_stig_cmd (via Veneer)
</UL>

<P><STRONG><a name="[300]"></a>flash_page_erase</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, flash.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = flash_page_erase
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_cache
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_cache
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save (via Veneer)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore (via Veneer)
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_stig_cmd (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_StartOTA (via Veneer)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_Confirm (via Veneer)
</UL>

<P><STRONG><a name="[301]"></a>flash_protect_enable</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, flash.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = flash_protect_enable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_delay_100us
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_stig_cmd (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_StartOTA (via Veneer)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_Confirm (via Veneer)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_entry_before_ble_init (via Veneer)
</UL>

<P><STRONG><a name="[2ff]"></a>flash_protect_disable</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, flash.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = flash_protect_disable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_delay_100us
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_stig_cmd (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_StartOTA (via Veneer)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_Confirm (via Veneer)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</UL>

<P><STRONG><a name="[7c5]"></a>flash_read_id</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, flash.o(ram_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_stig_cmd (via Veneer)
</UL>

<P><STRONG><a name="[7c6]"></a>calib_lld_send</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, adv_check_mode.o(ram_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_read_clock (via Veneer)
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_util_buf_acl_tx_alloc (via Veneer)
</UL>

<P><STRONG><a name="[7c8]"></a>calib_lld_receive</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, adv_check_mode.o(ram_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_read_clock (via Veneer)
</UL>

<P><STRONG><a name="[7b0]"></a>calib_lld_rx_isr</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, adv_check_mode.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = calib_lld_rx_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_rxdesc_check (via Veneer)
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_meter_recv_msg (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_isr_patch
</UL>

<P><STRONG><a name="[7cb]"></a>calib_lld_cancel</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, adv_check_mode.o(ram_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save (via Veneer)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore (via Veneer)
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_activity_free_set (via Veneer)
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_rxdesc_check (via Veneer)
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_util_buf_acl_tx_free (via Veneer)
</UL>
<BR>[Called By]<UL></UL>

<P><STRONG><a name="[7b4]"></a>calib_lld_evt_end_isr</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, adv_check_mode.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = calib_lld_evt_end_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_activity_free_set (via Veneer)
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_util_buf_acl_tx_free (via Veneer)
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_meter_evt_end (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_isr_patch
</UL>

<P><STRONG><a name="[7ce]"></a>calib_lld_init</STRONG> (Thumb, 512 bytes, Stack size 32 bytes, adv_check_mode.o(ram_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_activity_free_get (via Veneer)
</UL>

<P><STRONG><a name="[8b2]"></a>calib_set_freq_config</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, adv_check_mode.o(ram_code), UNUSED)

<P><STRONG><a name="[7ac]"></a>scan_event_end</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, m_al_scan.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = scan_event_end &rArr; mesh_fatal_error_report
</UL>
<BR>[Calls]<UL><LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_fatal_error_report (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_end_event
</UL>

<P><STRONG><a name="[7a5]"></a>patch_handle_lld_con_env</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, patch_no_md_bit.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = patch_handle_lld_con_env
</UL>
<BR>[Called By]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_arb_event_start_isr_patch
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[2b9]"></a>APP_MEM_VALUE_PRINTF</STRONG> (Thumb, 30 bytes, Stack size 56 bytes, app_mem.o(i.APP_MEM_VALUE_PRINTF))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = APP_MEM_VALUE_PRINTF
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MEM_Fast_Save
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MEM_Factory_Reset
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MEM_Task
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MEM_Init
</UL>

<P><STRONG><a name="[2b7]"></a>MEM_Erase</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_mem.o(i.MEM_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MEM_Erase &rArr; flash_erase &rArr; flash_protect_enable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MEM_Factory_Reset
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_Write
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MEM_Init
</UL>

<P><STRONG><a name="[2bc]"></a>MEM_Read</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, app_mem.o(i.MEM_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MEM_Read &rArr; flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read (via Veneer)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MEM_Init
</UL>

<P><STRONG><a name="[2b8]"></a>MEM_Write</STRONG> (Thumb, 144 bytes, Stack size 104 bytes, app_mem.o(i.MEM_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MEM_Write &rArr; flash_write &rArr; flash_protect_enable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write (via Veneer)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read (via Veneer)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase (via Veneer)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MEM_Fast_Save
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MEM_Factory_Reset
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MEM_Task
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MEM_Init
</UL>

<P><STRONG><a name="[7]"></a>Save_Timer_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_mem.o(i.Save_Timer_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Save_Timer_Handler &rArr; YK_APP_Set_Evt &rArr; os_msg_post
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YK_APP_Set_Evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_mem.o(i.APP_MEM_Init)
</UL>
<P><STRONG><a name="[2cd]"></a>Reset_Process</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app_platfrom.o(i.Reset_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = Reset_Process &rArr; APP_MEM_Fast_Save &rArr; MEM_Write &rArr; flash_write &rArr; flash_protect_enable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_reset_patch (via Veneer)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_info_clear
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MEM_Fast_Save
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MEM_Factory_Reset
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Platfrom_Init
</UL>

<P><STRONG><a name="[8]"></a>Reset_Timer_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, app_platfrom.o(i.Reset_Timer_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = Reset_Timer_Handler &rArr; APP_MEM_Fast_Save &rArr; MEM_Write &rArr; flash_write &rArr; flash_protect_enable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MEM_Fast_Save
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_platfrom.o(i.APP_Platfrom_Init)
</UL>
<P><STRONG><a name="[99]"></a>Proc_AdjustBrightness</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app_google.o(i.Proc_AdjustBrightness))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = Proc_AdjustBrightness &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Light_SetLevel
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_google.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>Proc_AdjustRGB</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, app_google.o(i.Proc_AdjustRGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = Proc_AdjustRGB &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Light_SetRGB
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Light_GetLevel
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_google.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>Proc_AdjustTemperature</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, app_google.o(i.Proc_AdjustTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Proc_AdjustTemperature &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Light_SetTemperature
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Light_GetLevel
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_google.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>Proc_Blink</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, app_google.o(i.Proc_Blink))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = Proc_Blink &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Light_SetOnOff
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_google.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>Proc_OnOff</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, app_google.o(i.Proc_OnOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Proc_OnOff &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Light_SetOnOff
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Light_GetLevel
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_google.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>Proc_Provision</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, app_google.o(i.Proc_Provision))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = Proc_Provision &rArr; APP_Platfrom_Set_Provision_Status &rArr; APP_MEM_Fast_Save &rArr; MEM_Write &rArr; flash_write &rArr; flash_protect_enable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Platfrom_Set_Provision_Status
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MEM_Factory_Reset
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_google.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>Proc_UnProvision</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, app_google.o(i.Proc_UnProvision))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = Proc_UnProvision &rArr; APP_MEM_Factory_Reset &rArr; MEM_Write &rArr; flash_write &rArr; flash_protect_enable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MEM_Factory_Reset
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_google.o(.constdata)
</UL>
<P><STRONG><a name="[2a8]"></a>ProtocolProcess</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, app_google.o(i.ProtocolProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ProtocolProcess &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Platfrom_Get_Provision_Status
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Google_Task
</UL>

<P><STRONG><a name="[6]"></a>Reboot_Timer_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_google.o(i.Reboot_Timer_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Reboot_Timer_Handler &rArr; YK_APP_Set_Evt &rArr; os_msg_post
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YK_APP_Set_Evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_google.o(i.APP_Google_Init)
</UL>
<P><STRONG><a name="[2ae]"></a>HSL_2_RGB</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, app_light.o(i.HSL_2_RGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HSL_2_RGB &rArr; Hue_2_RGB &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hue_2_RGB
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Light_SetHSL
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Light_Init
</UL>

<P><STRONG><a name="[2ea]"></a>Hue_2_RGB</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, app_light.o(i.Hue_2_RGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Hue_2_RGB &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSL_2_RGB
</UL>

<P><STRONG><a name="[2d0]"></a>GATT_SendData</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, app_tc_ota.o(i.GATT_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = GATT_SendData &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_notification
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TC_OTA_Task
</UL>

<P><STRONG><a name="[2fb]"></a>OTA_Image_Update</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, app_tc_ota.o(i.OTA_Image_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = OTA_Image_Update &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_otas_save_data (via Veneer)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_ImageUpdate
</UL>

<P><STRONG><a name="[a1]"></a>Proc_Confirm</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, app_tc_ota.o(i.Proc_Confirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = Proc_Confirm &rArr; crc_cal &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_cal (via Veneer)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_protect_enable (via Veneer)
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_protect_disable (via Veneer)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase (via Veneer)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_read32p
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_ota_state (via Veneer)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_otas_save_data (via Veneer)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_tc_ota.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>Proc_GetFwInfo</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, app_tc_ota.o(i.Proc_GetFwInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Proc_GetFwInfo &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_tc_ota.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>Proc_ImageUpdate</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, app_tc_ota.o(i.Proc_ImageUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = Proc_ImageUpdate &rArr; OTA_Image_Update &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTA_Image_Update
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_tc_ota.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>Proc_Reset</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, app_tc_ota.o(i.Proc_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = Proc_Reset &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_init
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_tc_ota.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>Proc_StartOTA</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, app_tc_ota.o(i.Proc_StartOTA))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = Proc_StartOTA &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase (via Veneer)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_protect_enable (via Veneer)
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_protect_disable (via Veneer)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase (via Veneer)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_read32p
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_ota_state (via Veneer)
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_otas_get_storage_address
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_tc_ota.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>Proc_SyncFwVersion</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, app_tc_ota.o(i.Proc_SyncFwVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = Proc_SyncFwVersion &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_conn_param_update
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_read16p
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_tc_ota.o(.constdata)
</UL>
<P><STRONG><a name="[2cf]"></a>ProtocolProcess</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, app_tc_ota.o(i.ProtocolProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ProtocolProcess &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TC_OTA_Task
</UL>

<P><STRONG><a name="[a]"></a>Reboot_timer_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_tc_ota.o(i.Reboot_timer_handler))
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_reset_patch (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_tc_ota.o(i.Proc_Reset)
</UL>
<P><STRONG><a name="[2fe]"></a>crc_cal</STRONG> (Thumb, 294 bytes, Stack size 64 bytes, app_tc_ota.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = crc_cal &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_cache
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_cache
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc32CalByte
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save (via Veneer)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore (via Veneer)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_Confirm (via Veneer)
</UL>

<P><STRONG><a name="[a6]"></a>handle_get</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, generic_onoff_server.o(i.handle_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = handle_get &rArr; status_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Get_Target
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Get_Current
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> generic_onoff_server.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>handle_set</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, generic_onoff_server.o(i.handle_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = handle_set &rArr; status_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Light_SetOnOff
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Set_Target
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Get_Target
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Get_Current
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_transition_time_is_valid
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_transition_time_decode
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_tid_validate
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_delay_decode
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> generic_onoff_server.o(.constdata)
</UL>
<P><STRONG><a name="[49e]"></a>status_send</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, generic_onoff_server.o(i.status_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = status_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_transition_time_encode
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MESH_Status_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_get
</UL>

<P><STRONG><a name="[a8]"></a>handle_get</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, generic_dtt_server.o(i.handle_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = handle_get &rArr; status_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> generic_dtt_server.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>handle_set</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, generic_dtt_server.o(i.handle_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = handle_set &rArr; status_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Save
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_transition_time_is_valid
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_transition_time_decode
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> generic_dtt_server.o(.constdata)
</UL>
<P><STRONG><a name="[49f]"></a>status_send</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, generic_dtt_server.o(i.status_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = status_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_transition_time_encode
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MESH_Status_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_get
</UL>

<P><STRONG><a name="[aa]"></a>handle_get</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, generic_ponoff_setup_server.o(i.handle_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = handle_get &rArr; status_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> generic_ponoff_setup_server.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>handle_set</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, generic_ponoff_setup_server.o(i.handle_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = handle_set &rArr; status_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Save
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> generic_ponoff_setup_server.o(.constdata)
</UL>
<P><STRONG><a name="[4a0]"></a>status_send</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, generic_ponoff_setup_server.o(i.status_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = status_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MESH_Status_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_get
</UL>

<P><STRONG><a name="[ad]"></a>handle_delta_set</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, generic_level_server.o(i.handle_delta_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = handle_delta_set &rArr; status_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Light_SetLevel
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Set_Target
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Get_Target
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Get_Current
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_transition_time_is_valid
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_transition_time_decode
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_delay_decode
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> generic_level_server.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>handle_get</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, generic_level_server.o(i.handle_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = handle_get &rArr; status_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Get_Target
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Get_Current
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> generic_level_server.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>handle_move_set</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, generic_level_server.o(i.handle_move_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = handle_move_set &rArr; status_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Save
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_transition_time_is_valid
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_transition_time_decode
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_delay_decode
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> generic_level_server.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>handle_set</STRONG> (Thumb, 236 bytes, Stack size 48 bytes, generic_level_server.o(i.handle_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = handle_set &rArr; status_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Light_SetHSL
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Light_SetTemperature
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Light_SetLevel
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Set_Target
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_transition_time_is_valid
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_transition_time_decode
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_delay_decode
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> generic_level_server.o(.constdata)
</UL>
<P><STRONG><a name="[49c]"></a>status_send</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, generic_level_server.o(i.status_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = status_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_transition_time_encode
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MESH_Status_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_move_set
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_get
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_delta_set
</UL>

<P><STRONG><a name="[30]"></a>actual_set_response</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, light_lightness_setup_server.o(i.actual_set_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = actual_set_response &rArr; status_actual_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_actual_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light_lightness_setup_server.o(i.handle_actual_set)
</UL>
<P><STRONG><a name="[b0]"></a>handle_actual_set</STRONG> (Thumb, 120 bytes, Stack size 64 bytes, light_lightness_setup_server.o(i.handle_actual_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = handle_actual_set &rArr; handle_set &rArr; Light_Status_Set_Target &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set_message_validate
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_tid_validate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light_lightness_setup_server.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>handle_default_get</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, light_lightness_setup_server.o(i.handle_default_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = handle_default_get &rArr; status_default_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_default_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light_lightness_setup_server.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>handle_default_set</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, light_lightness_setup_server.o(i.handle_default_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = handle_default_set &rArr; status_default_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_default_send
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Save
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Constrain_Value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light_lightness_setup_server.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>handle_get</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, light_lightness_setup_server.o(i.handle_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = handle_get &rArr; status_actual_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_actual_send
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Get_Target
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Get_Current
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light_lightness_setup_server.o(.constdata)
</UL>
<P><STRONG><a name="[b3]"></a>handle_last_get</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, light_lightness_setup_server.o(i.handle_last_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = handle_last_get &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MESH_Status_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light_lightness_setup_server.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>handle_linear_get</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, light_lightness_setup_server.o(i.handle_linear_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = handle_linear_get &rArr; status_linear_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_linear_send
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_utils_actual_to_linear
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Get_Target
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Get_Current
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light_lightness_setup_server.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>handle_linear_set</STRONG> (Thumb, 152 bytes, Stack size 64 bytes, light_lightness_setup_server.o(i.handle_linear_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = handle_linear_set &rArr; handle_set &rArr; Light_Status_Set_Target &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set_message_validate
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_tid_validate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light_lightness_setup_server.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>handle_range_get</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, light_lightness_setup_server.o(i.handle_range_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = handle_range_get &rArr; status_range_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_range_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light_lightness_setup_server.o(.constdata)
</UL>
<P><STRONG><a name="[b7]"></a>handle_range_set</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, light_lightness_setup_server.o(i.handle_range_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = handle_range_set &rArr; status_range_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_range_send
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Save
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light_lightness_setup_server.o(.constdata)
</UL>
<P><STRONG><a name="[494]"></a>handle_set</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, light_lightness_setup_server.o(i.handle_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = handle_set &rArr; Light_Status_Set_Target &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Light_SetLevel
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Set_Target
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Get_Target
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Get_Current
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_linear_set
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_actual_set
</UL>

<P><STRONG><a name="[493]"></a>handle_set_message_validate</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, light_lightness_setup_server.o(i.handle_set_message_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = handle_set_message_validate &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_transition_time_is_valid
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_transition_time_decode
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_delay_decode
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_linear_set
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_actual_set
</UL>

<P><STRONG><a name="[4a5]"></a>light_lightness_utils_actual_to_linear</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, light_lightness_setup_server.o(i.light_lightness_utils_actual_to_linear))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linear_set_response
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_linear_get
</UL>

<P><STRONG><a name="[31]"></a>linear_set_response</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, light_lightness_setup_server.o(i.linear_set_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = linear_set_response &rArr; status_linear_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_linear_send
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_lightness_utils_actual_to_linear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light_lightness_setup_server.o(i.handle_linear_set)
</UL>
<P><STRONG><a name="[30e]"></a>status_actual_send</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, light_lightness_setup_server.o(i.status_actual_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = status_actual_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_transition_time_encode
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MESH_Status_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_get
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actual_set_response
</UL>

<P><STRONG><a name="[496]"></a>status_default_send</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, light_lightness_setup_server.o(i.status_default_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = status_default_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MESH_Status_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_default_set
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_default_get
</UL>

<P><STRONG><a name="[4a6]"></a>status_linear_send</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, light_lightness_setup_server.o(i.status_linear_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = status_linear_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_transition_time_encode
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MESH_Status_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linear_set_response
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_linear_get
</UL>

<P><STRONG><a name="[4a7]"></a>status_range_send</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, light_lightness_setup_server.o(i.status_range_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = status_range_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MESH_Status_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_range_set
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_range_get
</UL>

<P><STRONG><a name="[bb]"></a>handle_default_get</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, light_ctl_setup_server.o(i.handle_default_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = handle_default_get &rArr; status_default_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_default_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light_ctl_setup_server.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>handle_default_set</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, light_ctl_setup_server.o(i.handle_default_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = handle_default_set &rArr; status_default_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Save
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_default_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light_ctl_setup_server.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>handle_get</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, light_ctl_setup_server.o(i.handle_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = handle_get &rArr; status_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Get_Target
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Get_Current
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light_ctl_setup_server.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>handle_set</STRONG> (Thumb, 236 bytes, Stack size 80 bytes, light_ctl_setup_server.o(i.handle_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = handle_set &rArr; status_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Light_SetTemperature
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Light_SetLevel
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Set_Target
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Get_Target
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Get_Current
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_tid_validate
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set_message_validate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light_ctl_setup_server.o(.constdata)
</UL>
<P><STRONG><a name="[4a9]"></a>handle_set_message_validate</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, light_ctl_setup_server.o(i.handle_set_message_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = handle_set_message_validate &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_transition_time_is_valid
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_transition_time_decode
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_delay_decode
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_temperature_set
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
</UL>

<P><STRONG><a name="[be]"></a>handle_temperature_get</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, light_ctl_setup_server.o(i.handle_temperature_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = handle_temperature_get &rArr; status_temperature_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Get_Target
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Get_Current
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_temperature_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light_ctl_setup_server.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>handle_temperature_range_get</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, light_ctl_setup_server.o(i.handle_temperature_range_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = handle_temperature_range_get &rArr; status_temperature_range_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_temperature_range_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light_ctl_setup_server.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>handle_temperature_range_set</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, light_ctl_setup_server.o(i.handle_temperature_range_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = handle_temperature_range_set &rArr; status_temperature_range_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Save
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_temperature_range_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light_ctl_setup_server.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>handle_temperature_set</STRONG> (Thumb, 208 bytes, Stack size 64 bytes, light_ctl_setup_server.o(i.handle_temperature_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = handle_temperature_set &rArr; status_temperature_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Light_SetTemperature
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Set_Target
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Get_Target
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Get_Current
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_tid_validate
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_temperature_send
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set_message_validate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light_ctl_setup_server.o(.constdata)
</UL>
<P><STRONG><a name="[497]"></a>status_default_send</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, light_ctl_setup_server.o(i.status_default_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = status_default_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MESH_Status_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_default_set
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_default_get
</UL>

<P><STRONG><a name="[4a1]"></a>status_send</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, light_ctl_setup_server.o(i.status_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = status_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_transition_time_encode
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MESH_Status_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_get
</UL>

<P><STRONG><a name="[4ac]"></a>status_temperature_range_send</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, light_ctl_setup_server.o(i.status_temperature_range_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = status_temperature_range_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MESH_Status_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_temperature_range_set
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_temperature_range_get
</UL>

<P><STRONG><a name="[4ab]"></a>status_temperature_send</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, light_ctl_setup_server.o(i.status_temperature_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = status_temperature_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_transition_time_encode
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MESH_Status_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_temperature_set
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_temperature_get
</UL>

<P><STRONG><a name="[c0]"></a>handle_get</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, light_hsl_hue_server.o(i.handle_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = handle_get &rArr; status_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Get_Target
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Get_Current
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light_hsl_hue_server.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>handle_set</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, light_hsl_hue_server.o(i.handle_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = handle_set &rArr; status_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Light_SetHSL
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Set_Target
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Get_Target
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Get_Current
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_transition_time_is_valid
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_transition_time_decode
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_tid_validate
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_delay_decode
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light_hsl_hue_server.o(.constdata)
</UL>
<P><STRONG><a name="[4a2]"></a>status_send</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, light_hsl_hue_server.o(i.status_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = status_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_transition_time_encode
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MESH_Status_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_get
</UL>

<P><STRONG><a name="[c2]"></a>handle_get</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, light_hsl_saturation_server.o(i.handle_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = handle_get &rArr; status_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Get_Target
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Get_Current
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light_hsl_saturation_server.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>handle_set</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, light_hsl_saturation_server.o(i.handle_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = handle_set &rArr; status_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Light_SetHSL
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Set_Target
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Get_Target
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Get_Current
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_transition_time_is_valid
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_transition_time_decode
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_tid_validate
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_delay_decode
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light_hsl_saturation_server.o(.constdata)
</UL>
<P><STRONG><a name="[4a3]"></a>status_send</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, light_hsl_saturation_server.o(i.status_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = status_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_transition_time_encode
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MESH_Status_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_get
</UL>

<P><STRONG><a name="[c7]"></a>handle_default_get</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, light_hsl_setup_server.o(i.handle_default_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = handle_default_get &rArr; status_default_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_default_send
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light_hsl_setup_server.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>handle_default_set</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, light_hsl_setup_server.o(i.handle_default_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = handle_default_set &rArr; status_default_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Save
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_default_send
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light_hsl_setup_server.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>handle_get</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, light_hsl_setup_server.o(i.handle_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = handle_get &rArr; status_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Get_Target
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Get_Current
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light_hsl_setup_server.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>handle_range_get</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, light_hsl_setup_server.o(i.handle_range_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = handle_range_get &rArr; status_range_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_range_send
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light_hsl_setup_server.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>handle_range_set</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, light_hsl_setup_server.o(i.handle_range_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = handle_range_set &rArr; status_range_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Save
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_range_send
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light_hsl_setup_server.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>handle_set</STRONG> (Thumb, 254 bytes, Stack size 72 bytes, light_hsl_setup_server.o(i.handle_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = handle_set &rArr; status_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Light_SetHSL
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Light_SetLevel
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Set_Target
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Get_Target
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Get_Current
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_tid_validate
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set_message_validate
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light_hsl_setup_server.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>handle_target_get</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, light_hsl_setup_server.o(i.handle_target_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = handle_target_get &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Get_Target
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MESH_Status_Send
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light_hsl_setup_server.o(.constdata)
</UL>
<P><STRONG><a name="[498]"></a>status_default_send</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, light_hsl_setup_server.o(i.status_default_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = status_default_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MESH_Status_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_default_set
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_default_get
</UL>

<P><STRONG><a name="[4a8]"></a>status_range_send</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, light_hsl_setup_server.o(i.status_range_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = status_range_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MESH_Status_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_range_set
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_range_get
</UL>

<P><STRONG><a name="[4a4]"></a>status_send</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, light_hsl_setup_server.o(i.status_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = status_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MESH_Status_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_set
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_get
</UL>

<P><STRONG><a name="[2f3]"></a>Temp_to_Level</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, light_status.o(i.Temp_to_Level))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Temp_to_Level &rArr; __aeabi_f2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Get_Target
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Status_Get_Current
</UL>

<P><STRONG><a name="[3af]"></a>blob_transfer_all_condiation_is_met</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, blob_procedure_server.o(i.blob_transfer_all_condiation_is_met))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = blob_transfer_all_condiation_is_met &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blob_transfer_start
</UL>

<P><STRONG><a name="[3ad]"></a>blob_transfer_server_phase_transitions</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, blob_procedure_server.o(i.blob_transfer_server_phase_transitions))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = blob_transfer_server_phase_transitions &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset (via Veneer)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blob_transfer_start
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blob_chunk_transfer
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blob_block_start
</UL>

<P><STRONG><a name="[3ae]"></a>chunck_error_condition_check</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, blob_procedure_server.o(i.chunck_error_condition_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = chunck_error_condition_check &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blob_chunk_transfer
</UL>

<P><STRONG><a name="[3ac]"></a>last_missing_chunk_check</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, blob_procedure_server.o(i.last_missing_chunk_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = last_missing_chunk_check
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blob_chunk_transfer
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blob_block_get
</UL>

<P><STRONG><a name="[ce]"></a>handle_blob_block_get</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, blob_transfer_server.o(i.handle_blob_block_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = handle_blob_block_get &rArr; status_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blob_transfer_server.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>handle_blob_block_start</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, blob_transfer_server.o(i.handle_blob_block_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = handle_blob_block_start &rArr; status_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blob_transfer_server.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>handle_blob_info_get</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, blob_transfer_server.o(i.handle_blob_info_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = handle_blob_info_get &rArr; status_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blob_transfer_server.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>handle_blob_transfer_get</STRONG> (Thumb, 66 bytes, Stack size 64 bytes, blob_transfer_server.o(i.handle_blob_transfer_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = handle_blob_transfer_get &rArr; status_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blob_transfer_server.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>handle_blob_transfer_start</STRONG> (Thumb, 120 bytes, Stack size 88 bytes, blob_transfer_server.o(i.handle_blob_transfer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = handle_blob_transfer_start &rArr; status_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blob_transfer_server.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>handle_chunk_transfer</STRONG> (Thumb, 84 bytes, Stack size 144 bytes, blob_transfer_server.o(i.handle_chunk_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = handle_chunk_transfer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blob_transfer_server.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>handle_transfer_cancel</STRONG> (Thumb, 64 bytes, Stack size 72 bytes, blob_transfer_server.o(i.handle_transfer_cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = handle_transfer_cancel &rArr; status_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blob_transfer_server.o(.constdata)
</UL>
<P><STRONG><a name="[495]"></a>status_send</STRONG> (Thumb, 398 bytes, Stack size 64 bytes, blob_transfer_server.o(i.status_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = status_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MESH_Status_Send
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset (via Veneer)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_transfer_cancel
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_blob_transfer_start
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_blob_transfer_get
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_blob_info_get
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_blob_block_start
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_blob_block_get
</UL>

<P><STRONG><a name="[1e]"></a>ota_apply_reset_cb</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, firmware_update_procedure_server.o(i.ota_apply_reset_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ota_apply_reset_cb &rArr; APP_MEM_Fast_Save &rArr; MEM_Write &rArr; flash_write &rArr; flash_protect_enable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Light_GetOnoff
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_reset_patch (via Veneer)
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MEM_Fast_Save
</UL>
<BR>[Address Reference Count : 1]<UL><LI> firmware_update_procedure_server.o(i.firmware_update_init)
</UL>
<P><STRONG><a name="[de]"></a>handle_fw_update_apply</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, firmware_update_server.o(i.handle_fw_update_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = handle_fw_update_apply &rArr; status_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> firmware_update_server.o(.constdata)
</UL>
<P><STRONG><a name="[dd]"></a>handle_fw_update_cancel</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, firmware_update_server.o(i.handle_fw_update_cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = handle_fw_update_cancel &rArr; status_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> firmware_update_server.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>handle_fw_update_get</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, firmware_update_server.o(i.handle_fw_update_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = handle_fw_update_get &rArr; status_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> firmware_update_server.o(.constdata)
</UL>
<P><STRONG><a name="[d9]"></a>handle_fw_update_info_get</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, firmware_update_server.o(i.handle_fw_update_info_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = handle_fw_update_info_get &rArr; status_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> firmware_update_server.o(.constdata)
</UL>
<P><STRONG><a name="[da]"></a>handle_fw_update_meta_check</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, firmware_update_server.o(i.handle_fw_update_meta_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = handle_fw_update_meta_check &rArr; status_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> firmware_update_server.o(.constdata)
</UL>
<P><STRONG><a name="[dc]"></a>handle_fw_update_start</STRONG> (Thumb, 134 bytes, Stack size 88 bytes, firmware_update_server.o(i.handle_fw_update_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = handle_fw_update_start &rArr; status_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_send
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> firmware_update_server.o(.constdata)
</UL>
<P><STRONG><a name="[49d]"></a>status_send</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, firmware_update_server.o(i.status_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = status_send &rArr; APP_MESH_Status_Send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MESH_Status_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_fw_update_start
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_fw_update_meta_check
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_fw_update_info_get
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_fw_update_get
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_fw_update_cancel
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_fw_update_apply
</UL>

<P><STRONG><a name="[9]"></a>Google_gatt_msg_handler</STRONG> (Thumb, 596 bytes, Stack size 32 bytes, google_service.o(i.Google_gatt_msg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Google_gatt_msg_handler &rArr; YK_APP_Set_Evt &rArr; os_msg_post
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Platfrom_Get_Provision_Status
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YK_APP_Set_Evt
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> google_service.o(i.Google_Gatt_Add_Service)
</UL>
<P><STRONG><a name="[b]"></a>TC_OTA_gatt_msg_handler</STRONG> (Thumb, 298 bytes, Stack size 40 bytes, tc_ota_service.o(i.TC_OTA_gatt_msg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TC_OTA_gatt_msg_handler &rArr; YK_APP_Set_Evt &rArr; os_msg_post
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YK_APP_Set_Evt
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tc_ota_service.o(i.TC_OTA_gatt_add_service)
</UL>
<P><STRONG><a name="[95]"></a>pb_remote_central_msg_handler</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, pb_remote_central.o(i.pb_remote_central_msg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pb_remote_central_msg_handler &rArr; m_pbrs_prov_bearer_gatt_rx &rArr; m_fnd_pbrs_pdu_rx &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_pbrs_prov_bearer_gatt_sent
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_pbrs_prov_bearer_gatt_rx
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_pbrs_prov_bearer_gatt_opened
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_client_enable_ntf
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_disconnect_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pb_remote_central.o(i.pb_remote_central_init)
</UL>
<P><STRONG><a name="[96]"></a>pb_remote_connect_timeout</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pb_remote_central.o(i.pb_remote_connect_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = pb_remote_connect_timeout &rArr; m_pbrs_prov_bearer_gatt_opened &rArr; m_fnd_pbrs_link_open_failed &rArr; m_fnd_pbrs_link_state_report &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_pbrs_prov_bearer_gatt_opened
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_stop_conn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pb_remote_central.o(i.pb_remote_central_init)
</UL>
<P><STRONG><a name="[e6]"></a>pb_remote_gatt_close</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pb_remote_central.o(i.pb_remote_gatt_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pb_remote_gatt_close &rArr; gap_disconnect_req
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_disconnect_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pb_remote_central.o(.constdata)
</UL>
<P><STRONG><a name="[e5]"></a>pb_remote_gatt_create</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, pb_remote_central.o(i.pb_remote_gatt_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = pb_remote_gatt_create &rArr; gap_start_conn &rArr; appm_start_conn &rArr; appm_execute_activity_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_start_conn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pb_remote_central.o(.constdata)
</UL>
<P><STRONG><a name="[e7]"></a>pb_remote_gatt_send</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, pb_remote_central.o(i.pb_remote_gatt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pb_remote_gatt_send &rArr; gatt_client_write_cmd &rArr; gatt_client_write_cmd_with_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_client_write_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pb_remote_central.o(.constdata)
</UL>
<P><STRONG><a name="[17]"></a>app_mesh_store_info_timer_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sig_mesh_info.o(i.app_mesh_store_info_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = app_mesh_store_info_timer_handler &rArr; mesh_info_store_into_flash &rArr; flash_write &rArr; flash_protect_enable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_info_store_into_flash
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sig_mesh_info.o(i.app_mesh_store_info_timer_init)
</UL>
<P><STRONG><a name="[15]"></a>mesh_callback_func</STRONG> (Thumb, 590 bytes, Stack size 64 bytes, sig_mesh_led.o(i.mesh_callback_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 668 + Unknown Stack Size
<LI>Call Chain = mesh_callback_func &rArr; sha256_gen_auth_value &rArr; sha256_update &rArr; sha256_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_reset_patch (via Veneer)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_info_clear
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MEM_Factory_Reset
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MESH_Provision_Complete
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_gen_auth_value
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_start
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_send_prov_param_rsp
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_send_prov_auth_data_rsp
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_proxy_ctrl
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_store_info_timer_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sig_mesh_led.o(i.app_mesh_led_init)
</UL>
<P><STRONG><a name="[16]"></a>sig_mesh_prov_timer_handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sig_mesh_led.o(i.sig_mesh_prov_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sig_mesh_prov_timer_handler &rArr; mesh_info_clear &rArr; flash_erase &rArr; flash_protect_enable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_reset_patch (via Veneer)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_info_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sig_mesh_led.o(i.app_mesh_led_init)
</UL>
<P><STRONG><a name="[24b]"></a>HardFault_Handler_Ram</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_boot_vectors.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HardFault_Handler_Ram &rArr; HardFault_Handler_C &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler_C
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[25b]"></a>pmu_isr_ram</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_boot_vectors.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pmu_isr_ram &rArr; pmu_isr_ram_C &rArr; wdt_isr_ram &rArr; wdt_init &rArr; frspim_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_isr_ram_C
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[24f]"></a>SVC_Handler</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, app_boot_vectors.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SVC_Handler &rArr; con_sched_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSVCHandler (via Veneer)
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;con_sched_patch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[470]"></a>gatt_check_peer_svc</STRONG> (Thumb, 308 bytes, Stack size 48 bytes, gatt_api.o(i.gatt_check_peer_svc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gatt_check_peer_svc
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_discovery_all_peer_svc
</UL>

<P><STRONG><a name="[46f]"></a>gatt_clr_peer_svc</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, gatt_api.o(i.gatt_clr_peer_svc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gatt_clr_peer_svc
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_add_client_uuid
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_msg_default_handler_imp
</UL>

<P><STRONG><a name="[2f]"></a>gatt_msg_default_handler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gatt_api.o(i.gatt_msg_default_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = gatt_msg_default_handler &rArr; gatt_msg_default_handler_imp &rArr; gatt_store_peer_prf_info &rArr; prf_extract_svc_info_uuid_128 &rArr; attm_uuid_comp &rArr; attm_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_msg_default_handler_imp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_api.o(i.gatt_service_init)
</UL>
<P><STRONG><a name="[477]"></a>gatt_msg_default_handler_imp</STRONG> (Thumb, 1446 bytes, Stack size 344 bytes, gatt_api.o(i.gatt_msg_default_handler_imp))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = gatt_msg_default_handler_imp &rArr; gatt_store_peer_prf_info &rArr; prf_extract_svc_info_uuid_128 &rArr; attm_uuid_comp &rArr; attm_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msg_post
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_write_peer_svc_to_flash
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_active_service_id
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_store_peer_prf_info
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_regist_peer_prf_info
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_clr_peer_svc
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_msg_default_handler
</UL>

<P><STRONG><a name="[46d]"></a>gatt_regist_peer_prf_info</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, gatt_api.o(i.gatt_regist_peer_prf_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gatt_regist_peer_prf_info
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_discovery_all_peer_svc
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_add_client_uuid
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_msg_default_handler_imp
</UL>

<P><STRONG><a name="[2e]"></a>gatt_servcie_added</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, gatt_api.o(i.gatt_servcie_added))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gatt_servcie_added
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_api.o(i.gatt_profile_task_add)
</UL>
<P><STRONG><a name="[279]"></a>gatt_service_connection_cleanup</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, gatt_api.o(i.gatt_service_connection_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gatt_service_connection_cleanup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_api.o(.data)
</UL>
<P><STRONG><a name="[278]"></a>gatt_service_connection_created</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, gatt_api.o(i.gatt_service_connection_created))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gatt_service_connection_created
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_api.o(.data)
</UL>
<P><STRONG><a name="[277]"></a>gatt_service_destroy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gatt_api.o(i.gatt_service_destroy))
<BR>[Address Reference Count : 1]<UL><LI> gatt_api.o(.data)
</UL>
<P><STRONG><a name="[276]"></a>gatt_service_init</STRONG> (Thumb, 794 bytes, Stack size 72 bytes, gatt_api.o(i.gatt_service_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = gatt_service_init &rArr; attm_svc_create_db_ext &rArr; attmdb_add_service &rArr; attmdb_svc_init &rArr; attm_uuid16_comp &rArr; attm_uuid_comp &rArr; attm_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;from_task_func_to_msg_handle
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_svc_create_db_ext
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_svc_create_db
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_att_set_value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_api.o(.data)
</UL>
<P><STRONG><a name="[479]"></a>gatt_store_peer_prf_info</STRONG> (Thumb, 284 bytes, Stack size 48 bytes, gatt_api.o(i.gatt_store_peer_prf_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = gatt_store_peer_prf_info &rArr; prf_extract_svc_info_uuid_128 &rArr; attm_uuid_comp &rArr; attm_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_extract_svc_info_uuid_128
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_msg_default_handler_imp
</UL>

<P><STRONG><a name="[478]"></a>get_active_service_id</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gatt_api.o(i.get_active_service_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_active_service_id
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_msg_default_handler_imp
</UL>

<P><STRONG><a name="[e9]"></a>mesh_api_cmp_handler</STRONG> (Thumb, 390 bytes, Stack size 64 bytes, mesh_api.o(i.mesh_api_cmp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mesh_api_cmp_handler &rArr; mesh_info_load &rArr; mesh_info_clear &rArr; flash_erase &rArr; flash_protect_enable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_get_task_from_id
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_info_load
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_info_find_unicast_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mesh_api.o(.constdata)
</UL>
<P><STRONG><a name="[ef]"></a>mesh_api_model_msg_ind_handler</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, mesh_api.o(i.mesh_api_model_msg_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mesh_api_model_msg_ind_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mesh_api.o(.constdata)
</UL>
<P><STRONG><a name="[ee]"></a>mesh_api_model_opcode_req_ind_handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mesh_api.o(i.mesh_api_model_opcode_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mesh_api_model_opcode_req_ind_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mesh_api.o(.constdata)
</UL>
<P><STRONG><a name="[f0]"></a>mesh_api_node_reset_ind_handler</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, mesh_api.o(i.mesh_api_node_reset_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mesh_api_node_reset_ind_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mesh_api.o(.constdata)
</UL>
<P><STRONG><a name="[eb]"></a>mesh_api_prov_auth_data_req_handler</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, mesh_api.o(i.mesh_api_prov_auth_data_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mesh_api_prov_auth_data_req_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mesh_api.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>mesh_api_prov_param_req_handler</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, mesh_api.o(i.mesh_api_prov_param_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mesh_api_prov_param_req_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mesh_api.o(.constdata)
</UL>
<P><STRONG><a name="[ec]"></a>mesh_api_prov_state_ind_handler</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, mesh_api.o(i.mesh_api_prov_state_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mesh_api_prov_state_ind_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mesh_api.o(.constdata)
</UL>
<P><STRONG><a name="[ed]"></a>mesh_api_update_ind_handler</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, mesh_api.o(i.mesh_api_update_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mesh_api_update_ind_handler &rArr; mesh_info_store &rArr; app_mesh_info_update_subs
</UL>
<BR>[Calls]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_info_store
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mesh_api.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>mesh_msg_dflt_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mesh_api.o(i.mesh_msg_dflt_handler))
<BR>[Address Reference Count : 1]<UL><LI> mesh_api.o(.constdata)
</UL>
<P><STRONG><a name="[32a]"></a>app_mesh_info_update_app_key</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, app_mesh_info.o(i.app_mesh_info_update_app_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_mesh_info_update_app_key
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_info_store
</UL>

<P><STRONG><a name="[32b]"></a>app_mesh_info_update_bind</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, app_mesh_info.o(i.app_mesh_info_update_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_mesh_info_update_bind
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_info_store
</UL>

<P><STRONG><a name="[32c]"></a>app_mesh_info_update_net_key</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, app_mesh_info.o(i.app_mesh_info_update_net_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_mesh_info_update_net_key
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_info_store
</UL>

<P><STRONG><a name="[32d]"></a>app_mesh_info_update_publish</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, app_mesh_info.o(i.app_mesh_info_update_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_mesh_info_update_publish
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_info_store
</UL>

<P><STRONG><a name="[32e]"></a>app_mesh_info_update_state</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, app_mesh_info.o(i.app_mesh_info_update_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_mesh_info_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_info_store
</UL>

<P><STRONG><a name="[32f]"></a>app_mesh_info_update_subs</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, app_mesh_info.o(i.app_mesh_info_update_subs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_mesh_info_update_subs
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_info_store
</UL>

<P><STRONG><a name="[327]"></a>pmu_smooth_calc_calib_result</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, entry.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pmu_smooth_calc_calib_result
</UL>
<BR>[Calls]<UL><LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep_mul_64 (via Veneer)
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep_div_64 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_lp_clock
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main (via Veneer)
</UL>

<P><STRONG><a name="[4ba]"></a>em_ble_generate_base_address_table</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, jump_table.o(i.em_ble_generate_base_address_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = em_ble_generate_base_address_table
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_static_memory
</UL>

<P><STRONG><a name="[2]"></a>jump_table_param_get</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, jump_table.o(i.jump_table_param_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = jump_table_param_get &rArr; jump_table_get_static_keys &rArr; flash_erase &rArr; flash_protect_enable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_table_get_static_keys
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_4)
</UL>
<P><STRONG><a name="[3]"></a>jump_table_param_set</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, jump_table.o(i.jump_table_param_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = jump_table_param_set &rArr; jump_table_set_static_keys &rArr; flash_write &rArr; flash_protect_enable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_table_set_static_keys
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_4)
</UL>
<P><STRONG><a name="[25f]"></a>rf_force_agc_enable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, patch_rf.o(i.rf_force_agc_enable))
<BR>[Address Reference Count : 1]<UL><LI> patch_rf.o(ram_code)
</UL>
<P><STRONG><a name="[754]"></a>trng_flow_w_specific_smp_cnt</STRONG> (Thumb, 166 bytes, Stack size 12 bytes, sys_utils.o(i.trng_flow_w_specific_smp_cnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = trng_flow_w_specific_smp_cnt
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trng_init_
</UL>

<P><STRONG><a name="[7bd]"></a>_app_boot_host_comm</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, sys_utils.o(ram_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _app_boot_host_comm &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_delay_100us
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write (via Veneer)
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_data_nodelay_noint (via Veneer)
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_boot_host_comm_loop (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_handshake
</UL>

<P><STRONG><a name="[1f]"></a>os_default_task_func</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, os_task.o(i.os_default_task_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_default_task_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_task.o(i.from_task_func_to_msg_handle)
</UL>
<P><STRONG><a name="[709]"></a>free_time_evt_id</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, os_timer.o(i.free_time_evt_id))
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
</UL>

<P><STRONG><a name="[708]"></a>get_valid_tim_evt_id</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, os_timer.o(i.get_valid_tim_evt_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_valid_tim_evt_id
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
</UL>

<P><STRONG><a name="[1b]"></a>ble_bond_addr_resolve_cb</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, user_bond_manage.o(i.ble_bond_addr_resolve_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_bond_addr_resolve_cb &rArr; app_connection_success_ind_func
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_connection_send_cfm
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_connection_success_ind_func
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_connection_req_ind_func
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sec_init
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_set_evt_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> user_bond_manage.o(i.ble_bond_check)
</UL>
<P><STRONG><a name="[f4]"></a>app_sec_msg_dflt_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_sec.o(i.app_sec_msg_dflt_handler))
<BR>[Address Reference Count : 1]<UL><LI> app_sec.o(.constdata)
</UL>
<P><STRONG><a name="[3d1]"></a>gap_paring_req_cb</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, app_sec.o(i.gap_paring_req_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gap_paring_req_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_req_ind_handler
</UL>

<P><STRONG><a name="[f7]"></a>gapc_bond_ind_handler</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, app_sec.o(i.gapc_bond_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gapc_bond_ind_handler &rArr; app_connection_slave_encrypted_ind_func
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_disconnect_req
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_bdaddr
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_connection_slave_encrypted_ind_func
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_connection_paring_info_ind_func
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_connection_master_encrypted_ind_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_sec.o(.constdata)
</UL>
<P><STRONG><a name="[f6]"></a>gapc_bond_req_ind_handler</STRONG> (Thumb, 352 bytes, Stack size 48 bytes, app_sec.o(i.gapc_bond_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gapc_bond_req_ind_handler &rArr; app_connection_paring_info_ind_func
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_connection_paring_info_ind_func
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_paring_req_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_sec.o(.constdata)
</UL>
<P><STRONG><a name="[f9]"></a>gapc_encrypt_ind_handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_sec.o(i.gapc_encrypt_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gapc_encrypt_ind_handler &rArr; app_connection_slave_encrypted_ind_func
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_connection_slave_encrypted_ind_func
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_connection_master_encrypted_ind_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_sec.o(.constdata)
</UL>
<P><STRONG><a name="[f8]"></a>gapc_encrypt_req_ind_handler</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, app_sec.o(i.gapc_encrypt_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gapc_encrypt_req_ind_handler &rArr; ble_sec_check_ediv_rand
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sec_check_ediv_rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_sec.o(.constdata)
</UL>
<P><STRONG><a name="[f5]"></a>gapc_security_ind_handler</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, app_sec.o(i.gapc_security_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gapc_security_ind_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_sec.o(.constdata)
</UL>
<P><STRONG><a name="[3d3]"></a>gapc_cleanup</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, gapc.o(i.gapc_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gapc_cleanup &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear (via Veneer)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_operation_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_init
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_con_cleanup
</UL>

<P><STRONG><a name="[3d4]"></a>gapc_operation_cleanup</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, gapc.o(i.gapc_operation_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_in_queue (via Veneer)
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free (via Veneer)
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_clear_timeout_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_cleanup
</UL>

<P><STRONG><a name="[442]"></a>gapm_operation_cleanup</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gapm.o(i.gapm_operation_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_in_queue (via Veneer)
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free (via Veneer)
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_update_state
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init
</UL>

<P><STRONG><a name="[480]"></a>gattc_operation_cleanup</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, gattc.o(i.gattc_operation_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gattc_operation_cleanup
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_in_queue (via Veneer)
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free (via Veneer)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cleanup
</UL>

<P><STRONG><a name="[4e7]"></a>m_al_adv_continue</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, m_al_adv.o(i.m_al_adv_continue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = m_al_adv_continue &rArr; m_al_activity_cmd_send &rArr; m_al_activity_cmd_exec
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_activity_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_adv_stopped_ind_handler
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_adv_cmp_evt_handler
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_adv_send
</UL>

<P><STRONG><a name="[fc]"></a>m_al_adv_send</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, m_al_adv.o(i.m_al_adv_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = m_al_adv_send &rArr; m_al_adv_continue &rArr; m_al_activity_cmd_send &rArr; m_al_activity_cmd_exec
</UL>
<BR>[Calls]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_adv_continue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_al_adv.o(.constdata)
</UL>
<P><STRONG><a name="[4e9]"></a>m_al_con_adv_start_cont</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, m_al_con.o(i.m_al_con_adv_start_cont))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = m_al_con_adv_start_cont &rArr; m_al_activity_cmd_send &rArr; m_al_activity_cmd_exec
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_activity_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_cmp_evt_handler
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_start
</UL>

<P><STRONG><a name="[ff]"></a>m_al_con_close</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, m_al_con.o(i.m_al_con_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_al_con_close &rArr; m_al_con_disconnect
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_disconnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_al_con.o(.constdata)
</UL>
<P><STRONG><a name="[4eb]"></a>m_al_con_disconnect</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, m_al_con.o(i.m_al_con_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_al_con_disconnect
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_con_timer_ind_handler
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_stopped_ind_handler
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_handle_rx_pkt
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_close
</UL>

<P><STRONG><a name="[481]"></a>m_al_con_pdu_send_cont</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, m_al_con.o(i.m_al_con_pdu_send_cont))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = m_al_con_pdu_send_cont
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_mtu
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_send
</UL>

<P><STRONG><a name="[100]"></a>m_al_con_send</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, m_al_con.o(i.m_al_con_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = m_al_con_send &rArr; m_al_con_pdu_send_cont
</UL>
<BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_pdu_send_cont
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_al_con.o(.constdata)
</UL>
<P><STRONG><a name="[fd]"></a>m_al_con_start</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, m_al_con.o(i.m_al_con_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = m_al_con_start &rArr; m_al_con_adv_start_cont &rArr; m_al_activity_cmd_send &rArr; m_al_activity_cmd_exec
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_svc_visibility_set
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_adv_start_cont
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_activity_cmd_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_al_con.o(.constdata)
</UL>
<P><STRONG><a name="[fe]"></a>m_al_con_stop</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, m_al_con.o(i.m_al_con_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = m_al_con_stop &rArr; m_al_activity_cmd_send &rArr; m_al_activity_cmd_exec
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_activity_cmd_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_al_con.o(.constdata)
</UL>
<P><STRONG><a name="[4ea]"></a>m_al_con_type_init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, m_al_con.o(i.m_al_con_type_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = m_al_con_type_init &rArr; attmdb_svc_visibility_set
</UL>
<BR>[Calls]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_svc_visibility_set
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_stopped_ind_handler
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_cleanup
</UL>

<P><STRONG><a name="[48f]"></a>m_al_handle_rx_pkt</STRONG> (Thumb, 360 bytes, Stack size 40 bytes, m_al_con.o(i.m_al_handle_rx_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = m_al_handle_rx_pkt &rArr; m_al_con_disconnect
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set (via Veneer)
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear (via Veneer)
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free (via Veneer)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
</UL>

<P><STRONG><a name="[503]"></a>m_al_scan_start_continue</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, m_al_scan.o(i.m_al_scan_start_continue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = m_al_scan_start_continue &rArr; m_al_activity_cmd_send &rArr; m_al_activity_cmd_exec
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_activity_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_scan_cmp_evt_handler
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_scan_start
</UL>

<P><STRONG><a name="[502]"></a>m_al_scan_stop_continue</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, m_al_scan.o(i.m_al_scan_stop_continue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = m_al_scan_stop_continue &rArr; m_al_activity_cmd_send &rArr; m_al_activity_cmd_exec
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_activity_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_scan_stopped_ind_handler
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_scan_cmp_evt_handler
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_scan_stop
</UL>

<P><STRONG><a name="[35]"></a>mesh_check_baseband_status_handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, m_al_scan.o(i.mesh_check_baseband_status_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mesh_check_baseband_status_handler &rArr; mesh_fatal_error_report
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save (via Veneer)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore (via Veneer)
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_fatal_error_report
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_al_scan.o(i.m_al_scan_init)
</UL>
<P><STRONG><a name="[109]"></a>gapm_cmp_evt_handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, m_al_task.o(i.gapm_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gapm_cmp_evt_handler &rArr; m_al_activity_cmp_evt_handler &rArr; m_al_con_cmp_evt_handler &rArr; m_al_con_adv_start_cont &rArr; m_al_activity_cmd_send &rArr; m_al_activity_cmd_exec
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_sec_cmp_evt_handler
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_activity_cmp_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_al_task.o(.constdata)
</UL>
<P><STRONG><a name="[105]"></a>ke_msg_default_handler</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, m_al_task.o(i.ke_msg_default_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = ke_msg_default_handler &rArr; m_api_message_handler &rArr; m_api_msg_handler &rArr; m_api_msg_exec_cmd &rArr; m_api_load_stored_info &rArr; m_tb_store_load &rArr; m_tb_store_load_fsm &rArr; m_tb_store_load_states &rArr; m_tb_state_set_beacon_state &rArr; m_bcn_state_update &rArr; m_bcn_adv_tx_check &rArr; m_bcn_prep_secure_bcn &rArr; m_bcn_insert_encrypt_queue &rArr; m_tb_sec_cmac_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_forward (via Veneer)
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_message_handler
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_int_message_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_al_task.o(.constdata)
</UL>
<P><STRONG><a name="[104]"></a>m_al_cleanup</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, m_al_task.o(i.m_al_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = m_al_cleanup &rArr; m_al_con_cleanup &rArr; m_al_con_type_init &rArr; attmdb_svc_visibility_set
</UL>
<BR>[Calls]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_cleanup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_al_task.o(.constdata)
</UL>
<P><STRONG><a name="[103]"></a>m_al_create</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, m_al_task.o(i.m_al_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_al_create
</UL>
<BR>[Calls]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_create
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_al_task.o(.constdata)
</UL>
<P><STRONG><a name="[102]"></a>m_al_destroy</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, m_al_task.o(i.m_al_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = m_al_destroy &rArr; m_al_con_init &rArr; attm_svc_create_db &rArr; attmdb_add_service &rArr; attmdb_svc_init &rArr; attm_uuid16_comp &rArr; attm_uuid_comp &rArr; attm_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_init
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_timer_init
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_sec_init
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_djob_init
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_activity_init
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_scan_init
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_init
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_adv_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_al_task.o(.constdata)
</UL>
<P><STRONG><a name="[101]"></a>m_al_init</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, m_al_task.o(i.m_al_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = m_al_init &rArr; m_al_con_init &rArr; attm_svc_create_db &rArr; attmdb_add_service &rArr; attmdb_svc_init &rArr; attm_uuid16_comp &rArr; attm_uuid_comp &rArr; attm_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_init
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_get_env_size
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_timer_init
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_sec_init
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_djob_init
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_activity_init
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_set_local_addr
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_scan_init
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_con_init
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_adv_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_al_task.o(.constdata)
</UL>
<P><STRONG><a name="[60e]"></a>m_fnd_pbrs_buf_alloc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, m_fnd_pbrs.o(i.m_fnd_pbrs_buf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = m_fnd_pbrs_buf_alloc &rArr; m_tb_buf_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_pdu_sent
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_pdu_rx
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_scan_timer_handler
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_scan_report
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_link_timer_handler
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_link_state_report
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_handler_scan
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_handler_link
</UL>

<P><STRONG><a name="[112]"></a>m_fnd_pbrs_cb_opcode_check</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, m_fnd_pbrs.o(i.m_fnd_pbrs_cb_opcode_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = m_fnd_pbrs_cb_opcode_check &rArr; m_api_model_opcode_status &rArr; m_lay_access_opcode_status &rArr; m_al_djob_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_model_opcode_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_fnd_pbrs.o(.constdata)
</UL>
<P><STRONG><a name="[110]"></a>m_fnd_pbrs_cb_rx</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, m_fnd_pbrs.o(i.m_fnd_pbrs_cb_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = m_fnd_pbrs_cb_rx &rArr; m_fnd_pbrs_process &rArr; m_fnd_pbrs_handler_link &rArr; m_fnd_pbrs_send &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_copy
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_alloc
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_fnd_pbrs.o(.constdata)
</UL>
<P><STRONG><a name="[111]"></a>m_fnd_pbrs_cb_sent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, m_fnd_pbrs.o(i.m_fnd_pbrs_cb_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = m_fnd_pbrs_cb_sent &rArr; m_tb_buf_release &rArr; m_tb_buf_block_free
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_fnd_pbrs.o(.constdata)
</UL>
<P><STRONG><a name="[612]"></a>m_fnd_pbrs_handler_link</STRONG> (Thumb, 422 bytes, Stack size 56 bytes, m_fnd_pbrs.o(i.m_fnd_pbrs_handler_link))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = m_fnd_pbrs_handler_link &rArr; m_fnd_pbrs_send &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_pbrs_prov_bearer_gatt_create
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_pbrs_prov_bearer_gatt_close
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_send
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_process_next
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_buf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_process
</UL>

<P><STRONG><a name="[617]"></a>m_fnd_pbrs_handler_scan</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, m_fnd_pbrs.o(i.m_fnd_pbrs_handler_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = m_fnd_pbrs_handler_scan &rArr; m_fnd_pbrs_send &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_malloc
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_set
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_send
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_scan_clear
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_process_next
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_buf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_process
</UL>

<P><STRONG><a name="[618]"></a>m_fnd_pbrs_handler_scan_cap</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, m_fnd_pbrs.o(i.m_fnd_pbrs_handler_scan_cap))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = m_fnd_pbrs_handler_scan_cap &rArr; m_fnd_pbrs_process_next &rArr;  m_fnd_pbrs_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_process_next
</UL>
<BR>[Called By]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_process
</UL>

<P><STRONG><a name="[61a]"></a>m_fnd_pbrs_link_state_report</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, m_fnd_pbrs.o(i.m_fnd_pbrs_link_state_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = m_fnd_pbrs_link_state_report &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_model_rsp_send
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_buf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_link_open_failed
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_link_created
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_link_closed
</UL>

<P><STRONG><a name="[48]"></a>m_fnd_pbrs_link_timer_handler</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, m_fnd_pbrs.o(i.m_fnd_pbrs_link_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = m_fnd_pbrs_link_timer_handler &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_model_rsp_send
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_buf_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_fnd_pbrs.o(i.m_fnd_pbrs_init)
</UL>
<P><STRONG><a name="[60f]"></a>m_fnd_pbrs_process</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, m_fnd_pbrs.o(i.m_fnd_pbrs_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = m_fnd_pbrs_process &rArr; m_fnd_pbrs_handler_link &rArr; m_fnd_pbrs_send &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_pbrs_prov_bearer_gatt_send
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_process_next
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_handler_scan_cap
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_handler_scan
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_handler_link
</UL>
<BR>[Called By]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_process_next
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_cb_rx
</UL>

<P><STRONG><a name="[616]"></a>m_fnd_pbrs_process_next</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, m_fnd_pbrs.o(i.m_fnd_pbrs_process_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = m_fnd_pbrs_process_next &rArr;  m_fnd_pbrs_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_process
</UL>
<BR>[Called By]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_process
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_handler_scan_cap
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_handler_scan
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_handler_link
</UL>

<P><STRONG><a name="[611]"></a>m_fnd_pbrs_scan_clear</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, m_fnd_pbrs.o(i.m_fnd_pbrs_scan_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = m_fnd_pbrs_scan_clear &rArr; m_tb_timer_clear &rArr; m_tb_timer_remove &rArr; m_tb_timer_prog &rArr; m_al_timer_get_delay &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_free
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_scan_timer_handler
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_handler_scan
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_check_adv_report
</UL>

<P><STRONG><a name="[610]"></a>m_fnd_pbrs_scan_report</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, m_fnd_pbrs.o(i.m_fnd_pbrs_scan_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = m_fnd_pbrs_scan_report &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_model_rsp_send
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_buf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_check_adv_report
</UL>

<P><STRONG><a name="[47]"></a>m_fnd_pbrs_scan_timer_handler</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, m_fnd_pbrs.o(i.m_fnd_pbrs_scan_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = m_fnd_pbrs_scan_timer_handler &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_set
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_model_rsp_send
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_scan_clear
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_buf_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_fnd_pbrs.o(i.m_fnd_pbrs_init)
</UL>
<P><STRONG><a name="[615]"></a>m_fnd_pbrs_send</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, m_fnd_pbrs.o(i.m_fnd_pbrs_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = m_fnd_pbrs_send &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_model_rsp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_handler_scan
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_handler_link
</UL>

<P><STRONG><a name="[11c]"></a>app_get_current_rssi_rsp</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, app_task.o(i.app_get_current_rssi_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_get_current_rssi_rsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[354]"></a>app_get_handler</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, app_task.o(i.app_get_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_get_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_msg_handler
</UL>

<P><STRONG><a name="[113]"></a>appm_msg_handler</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, app_task.o(i.appm_msg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = appm_msg_handler &rArr; app_update_params_update_ind_func
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_timer_handle
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_update_params_update_ind_func
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_phy_ind_func
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[121]"></a>gapc_cmp_evt_handler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, app_task.o(i.gapc_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gapc_cmp_evt_handler &rArr; app_update_phy_rejected_ind_func
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_update_phy_rejected_ind_func
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_update_params_rejected_ind_func
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_update_params_complete_ind_func
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_connection_master_encrypt_compeleted_ind_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[11f]"></a>gapc_connection_req_ind_handler</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, app_task.o(i.gapc_connection_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gapc_connection_req_ind_handler &rArr; ble_bond_check &rArr; app_connection_success_ind_func
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bond_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[122]"></a>gapc_disconnect_ind_handler</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, app_task.o(i.gapc_disconnect_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gapc_disconnect_ind_handler &rArr; app_disconnect_ind_func
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_disconnect_ind_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[11d]"></a>gapc_get_dev_info_req_ind_handler</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, app_task.o(i.gapc_get_dev_info_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gapc_get_dev_info_req_ind_handler &rArr; gap_get_dev_name
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_get_dev_name
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_get_dev_appearance
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[120]"></a>gapc_param_update_req_ind_handler</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, app_task.o(i.gapc_param_update_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gapc_param_update_req_ind_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[124]"></a>gapc_peer_features_ind_handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_task.o(i.gapc_peer_features_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gapc_peer_features_ind_handler &rArr; app_get_info_ind_func
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_info_ind_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[123]"></a>gapc_peer_ver_ind_handler</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, app_task.o(i.gapc_peer_ver_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gapc_peer_ver_ind_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[11e]"></a>gapc_set_dev_info_req_ind_handler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, app_task.o(i.gapc_set_dev_info_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapc_set_dev_info_req_ind_handler &rArr; gap_set_dev_name
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_dev_name
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_set_dev_appearance
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[115]"></a>gapm_activity_created_ind_handler</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, app_task.o(i.gapm_activity_created_ind_handler))
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[116]"></a>gapm_activity_stopped_ind_handler</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, app_task.o(i.gapm_activity_stopped_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gapm_activity_stopped_ind_handler &rArr; app_conn_complete_ind_func
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_conn_complete_ind_func
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_scanning_completed_ind_func
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_per_sync_completed_ind_func
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_adv_complete_ind_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[11b]"></a>gapm_addr_solved_ind_handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_task.o(i.gapm_addr_solved_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gapm_addr_solved_ind_handler &rArr; app_addr_resolve_result_ind_func
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_addr_resolve_result_ind_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[117]"></a>gapm_cmp_evt_handler</STRONG> (Thumb, 448 bytes, Stack size 56 bytes, app_task.o(i.gapm_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = gapm_cmp_evt_handler &rArr; appm_adv_recv_gapm_cmp &rArr; app_act_created_ind_func &rArr; app_db_init_complete_ind_func &rArr; user_entry_after_ble_init &rArr; YK_APP_Init &rArr; APP_Platfrom_Init &rArr; APP_MESH_Init &rArr; pb_remote_central_init &rArr; gatt_add_client &rArr; gatt_add_client_uuid &rArr; gatt_write_peer_svc_to_flash &rArr; flash_write &rArr; flash_protect_enable &rArr; co_delay_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_reset_entry (via Veneer)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_init (via Veneer)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_conn_recv_gapm_cmp
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_add_svc
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_exc_activity_cmp
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_adv_recv_gapm_cmp
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_table_set_static_keys
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_table_get_static_keys
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sec_get_bond_status
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_start_conn
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_scan_recv_gapm_cmp
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_period_sync_recv_gapm_cmp
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_dev_config_complete_ind_func
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_reset_complete_ind_func
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_db_init_complete_ind_func
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_addr_resolve_result_ind_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[125]"></a>gapm_enc_block_ind_handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_task.o(i.gapm_enc_block_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gapm_enc_block_ind_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[119]"></a>gapm_ext_adv_report_ind_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_task.o(i.gapm_ext_adv_report_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gapm_ext_adv_report_ind_handler &rArr; app_adv_report_ind_func
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_adv_report_ind_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[118]"></a>gapm_gen_rand_nb_ind_handler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, app_task.o(i.gapm_gen_rand_nb_ind_handler))
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[114]"></a>gapm_profile_added_ind_handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_task.o(i.gapm_profile_added_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = gapm_profile_added_ind_handler &rArr; mesh_set_runtime &rArr; prf_get_task_from_id
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_set_runtime
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_svc_added_ind_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[11a]"></a>gapm_sync_established_ind_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_task.o(i.gapm_sync_established_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gapm_sync_established_ind_handler &rArr; app_per_sync_established_ind_func
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_per_sync_established_ind_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[126]"></a>gattc_event_ind_handler</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, app_task.o(i.gattc_event_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gattc_event_ind_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[133]"></a>gapc_bond_cfm_handler</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, gapc_task.o(i.gapc_bond_cfm_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = gapc_bond_cfm_handler &rArr; smpc_pairing_ltk_exch &rArr; smpc_tkdp_send_continue &rArr; smpc_tkdp_rcp_start &rArr; smpc_tkdp_rcp_continue &rArr; smpc_pairing_end &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_tk_exch
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_rsp
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_oob_exch
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_nc_exch
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_ltk_exch
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_irk_exch
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_end
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_csrk_exch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[132]"></a>gapc_bond_cmd_handler</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, gapc_task.o(i.gapc_bond_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gapc_bond_cmd_handler &rArr; smpc_pairing_start &rArr; smpc_pdu_send &rArr; l2cc_pdu_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_process_op
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_start
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_req_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[149]"></a>gapc_cmp_evt_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gapc_task.o(i.gapc_cmp_evt_handler))
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[129]"></a>gapc_connection_cfm_handler</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, gapc_task.o(i.gapc_connection_cfm_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gapc_connection_cfm_handler &rArr; gapm_con_enable &rArr; gattc_con_enable &rArr; atts_process_pdu &rArr; atts_clear_rsp_data
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_con_enable
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_auth_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[127]"></a>gapc_default_msg_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gapc_task.o(i.gapc_default_msg_handler))
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[128]"></a>gapc_disconnect_cmd_handler</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, gapc_task.o(i.gapc_disconnect_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gapc_disconnect_cmd_handler &rArr; gapc_send_error_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller (via Veneer)
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_conhdl
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_error_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[135]"></a>gapc_encrypt_cfm_handler</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gapc_task.o(i.gapc_encrypt_cfm_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gapc_encrypt_cfm_handler &rArr; smpc_encrypt_cfm &rArr; smpc_send_ltk_req_rsp &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_encrypt_cfm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[134]"></a>gapc_encrypt_cmd_handler</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, gapc_task.o(i.gapc_encrypt_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gapc_encrypt_cmd_handler &rArr; smpc_encrypt_start &rArr; smpc_send_start_enc_cmd &rArr; gapc_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_process_op
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_encrypt_start_handler
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_encrypt_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[13e]"></a>gapc_gen_dh_key_ind_handler</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gapc_task.o(i.gapc_gen_dh_key_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = gapc_gen_dh_key_ind_handler &rArr; smpc_handle_dh_key_check_complete &rArr; smpc_init_mac_key_calculation &rArr; smpc_f5_init &rArr; smpc_aes_cmac_init &rArr; smpc_send_use_enc_block_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_handle_dh_key_check_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[143]"></a>gapc_get_dev_info_cfm_handler</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, gapc_task.o(i.gapc_get_dev_info_cfm_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gapc_get_dev_info_cfm_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_att_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[12a]"></a>gapc_get_info_cmd_handler</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, gapc_task.o(i.gapc_get_info_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gapc_get_info_cmd_handler &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller (via Veneer)
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_conhdl
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_process_op
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_chan_sel_algo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[13f]"></a>gapc_key_press_notification_cmd_handler</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, gapc_task.o(i.gapc_key_press_notification_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gapc_key_press_notification_cmd_handler &rArr; gapc_process_op &rArr; gapc_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set (via Veneer)
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_active (via Veneer)
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_process_op
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[12e]"></a>gapc_param_update_cfm_handler</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, gapc_task.o(i.gapc_param_update_cfm_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gapc_param_update_cfm_handler &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller (via Veneer)
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_conhdl
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_sig_send_param_resp
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_operation_ptr
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[12d]"></a>gapc_param_update_cmd_handler</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, gapc_task.o(i.gapc_param_update_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gapc_param_update_cmd_handler &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand (via Veneer)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller (via Veneer)
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_conhdl
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_process_op
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_update_sanity
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_dest_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[136]"></a>gapc_security_cmd_handler</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, gapc_task.o(i.gapc_security_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gapc_security_cmd_handler &rArr; smpc_security_req_send &rArr; smpc_pdu_send &rArr; l2cc_pdu_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_process_op
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_security_req_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[144]"></a>gapc_set_dev_info_cfm_handler</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, gapc_task.o(i.gapc_set_dev_info_cfm_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gapc_set_dev_info_cfm_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_att_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[146]"></a>gapc_set_le_ping_to_handler</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, gapc_task.o(i.gapc_set_le_ping_to_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gapc_set_le_ping_to_handler &rArr; gapc_process_op &rArr; gapc_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller (via Veneer)
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_conhdl
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_process_op
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[147]"></a>gapc_set_le_pkt_size_handler</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, gapc_task.o(i.gapc_set_le_pkt_size_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gapc_set_le_pkt_size_handler &rArr; gapc_process_op &rArr; gapc_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller (via Veneer)
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_conhdl
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_process_op
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[148]"></a>gapc_set_phy_cmd_handler</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, gapc_task.o(i.gapc_set_phy_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gapc_set_phy_cmd_handler &rArr; gapc_process_op &rArr; gapc_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller (via Veneer)
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_conhdl
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_process_op
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[131]"></a>gapc_set_pref_slave_latency_cmd_handler</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, gapc_task.o(i.gapc_set_pref_slave_latency_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gapc_set_pref_slave_latency_cmd_handler &rArr; gapc_process_op &rArr; gapc_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller (via Veneer)
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_conhdl
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_process_op
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[137]"></a>gapc_sign_cmd_handler</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, gapc_task.o(i.gapc_sign_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = gapc_sign_cmd_handler &rArr; smpc_sign_command &rArr; smpc_generate_ci &rArr; smpc_xor
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_process_op
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_sign_command
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[13d]"></a>gapc_smp_rep_attempts_timer_handler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gapc_task.o(i.gapc_smp_rep_attempts_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gapc_smp_rep_attempts_timer_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[13c]"></a>gapc_smp_timeout_timer_ind_handler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, gapc_task.o(i.gapc_smp_timeout_timer_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gapc_smp_timeout_timer_ind_handler &rArr; smpc_pairing_end &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_end
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[130]"></a>gapc_update_conn_param_to_ind_handler</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gapc_task.o(i.gapc_update_conn_param_to_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gapc_update_conn_param_to_ind_handler &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[13b]"></a>gapm_cmp_evt_handler</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, gapc_task.o(i.gapm_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gapm_cmp_evt_handler &rArr; smpc_pairing_end &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_operation
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_end
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[139]"></a>gapm_gen_rand_nb_ind_handler</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gapc_task.o(i.gapm_gen_rand_nb_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = gapm_gen_rand_nb_ind_handler &rArr; smpc_confirm_gen_rand &rArr; smpc_init_mac_key_calculation &rArr; smpc_f5_init &rArr; smpc_aes_cmac_init &rArr; smpc_send_use_enc_block_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_operation
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_confirm_gen_rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[13a]"></a>gapm_use_enc_block_ind_handler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gapc_task.o(i.gapm_use_enc_block_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = gapm_use_enc_block_ind_handler &rArr; smpc_calc_confirm_cont &rArr; smpc_initiate_dhkey_verification &rArr; smpc_f6_init &rArr; smpc_aes_cmac_init &rArr; smpc_send_use_enc_block_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_operation
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_sign_cont
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[141]"></a>gattc_att_info_req_ind_handler</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, gapc_task.o(i.gattc_att_info_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gattc_att_info_req_ind_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_att_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[12c]"></a>gattc_cmp_evt_handler</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, gapc_task.o(i.gattc_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gattc_cmp_evt_handler &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[12b]"></a>gattc_read_ind_handler</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, gapc_task.o(i.gattc_read_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gattc_read_ind_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_requester
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[142]"></a>gattc_read_req_ind_handler</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, gapc_task.o(i.gattc_read_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gattc_read_req_ind_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_is_pref_con_param_pres
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_att_handle
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_address_type
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_dest_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[140]"></a>gattc_write_req_ind_handler</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, gapc_task.o(i.gattc_write_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gattc_write_req_ind_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_att_handle
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_dest_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[138]"></a>l2cc_cmp_evt_handler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gapc_task.o(i.l2cc_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = l2cc_cmp_evt_handler &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[12f]"></a>l2cc_pdu_recv_ind_handler</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, gapc_task.o(i.l2cc_pdu_recv_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = l2cc_pdu_recv_ind_handler &rArr; smpc_pdu_recv &rArr; smpc_pairing_end &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_sig_pdu_recv_handler
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[40c]"></a>gapm_actv_free</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gapm_actv.o(i.gapm_actv_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gapm_actv_free &rArr; gapm_scan_actv_clean &rArr; gapm_scan_clear_fragments
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_scan_actv_clean
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_per_sync_clear_fragments
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_init
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_deleted
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_created
</UL>

<P><STRONG><a name="[406]"></a>gapm_actv_get_next</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gapm_actv.o(i.gapm_actv_get_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapm_actv_get_next
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_stopped
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_deleted
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_activity_stop_cmd_handler
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_activity_delete_cmd_handler
</UL>

<P><STRONG><a name="[417]"></a>gapm_actv_send_stopped_ind</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gapm_actv.o(i.gapm_actv_send_stopped_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapm_actv_send_stopped_ind
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_stopped
</UL>

<P><STRONG><a name="[419]"></a>gapm_addr_fsm</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, gapm_addr.o(i.gapm_addr_fsm))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gapm_addr_fsm &rArr; gapm_addr_renew_next_addr &rArr;  gapm_addr_fsm (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller (via Veneer)
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_addr_renew_next_addr
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_rand_addr_set_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_cmd_cmp_evt_addr_handler
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_addr_renew_next_addr
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_addr_set_rand_addr
</UL>

<P><STRONG><a name="[41a]"></a>gapm_addr_renew_next_addr</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, gapm_addr.o(i.gapm_addr_renew_next_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + In Cycle
<LI>Call Chain = gapm_addr_renew_next_addr &rArr;  gapm_addr_fsm (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set (via Veneer)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_addr_send_dev_bdaddr_ind
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_addr_fsm
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_addr_renew_cmd_handler
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_addr_fsm
</UL>

<P><STRONG><a name="[41c]"></a>gapm_addr_send_dev_bdaddr_ind</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gapm_addr.o(i.gapm_addr_send_dev_bdaddr_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gapm_addr_send_dev_bdaddr_ind
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_addr_renew_next_addr
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_addr_set_rand_addr
</UL>

<P><STRONG><a name="[16d]"></a>gapm_default_msg_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gapm_task.o(i.gapm_default_msg_handler))
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[187]"></a>gapm_hci_handler</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, gapm_task.o(i.gapm_hci_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapm_hci_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[186]"></a>gapm_unknown_task_msg_handler</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gapm_task.o(i.gapm_unknown_task_msg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapm_unknown_task_msg_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[386]"></a>attmdb_svc_calc_len</STRONG> (Thumb, 452 bytes, Stack size 32 bytes, attm_db.o(i.attmdb_svc_calc_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = attmdb_svc_calc_len &rArr; attm_is_bt32_uuid &rArr; attm_uuid_comp &rArr; attm_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_uuid16_comp
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_is_bt32_uuid
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_is_bt16_uuid
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_add_service
</UL>

<P><STRONG><a name="[387]"></a>attmdb_svc_init</STRONG> (Thumb, 458 bytes, Stack size 40 bytes, attm_db.o(i.attmdb_svc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = attmdb_svc_init &rArr; attm_uuid16_comp &rArr; attm_uuid_comp &rArr; attm_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_uuid16_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_add_service
</UL>

<P><STRONG><a name="[38a]"></a>atts_check_length_and_offset</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, atts.o(i.atts_check_length_and_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = atts_check_length_and_offset &rArr; attmdb_get_max_len
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_max_len
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_signed
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_req
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_cmd
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_execute_write_req
</UL>

<P><STRONG><a name="[195]"></a>atts_execute_write_req</STRONG> (Thumb, 372 bytes, Stack size 56 bytes, atts.o(i.atts_execute_write_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = atts_execute_write_req &rArr; atts_send_error &rArr; l2cc_pdu_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_clear_prep_data
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_attribute
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_send_error
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_dest_task
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_check_length_and_offset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atts.o(.constdata)
</UL>
<P><STRONG><a name="[18b]"></a>atts_find_by_type_req</STRONG> (Thumb, 386 bytes, Stack size 88 bytes, atts.o(i.atts_find_by_type_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = atts_find_by_type_req &rArr; atts_find_value_by_uuid &rArr; atts_get_value &rArr; attm_get_value &rArr; attmdb_get_uuid &rArr; attm_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_size (via Veneer)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_mtu
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_clear_read_cache
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_uuid_comp
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_send_error
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_value_by_uuid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atts.o(.constdata)
</UL>
<P><STRONG><a name="[392]"></a>atts_find_end</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, atts.o(i.atts_find_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = atts_find_end &rArr; attmdb_get_attribute &rArr; attmdb_get_service
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_uuid16_comp
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_service
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_attribute
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_value_by_uuid
</UL>

<P><STRONG><a name="[18a]"></a>atts_find_info_req</STRONG> (Thumb, 324 bytes, Stack size 56 bytes, atts.o(i.atts_find_info_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = atts_find_info_req &rArr; attmdb_get_uuid &rArr; attm_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_mtu
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_uuid
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_send_error
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_next_att
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atts.o(.constdata)
</UL>
<P><STRONG><a name="[390]"></a>atts_find_value_by_uuid</STRONG> (Thumb, 152 bytes, Stack size 80 bytes, atts.o(i.atts_find_value_by_uuid))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = atts_find_value_by_uuid &rArr; atts_get_value &rArr; attm_get_value &rArr; attmdb_get_uuid &rArr; attm_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_uuid
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_uuid_comp
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_value
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_att_chk_perm
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_end
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_next_att
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_by_type_req
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_by_grp_type_req
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_by_type_req
</UL>

<P><STRONG><a name="[394]"></a>atts_get_att_chk_perm</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, atts.o(i.atts_get_att_chk_perm))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = atts_get_att_chk_perm &rArr; attmdb_att_get_permission &rArr; attmdb_get_attribute &rArr; attmdb_get_service
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_lk_sec_lvl_get
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_is_sec_set
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_enc_keysize_get
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_att_get_permission
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_signed_cfm
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_send_event
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_signed
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_req
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_cmd
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_req
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_mult_req
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_blob_req
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_prepare_write_req
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_value_by_uuid
</UL>

<P><STRONG><a name="[38f]"></a>atts_get_dest_task</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, atts.o(i.atts_get_dest_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atts_get_dest_task &rArr; attmdb_get_service
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_service
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_update_elmt
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_prepare_write_req
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_value
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_execute_write_req
</UL>

<P><STRONG><a name="[395]"></a>atts_get_value</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, atts.o(i.atts_get_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = atts_get_value &rArr; attm_get_value &rArr; attmdb_get_uuid &rArr; attm_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_clear_read_cache
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_get_value
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_dest_task
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_req
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_mult_req
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_blob_req
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_value_by_uuid
</UL>

<P><STRONG><a name="[189]"></a>atts_mtu_exc_req</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, atts.o(i.atts_mtu_exc_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = atts_mtu_exc_req &rArr; l2cc_pdu_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_set_mtu
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_max_mtu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atts.o(.constdata)
</UL>
<P><STRONG><a name="[194]"></a>atts_prepare_write_req</STRONG> (Thumb, 244 bytes, Stack size 56 bytes, atts.o(i.atts_prepare_write_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = atts_prepare_write_req &rArr; atts_get_att_chk_perm &rArr; attmdb_att_get_permission &rArr; attmdb_get_attribute &rArr; attmdb_get_service
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_front (via Veneer)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_send_error
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_store_prep_data
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_dest_task
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_att_chk_perm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atts.o(.constdata)
</UL>
<P><STRONG><a name="[18f]"></a>atts_read_blob_req</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, atts.o(i.atts_read_blob_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = atts_read_blob_req &rArr; atts_get_value &rArr; attm_get_value &rArr; attmdb_get_uuid &rArr; attm_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_mtu
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_clear_read_cache
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_send_error
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_value
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_att_chk_perm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atts.o(.constdata)
</UL>
<P><STRONG><a name="[18d]"></a>atts_read_by_grp_type_req</STRONG> (Thumb, 442 bytes, Stack size 88 bytes, atts.o(i.atts_read_by_grp_type_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = atts_read_by_grp_type_req &rArr; atts_find_value_by_uuid &rArr; atts_get_value &rArr; attm_get_value &rArr; attmdb_get_uuid &rArr; attm_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_size (via Veneer)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_mtu
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_clear_read_cache
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_send_error
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_value_by_uuid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atts.o(.constdata)
</UL>
<P><STRONG><a name="[18c]"></a>atts_read_by_type_req</STRONG> (Thumb, 420 bytes, Stack size 88 bytes, atts.o(i.atts_read_by_type_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = atts_read_by_type_req &rArr; atts_find_value_by_uuid &rArr; atts_get_value &rArr; attm_get_value &rArr; attmdb_get_uuid &rArr; attm_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_size (via Veneer)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_mtu
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_clear_read_cache
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_send_error
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_value_by_uuid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atts.o(.constdata)
</UL>
<P><STRONG><a name="[190]"></a>atts_read_mult_req</STRONG> (Thumb, 284 bytes, Stack size 56 bytes, atts.o(i.atts_read_mult_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = atts_read_mult_req &rArr; atts_get_value &rArr; attm_get_value &rArr; attmdb_get_uuid &rArr; attm_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_size (via Veneer)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_mtu
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_clear_read_cache
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_send_error
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_value
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_att_chk_perm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atts.o(.constdata)
</UL>
<P><STRONG><a name="[18e]"></a>atts_read_req</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, atts.o(i.atts_read_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = atts_read_req &rArr; atts_get_value &rArr; attm_get_value &rArr; attmdb_get_uuid &rArr; attm_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_mtu
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_clear_read_cache
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_send_error
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_value
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_att_chk_perm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atts.o(.constdata)
</UL>
<P><STRONG><a name="[39c]"></a>atts_store_prep_data</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, atts.o(i.atts_store_prep_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = atts_store_prep_data
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_insert_before (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_prepare_write_req
</UL>

<P><STRONG><a name="[3a0]"></a>atts_update_elmt</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, atts.o(i.atts_update_elmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = atts_update_elmt &rArr; atts_get_dest_task &rArr; attmdb_get_service
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_dest_task
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_signed_cfm
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_req
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_cmd
</UL>

<P><STRONG><a name="[191]"></a>atts_write_cmd</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, atts.o(i.atts_write_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = atts_write_cmd &rArr; atts_get_att_chk_perm &rArr; attmdb_att_get_permission &rArr; attmdb_get_attribute &rArr; attmdb_get_service
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_update_elmt
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_att_chk_perm
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_check_length_and_offset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atts.o(.constdata)
</UL>
<P><STRONG><a name="[192]"></a>atts_write_req</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, atts.o(i.atts_write_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = atts_write_req &rArr; atts_get_att_chk_perm &rArr; attmdb_att_get_permission &rArr; attmdb_get_attribute &rArr; attmdb_get_service
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_send_error
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_update_elmt
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_att_chk_perm
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_check_length_and_offset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atts.o(.constdata)
</UL>
<P><STRONG><a name="[193]"></a>atts_write_signed</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, atts.o(i.atts_write_signed))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = atts_write_signed &rArr; atts_get_att_chk_perm &rArr; attmdb_att_get_permission &rArr; attmdb_get_attribute &rArr; attmdb_get_service
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_att_chk_perm
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_check_length_and_offset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atts.o(.constdata)
</UL>
<P><STRONG><a name="[1ae]"></a>gapc_cmp_evt_handler</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gattc_task.o(i.gapc_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gapc_cmp_evt_handler &rArr; atts_process_pdu &rArr; atts_clear_rsp_data
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free (via Veneer)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_process_pdu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[1ad]"></a>gapc_sign_ind_handler</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, gattc_task.o(i.gapc_sign_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = gapc_sign_ind_handler &rArr; atts_write_signed_cfm &rArr; atts_get_att_chk_perm &rArr; attmdb_att_get_permission &rArr; attmdb_get_attribute &rArr; attmdb_get_service
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation_ptr
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_att_req
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_signed_cfm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[1a7]"></a>gattc_att_info_cfm_handler</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, gattc_task.o(i.gattc_att_info_cfm_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gattc_att_info_cfm_handler &rArr; atts_process_pdu &rArr; atts_clear_rsp_data
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free (via Veneer)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_process_pdu
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_send_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[1ab]"></a>gattc_att_info_req_ind_handler</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, gattc_task.o(i.gattc_att_info_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gattc_att_info_req_ind_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_svc_get_start_hdl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[1a0]"></a>gattc_cmp_evt_handler</STRONG> (Thumb, 384 bytes, Stack size 64 bytes, gattc_task.o(i.gattc_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gattc_cmp_evt_handler &rArr; gattc_send_complete_evt &rArr; gattc_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_check_malloc (via Veneer)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_front (via Veneer)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_requester
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation_ptr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[196]"></a>gattc_default_msg_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gattc_task.o(i.gattc_default_msg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gattc_default_msg_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[1a4]"></a>gattc_disc_char_desc_ind_handler</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, gattc_task.o(i.gattc_disc_char_desc_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gattc_disc_char_desc_ind_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[1a3]"></a>gattc_disc_char_ind_handler</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, gattc_task.o(i.gattc_disc_char_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gattc_disc_char_ind_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[198]"></a>gattc_disc_cmd_handler</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, gattc_task.o(i.gattc_disc_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = gattc_disc_cmd_handler &rArr; gattc_process_op &rArr; gattc_send_error_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_convert_to128
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_att_req
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_process_op
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[1a2]"></a>gattc_disc_svc_incl_ind_handler</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, gattc_task.o(i.gattc_disc_svc_incl_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gattc_disc_svc_incl_ind_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[1a1]"></a>gattc_disc_svc_ind_handler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, gattc_task.o(i.gattc_disc_svc_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gattc_disc_svc_ind_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[19b]"></a>gattc_event_cfm_handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gattc_task.o(i.gattc_event_cfm_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gattc_event_cfm_handler &rArr; attc_send_hdl_cfm &rArr; l2cc_pdu_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_hdl_cfm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[197]"></a>gattc_exc_mtu_cmd_handler</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, gattc_task.o(i.gattc_exc_mtu_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gattc_exc_mtu_cmd_handler &rArr; gattc_process_op &rArr; gattc_send_error_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_max_mtu
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_att_req
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_process_op
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[19c]"></a>gattc_execute_write_cmd_handler</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, gattc_task.o(i.gattc_execute_write_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gattc_execute_write_cmd_handler &rArr; gattc_process_op &rArr; gattc_send_error_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_execute
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_process_op
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[485]"></a>gattc_process_op</STRONG> (Thumb, 162 bytes, Stack size 56 bytes, gattc_task.o(i.gattc_process_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gattc_process_op &rArr; gattc_send_error_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_src_id_get (via Veneer)
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_update_state
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_set_operation_ptr
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_error_evt
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cmd_handler
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_evt_cmd_handler
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_sdp_svc_disc_cmd_handler
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_reg_to_peer_evt_cmd_handler
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_cmd_handler
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_execute_write_cmd_handler
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_exc_mtu_cmd_handler
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_disc_cmd_handler
</UL>

<P><STRONG><a name="[1a5]"></a>gattc_read_cfm_handler</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, gattc_task.o(i.gattc_read_cfm_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gattc_read_cfm_handler &rArr; atts_process_pdu &rArr; atts_clear_rsp_data
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free (via Veneer)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_process_pdu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[199]"></a>gattc_read_cmd_handler</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, gattc_task.o(i.gattc_read_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gattc_read_cmd_handler &rArr; gattc_process_op &rArr; gattc_send_error_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_convert_to128
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_att_req
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_process_op
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[1ac]"></a>gattc_read_req_ind_handler</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, gattc_task.o(i.gattc_read_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gattc_read_req_ind_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_svc_get_start_hdl
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_svc_chg_ccc_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[19d]"></a>gattc_reg_to_peer_evt_cmd_handler</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, gattc_task.o(i.gattc_reg_to_peer_evt_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gattc_reg_to_peer_evt_cmd_handler &rArr; gattc_process_op &rArr; gattc_send_error_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_extract (via Veneer)
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_process_op
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[19f]"></a>gattc_sdp_svc_disc_cmd_handler</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, gattc_task.o(i.gattc_sdp_svc_disc_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gattc_sdp_svc_disc_cmd_handler &rArr; gattc_process_op &rArr; gattc_send_error_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation_ptr
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_process_op
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[1a9]"></a>gattc_send_evt_cmd_handler</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, gattc_task.o(i.gattc_send_evt_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = gattc_send_evt_cmd_handler &rArr; atts_send_event &rArr; atts_get_att_chk_perm &rArr; attmdb_att_get_permission &rArr; attmdb_get_attribute &rArr; attmdb_get_service
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_clear_read_cache
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_process_op
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_send_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[1a8]"></a>gattc_send_svc_changed_cmd_handler</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, gattc_task.o(i.gattc_send_svc_changed_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gattc_send_svc_changed_cmd_handler &rArr; attm_att_set_value &rArr; attmdb_get_attribute &rArr; attmdb_get_service
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_att_set_value
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_svc_get_start_hdl
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_error_evt
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_svc_chg_en
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_svc_chg_ccc_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[19e]"></a>gattc_timeout_handler</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, gattc_task.o(i.gattc_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gattc_timeout_handler &rArr; gattc_send_complete_evt &rArr; gattc_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send_basic (via Veneer)
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_is_disc_connection
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_dest_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[1a6]"></a>gattc_write_cfm_handler</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, gattc_task.o(i.gattc_write_cfm_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gattc_write_cfm_handler &rArr; atts_write_rsp_send &rArr; atts_send_error &rArr; l2cc_pdu_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free (via Veneer)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_process_pdu
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_clear_read_cache
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_clear_prep_data
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_rsp_send
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_send_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[19a]"></a>gattc_write_cmd_handler</STRONG> (Thumb, 398 bytes, Stack size 40 bytes, gattc_task.o(i.gattc_write_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gattc_write_cmd_handler &rArr; gattc_process_op &rArr; gattc_send_error_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_mtu
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_lk_sec_lvl_get
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_is_sec_set
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_execute
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_att_req
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_process_op
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[1aa]"></a>gattc_write_req_ind_handler</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, gattc_task.o(i.gattc_write_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gattc_write_req_ind_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_svc_chg_ccc_set
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_dest_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[1b0]"></a>l2cc_cmp_evt_handler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, gattc_task.o(i.l2cc_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = l2cc_cmp_evt_handler &rArr; gattc_send_complete_evt &rArr; gattc_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[1af]"></a>l2cc_pdu_recv_ind_handler</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, gattc_task.o(i.l2cc_pdu_recv_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = l2cc_pdu_recv_ind_handler &rArr; atts_l2cc_pdu_recv_handler &rArr; atts_process_pdu &rArr; atts_clear_rsp_data
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_l2cc_pdu_recv_handler
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_l2cc_pdu_recv_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[1b1]"></a>gattm_default_msg_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gattm_task.o(i.gattm_default_msg_handler))
<BR>[Address Reference Count : 1]<UL><LI> gattm_task.o(.constdata)
</UL>
<P><STRONG><a name="[1b7]"></a>hci_acl_data_handler</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, l2cc_task.o(i.hci_acl_data_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hci_acl_data_handler &rArr; l2cc_pdu_unpack
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_util_buf_rx_free (via Veneer)
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_unpack
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_rx_init
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_header_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2cc_task.o(.constdata)
</UL>
<P><STRONG><a name="[1b6]"></a>hci_nb_cmp_pkts_evt_handler</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, l2cc_task.o(i.hci_nb_cmp_pkts_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hci_nb_cmp_pkts_evt_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_set (via Veneer)
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cm_get_nb_buffer_available
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2cc_task.o(.constdata)
</UL>
<P><STRONG><a name="[1b5]"></a>l2cc_dbg_pdu_send_cmd_handler</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, l2cc_task.o(i.l2cc_dbg_pdu_send_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = l2cc_dbg_pdu_send_cmd_handler &rArr; l2cc_send_cmp_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_max_mtu
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cm_tx_status
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_send_cmp_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2cc_task.o(.constdata)
</UL>
<P><STRONG><a name="[1b2]"></a>l2cc_default_msg_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, l2cc_task.o(i.l2cc_default_msg_handler))
<BR>[Address Reference Count : 1]<UL><LI> l2cc_task.o(.constdata)
</UL>
<P><STRONG><a name="[1b4]"></a>l2cc_lecb_sdu_send_cmd_handler</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, l2cc_task.o(i.l2cc_lecb_sdu_send_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = l2cc_lecb_sdu_send_cmd_handler &rArr; l2cc_send_cmp_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_send_cmp_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2cc_task.o(.constdata)
</UL>
<P><STRONG><a name="[1b8]"></a>l2cc_pdu_recv_ind_handler</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, l2cc_task.o(i.l2cc_pdu_recv_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = l2cc_pdu_recv_ind_handler &rArr; l2cc_sig_pdu_recv_handler &rArr; l2cc_sig_send_cmd_reject &rArr; l2cc_pdu_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_sig_send_cmd_reject
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_sig_pdu_recv_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2cc_task.o(.constdata)
</UL>
<P><STRONG><a name="[1b3]"></a>l2cc_pdu_send_cmd_handler</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, l2cc_task.o(i.l2cc_pdu_send_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = l2cc_pdu_send_cmd_handler &rArr; l2cc_send_cmp_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cm_tx_status
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_send_cmp_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2cc_task.o(.constdata)
</UL>
<P><STRONG><a name="[32]"></a>l2cm_l2cap_tx_handler</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, l2cm.o(i.l2cm_l2cap_tx_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = l2cm_l2cap_tx_handler &rArr; l2cc_data_send &rArr; l2cc_pdu_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_set (via Veneer)
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_clear (via Veneer)
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_data_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2cm.o(i.l2cm_init)
</UL>
<P><STRONG><a name="[4e1]"></a>m_al_activity_cmd_exec</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, m_al_activity.o(i.m_al_activity_cmd_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_al_activity_cmd_exec
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_activity_cmp_evt_handler
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_activity_cmd_send
</UL>

<P><STRONG><a name="[34]"></a>m_al_djob_evt_handler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, m_al_djob.o(i.m_al_djob_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_al_djob_evt_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_set (via Veneer)
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_clear (via Veneer)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_al_djob.o(i.m_al_djob_init)
</UL>
<P><STRONG><a name="[36]"></a>m_al_sec_aes_result_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_al_sec.o(i.m_al_sec_aes_result_cb))
<BR>[Address Reference Count : 8]<UL><LI> m_al_sec.o(i.m_al_sec_rand)
<LI> m_al_sec.o(i.m_al_sec_aes)
<LI> m_al_sec.o(i.m_al_sec_aes_cmac)
<LI> m_al_sec.o(i.m_al_sec_aes_k1)
<LI> m_al_sec.o(i.m_al_sec_aes_k2)
<LI> m_al_sec.o(i.m_al_sec_aes_k3)
<LI> m_al_sec.o(i.m_al_sec_aes_k4)
<LI> m_al_sec.o(i.m_al_sec_aes_s1)
</UL>
<P><STRONG><a name="[37]"></a>m_al_sec_ccm_result_cb</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, m_al_sec.o(i.m_al_sec_ccm_result_cb))
<BR>[Address Reference Count : 1]<UL><LI> m_al_sec.o(i.m_al_sec_aes_ccm)
</UL>
<P><STRONG><a name="[519]"></a>m_al_timer_update_clock</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, m_al_timer.o(i.m_al_timer_update_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_time (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_timer_get_time_ms
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_timer_get_delay
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_timer_get_clock
</UL>

<P><STRONG><a name="[6b9]"></a>m_tb_buf_copy_data</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, m_tb_buf.o(i.m_tb_buf_copy_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = m_tb_buf_copy_data
</UL>
<BR>[Called By]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_copy
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_copy_data_from_mem
</UL>

<P><STRONG><a name="[6d6]"></a>m_tb_key_aid_tbl_add</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, m_tb_key.o(i.m_tb_key_aid_tbl_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = m_tb_key_aid_tbl_add
</UL>
<BR>[Called By]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_revoke_old
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_finished_cb
</UL>

<P><STRONG><a name="[6cc]"></a>m_tb_key_aid_tbl_del</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, m_tb_key.o(i.m_tb_key_aid_tbl_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_tb_key_aid_tbl_del
</UL>
<BR>[Called By]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_revoke_old
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_app_delete
</UL>

<P><STRONG><a name="[6ce]"></a>m_tb_key_check_iv</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, m_tb_key.o(i.m_tb_key_check_iv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = m_tb_key_check_iv &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_get_cur_time
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_ind
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_iv_update_ind
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_is_iv_update_auth
</UL>
<BR>[Called By]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_secure_bcn_rx_ind
</UL>

<P><STRONG><a name="[6d5]"></a>m_tb_key_create_end</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, m_tb_key.o(i.m_tb_key_create_end))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_friend_finished_cb
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_finished_cb
</UL>

<P><STRONG><a name="[6ca]"></a>m_tb_key_create_start</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, m_tb_key.o(i.m_tb_key_create_start))
<BR><BR>[Called By]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_update
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_add
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_app_update
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_app_add
</UL>

<P><STRONG><a name="[87]"></a>m_tb_key_finished_cb</STRONG> (Thumb, 554 bytes, Stack size 32 bytes, m_tb_key.o(i.m_tb_key_finished_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = m_tb_key_finished_cb &rArr; m_bcn_subnet_update_ind &rArr; m_bcn_adv_tx_check &rArr; m_bcn_prep_secure_bcn &rArr; m_bcn_insert_encrypt_queue &rArr; m_tb_sec_cmac_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_malloc
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_ind
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_k3_start
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_k2_start
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_k1_start
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_subnet_update_ind
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_nid_tbl_add
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_create_end
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_aid_tbl_add
</UL>
<BR>[Address Reference Count : 5]<UL><LI> m_tb_key.o(i.m_tb_key_finished_cb)
<LI> m_tb_key.o(i.m_tb_key_app_add)
<LI> m_tb_key.o(i.m_tb_key_app_update)
<LI> m_tb_key.o(i.m_tb_key_net_add)
<LI> m_tb_key.o(i.m_tb_key_net_update)
</UL>
<P><STRONG><a name="[8b]"></a>m_tb_key_friend_finished_cb</STRONG> (Thumb, 356 bytes, Stack size 32 bytes, m_tb_key.o(i.m_tb_key_friend_finished_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = m_tb_key_friend_finished_cb &rArr; m_tb_sec_k2_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_malloc
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_k2_start
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_friend_nid_tbl_add
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_create_end
</UL>
<BR>[Address Reference Count : 3]<UL><LI> m_tb_key.o(i.m_tb_key_finished_cb)
<LI> m_tb_key.o(i.m_tb_key_friend_finished_cb)
<LI> m_tb_key.o(i.m_tb_key_friend_new_ind)
</UL>
<P><STRONG><a name="[6d9]"></a>m_tb_key_friend_get_cred</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, m_tb_key.o(i.m_tb_key_friend_get_cred))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = m_tb_key_friend_get_cred
</UL>
<BR>[Called By]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_friend_get_nid
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_friend_get_key
</UL>

<P><STRONG><a name="[8c]"></a>m_tb_key_friend_k2_ready_cb</STRONG> (Thumb, 128 bytes, Stack size 20 bytes, m_tb_key.o(i.m_tb_key_friend_k2_ready_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = m_tb_key_friend_k2_ready_cb
</UL>
<BR>[Address Reference Count : 3]<UL><LI> m_tb_key.o(i.m_tb_key_finished_cb)
<LI> m_tb_key.o(i.m_tb_key_friend_finished_cb)
<LI> m_tb_key.o(i.m_tb_key_friend_new_ind)
</UL>
<P><STRONG><a name="[6d8]"></a>m_tb_key_friend_nid_tbl_add</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, m_tb_key.o(i.m_tb_key_friend_nid_tbl_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_tb_key_friend_nid_tbl_add
</UL>
<BR>[Called By]<UL><LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_friend_revoke_old
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_friend_finished_cb
</UL>

<P><STRONG><a name="[6d7]"></a>m_tb_key_friend_nid_tbl_del</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, m_tb_key.o(i.m_tb_key_friend_nid_tbl_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_tb_key_friend_nid_tbl_del
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_friend_end_ind
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_friend_revoke_old
</UL>

<P><STRONG><a name="[6da]"></a>m_tb_key_friend_revoke_old</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, m_tb_key.o(i.m_tb_key_friend_revoke_old))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = m_tb_key_friend_revoke_old &rArr; m_tb_key_friend_nid_tbl_del
</UL>
<BR>[Calls]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_free
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_friend_nid_tbl_del
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_friend_nid_tbl_add
</UL>
<BR>[Called By]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_revoke_old
</UL>

<P><STRONG><a name="[89]"></a>m_tb_key_k1_ready_cb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, m_tb_key.o(i.m_tb_key_k1_ready_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_tb_key_k1_ready_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_tb_key.o(i.m_tb_key_finished_cb)
</UL>
<P><STRONG><a name="[8d]"></a>m_tb_key_k2_ready_cb</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, m_tb_key.o(i.m_tb_key_k2_ready_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_tb_key_k2_ready_cb
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m_tb_key.o(i.m_tb_key_net_add)
<LI> m_tb_key.o(i.m_tb_key_net_update)
</UL>
<P><STRONG><a name="[8a]"></a>m_tb_key_k3_ready_cb</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, m_tb_key.o(i.m_tb_key_k3_ready_cb))
<BR>[Address Reference Count : 1]<UL><LI> m_tb_key.o(i.m_tb_key_finished_cb)
</UL>
<P><STRONG><a name="[88]"></a>m_tb_key_k4_ready_cb</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, m_tb_key.o(i.m_tb_key_k4_ready_cb))
<BR>[Address Reference Count : 2]<UL><LI> m_tb_key.o(i.m_tb_key_app_add)
<LI> m_tb_key.o(i.m_tb_key_app_update)
</UL>
<P><STRONG><a name="[6d3]"></a>m_tb_key_nid_tbl_add</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, m_tb_key.o(i.m_tb_key_nid_tbl_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = m_tb_key_nid_tbl_add
</UL>
<BR>[Called By]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_revoke_old
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_finished_cb
</UL>

<P><STRONG><a name="[6db]"></a>m_tb_key_nid_tbl_del</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, m_tb_key.o(i.m_tb_key_nid_tbl_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_tb_key_nid_tbl_del
</UL>
<BR>[Called By]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_revoke_old
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_delete
</UL>

<P><STRONG><a name="[6fc]"></a>m_tb_timer_insert</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, m_tb_timer.o(i.m_tb_timer_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = m_tb_timer_insert &rArr; m_tb_timer_prog &rArr; m_al_timer_get_delay &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_front (via Veneer)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_insert_before (via Veneer)
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_prog
</UL>
<BR>[Called By]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_set
</UL>

<P><STRONG><a name="[6fb]"></a>m_tb_timer_prog</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, m_tb_timer.o(i.m_tb_timer_prog))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = m_tb_timer_prog &rArr; m_al_timer_get_delay &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_timer_set
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_timer_get_delay
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_timer_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_remove
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_insert
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_expired
</UL>

<P><STRONG><a name="[6f9]"></a>m_tb_timer_remove</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, m_tb_timer.o(i.m_tb_timer_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = m_tb_timer_remove &rArr; m_tb_timer_prog &rArr; m_al_timer_get_delay &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_extract (via Veneer)
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_prog
</UL>
<BR>[Called By]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_set
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_clear
</UL>

<P><STRONG><a name="[38]"></a>m_api_bearer_operation_close_cb</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, m_api.o(i.m_api_bearer_operation_close_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = m_api_bearer_operation_close_cb &rArr; m_lay_proxy_state_set &rArr; m_lay_proxy_bearer_adv_ctrl &rArr; m_lay_proxy_adv_data_set &rArr; m_tb_sec_rand_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_is_feature_sup
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_set_enabled
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_prov_state
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_bearer_gatt_stop
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_state_set
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_stop_tx_unprov_bcn
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_stop_tx_security_bcn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_api.o(i.m_api_disable)
</UL>
<P><STRONG><a name="[39]"></a>m_api_bearer_operation_open_cb</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, m_api.o(i.m_api_bearer_operation_open_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = m_api_bearer_operation_open_cb &rArr; m_bcn_state_update &rArr; m_bcn_adv_tx_check &rArr; m_bcn_prep_secure_bcn &rArr; m_bcn_insert_encrypt_queue &rArr; m_tb_sec_cmac_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_is_feature_sup
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_set_node_identity
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_next
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_set_enabled
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_prov_state
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_start
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_bearer_gatt_start
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_state_update
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_restart_tx_unprov_bcn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_api.o(i.m_api_enable)
</UL>
<P><STRONG><a name="[3a]"></a>m_api_stored_info_load_cb</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m_api.o(i.m_api_stored_info_load_cb))
<BR>[Address Reference Count : 1]<UL><LI> m_api.o(i.m_api_load_stored_info)
</UL>
<P><STRONG><a name="[1cc]"></a>hci_auth_payl_to_exp_evt_handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gapc_hci.o(i.hci_auth_payl_to_exp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hci_auth_payl_to_exp_evt_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send_basic (via Veneer)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_dest_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1c1]"></a>hci_cmd_stat_event_handler</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, gapc_hci.o(i.hci_cmd_stat_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = hci_cmd_stat_event_handler &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_error_evt
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_reschedule_operation
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1ca]"></a>hci_disc_cmp_evt_handler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, gapc_hci.o(i.hci_disc_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = hci_disc_cmp_evt_handler &rArr; gapm_con_cleanup &rArr; l2cm_cleanup &rArr; l2cc_cleanup &rArr; l2cc_op_complete &rArr; l2cc_send_cmp_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_con_cleanup
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_error_evt
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_disconect_ind
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_dest_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1cd]"></a>hci_enc_chg_evt_handler</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gapc_hci.o(i.hci_enc_chg_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = hci_enc_chg_evt_handler &rArr; smpc_handle_enc_change_evt &rArr; smpc_tkdp_rcp_start &rArr; smpc_tkdp_rcp_continue &rArr; smpc_pairing_end &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_handle_enc_change_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1ce]"></a>hci_enc_key_refr_evt_handler</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gapc_hci.o(i.hci_enc_key_refr_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = hci_enc_key_refr_evt_handler &rArr; smpc_handle_enc_change_evt &rArr; smpc_tkdp_rcp_start &rArr; smpc_tkdp_rcp_continue &rArr; smpc_pairing_end &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_handle_enc_change_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1c4]"></a>hci_le_con_update_cmp_evt_handler</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, gapc_hci.o(i.hci_le_con_update_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hci_le_con_update_cmp_evt_handler &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_reschedule_operation
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_dest_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1c6]"></a>hci_le_data_len_chg_evt_handler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gapc_hci.o(i.hci_le_data_len_chg_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hci_le_data_len_chg_evt_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_dest_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1c9]"></a>hci_le_ltk_request_evt_handler</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, gapc_hci.o(i.hci_le_ltk_request_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = hci_le_ltk_request_evt_handler &rArr; smpc_send_ltk_req_rsp &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_operation
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_ltk_req_rsp
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_secure_connections_enabled
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_stk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1c7]"></a>hci_le_phy_upd_cmp_evt_handler</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, gapc_hci.o(i.hci_le_phy_upd_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = hci_le_phy_upd_cmp_evt_handler &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_operation
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_dest_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1be]"></a>hci_le_rd_phy_cmd_cmp_evt_handler</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, gapc_hci.o(i.hci_le_rd_phy_cmd_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = hci_le_rd_phy_cmd_cmp_evt_handler &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_dest_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1c3]"></a>hci_le_rd_rem_feats_cmp_evt_handler</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, gapc_hci.o(i.hci_le_rd_rem_feats_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = hci_le_rd_rem_feats_cmp_evt_handler &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_requester
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1c5]"></a>hci_le_rem_con_param_req_evt_handler</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, gapc_hci.o(i.hci_le_rem_con_param_req_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hci_le_rem_con_param_req_evt_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1bd]"></a>hci_le_set_data_len_cmd_cmp_evt_handler</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gapc_hci.o(i.hci_le_set_data_len_cmd_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hci_le_set_data_len_cmd_cmp_evt_handler &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1c2]"></a>hci_le_start_enc_stat_evt_handler</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gapc_hci.o(i.hci_le_start_enc_stat_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hci_le_start_enc_stat_evt_handler &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1bb]"></a>hci_rd_auth_payl_to_cmd_cmp_evt_handler</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, gapc_hci.o(i.hci_rd_auth_payl_to_cmd_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hci_rd_auth_payl_to_cmd_cmp_evt_handler &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_requester
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1ba]"></a>hci_rd_chnl_map_cmd_cmp_evt_handler</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, gapc_hci.o(i.hci_rd_chnl_map_cmd_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hci_rd_chnl_map_cmd_cmp_evt_handler &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_requester
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1cb]"></a>hci_rd_rem_ver_info_cmp_evt_handler</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, gapc_hci.o(i.hci_rd_rem_ver_info_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = hci_rd_rem_ver_info_cmp_evt_handler &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_requester
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1b9]"></a>hci_rd_rssi_cmd_cmp_evt_handler</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, gapc_hci.o(i.hci_rd_rssi_cmd_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hci_rd_rssi_cmd_cmp_evt_handler &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_requester
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1c0]"></a>hci_vs_set_pref_slave_latency_cmd_cmp_evt_handler</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gapc_hci.o(i.hci_vs_set_pref_slave_latency_cmd_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hci_vs_set_pref_slave_latency_cmd_cmp_evt_handler &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1bc]"></a>hci_wr_auth_payl_to_cmd_cmp_evt_handler</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gapc_hci.o(i.hci_wr_auth_payl_to_cmd_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hci_wr_auth_payl_to_cmd_cmp_evt_handler &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1d0]"></a>l2c_code_conn_param_upd_req_handler</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, gapc_sig.o(i.l2c_code_conn_param_upd_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = l2c_code_conn_param_upd_req_handler &rArr; gapc_sig_send_param_resp &rArr; l2cc_pdu_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_sig_send_param_resp
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_update_sanity
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_sig.o(.constdata)
</UL>
<P><STRONG><a name="[1d1]"></a>l2c_code_conn_param_upd_resp_handler</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gapc_sig.o(i.l2c_code_conn_param_upd_resp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = l2c_code_conn_param_upd_resp_handler &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear (via Veneer)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_operation_ptr
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_sig.o(.constdata)
</UL>
<P><STRONG><a name="[1cf]"></a>l2c_code_reject_handler</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, gapc_sig.o(i.l2c_code_reject_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = l2c_code_reject_handler &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_operation_ptr
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_sig.o(.constdata)
</UL>
<P><STRONG><a name="[420]"></a>gapm_adv_check_data_sanity</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, gapm_adv.o(i.gapm_adv_check_data_sanity))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gapm_adv_check_data_sanity
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_adv_data_cmd_handler
</UL>

<P><STRONG><a name="[421]"></a>gapm_adv_check_param</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, gapm_adv.o(i.gapm_adv_check_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapm_adv_check_param
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_address_type
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_create
</UL>

<P><STRONG><a name="[22]"></a>gapm_adv_delete</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gapm_adv.o(i.gapm_adv_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapm_adv_delete &rArr; gapm_adv_send_hci_le_rmv_adv_set_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_send_hci_le_rmv_adv_set_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_adv.o(i.gapm_adv_create)
</UL>
<P><STRONG><a name="[424]"></a>gapm_adv_send_hci_le_rmv_adv_set_cmd</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gapm_adv.o(i.gapm_adv_send_hci_le_rmv_adv_set_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapm_adv_send_hci_le_rmv_adv_set_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_cmd_cmp_evt_creating_handler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_delete
</UL>

<P><STRONG><a name="[425]"></a>gapm_adv_send_hci_le_set_ext_adv_data_cmd</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, gapm_adv.o(i.gapm_adv_send_hci_le_set_ext_adv_data_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gapm_adv_send_hci_le_set_ext_adv_data_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_set_data
</UL>

<P><STRONG><a name="[426]"></a>gapm_adv_send_hci_le_set_ext_adv_en_cmd</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, gapm_adv.o(i.gapm_adv_send_hci_le_set_ext_adv_en_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapm_adv_send_hci_le_set_ext_adv_en_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_cmd_cmp_evt_starting_handler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_stop
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_start
</UL>

<P><STRONG><a name="[423]"></a>gapm_adv_send_hci_le_set_ext_adv_param_cmd</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, gapm_adv.o(i.gapm_adv_send_hci_le_set_ext_adv_param_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gapm_adv_send_hci_le_set_ext_adv_param_cmd &rArr; gapm_actv_get_hci_own_addr_type
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller (via Veneer)
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_address_type
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_get_hci_own_addr_type
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_create
</UL>

<P><STRONG><a name="[427]"></a>gapm_adv_send_hci_le_set_ext_scan_rsp_data_cmd</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, gapm_adv.o(i.gapm_adv_send_hci_le_set_ext_scan_rsp_data_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gapm_adv_send_hci_le_set_ext_scan_rsp_data_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_set_data
</UL>

<P><STRONG><a name="[428]"></a>gapm_adv_send_hci_le_set_per_adv_data_cmd</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, gapm_adv.o(i.gapm_adv_send_hci_le_set_per_adv_data_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gapm_adv_send_hci_le_set_per_adv_data_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_set_data
</UL>

<P><STRONG><a name="[429]"></a>gapm_adv_send_hci_le_set_per_adv_en_cmd</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gapm_adv.o(i.gapm_adv_send_hci_le_set_per_adv_en_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapm_adv_send_hci_le_set_per_adv_en_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_cmd_cmp_evt_adv_handler
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_cmd_cmp_evt_starting_handler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_stop
</UL>

<P><STRONG><a name="[42a]"></a>gapm_adv_set_data</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, gapm_adv.o(i.gapm_adv_set_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gapm_adv_set_data &rArr; gapm_adv_send_hci_le_set_ext_scan_rsp_data_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_send_hci_le_set_per_adv_data_cmd
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_send_hci_le_set_ext_scan_rsp_data_cmd
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_send_hci_le_set_ext_adv_data_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_adv_data_cmd_handler
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_cmd_cmp_evt_adv_handler
</UL>

<P><STRONG><a name="[20]"></a>gapm_adv_start</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, gapm_adv.o(i.gapm_adv_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gapm_adv_start &rArr; gapm_adv_send_hci_le_set_ext_adv_en_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_send_hci_le_set_ext_adv_en_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_adv.o(i.gapm_adv_create)
</UL>
<P><STRONG><a name="[21]"></a>gapm_adv_stop</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gapm_adv.o(i.gapm_adv_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapm_adv_stop &rArr; gapm_adv_send_hci_le_set_per_adv_en_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_send_hci_le_set_per_adv_en_cmd
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_send_hci_le_set_ext_adv_en_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_adv.o(i.gapm_adv_create)
</UL>
<P><STRONG><a name="[4b2]"></a>hci_le_cmd_cmp_evt_creating_handler</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, gapm_adv.o(i.hci_le_cmd_cmp_evt_creating_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = hci_le_cmd_cmp_evt_creating_handler &rArr; gapm_actv_created &rArr; gapm_addr_set_rand_addr &rArr; gapm_addr_fsm &rArr; gapm_addr_renew_next_addr &rArr;  gapm_addr_fsm (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller (via Veneer)
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_get_local_addr
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_created
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_send_hci_le_rmv_adv_set_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_cmd_cmp_evt_adv_handler
</UL>

<P><STRONG><a name="[4b3]"></a>hci_le_cmd_cmp_evt_starting_handler</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, gapm_adv.o(i.hci_le_cmd_cmp_evt_starting_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hci_le_cmd_cmp_evt_starting_handler &rArr; gapm_actv_started &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_started
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_send_hci_le_set_per_adv_en_cmd
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_send_hci_le_set_ext_adv_en_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_cmd_cmp_evt_adv_handler
</UL>

<P><STRONG><a name="[44a]"></a>gapm_op_reset_continue</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, gapm_cfg.o(i.gapm_op_reset_continue))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gapm_op_reset_continue &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller (via Veneer)
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_basic_cmd_send_2_controller (via Veneer)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cm_get_nb_buffer_available
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_buff_size_cmd_cmp_evt_handler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_bd_addr_cmd_cmp_evt_handler
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_max_adv_data_len_cmd_cmp_evt_handler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_nb_supp_adv_sets_cmd_cmp_evt_handler
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_buff_size_cmd_cmp_evt_handler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_basic_cmd_cmp_evt_cfg_handler
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_reset_cmd_handler
</UL>

<P><STRONG><a name="[44c]"></a>gapm_op_setup_continue</STRONG> (Thumb, 298 bytes, Stack size 24 bytes, gapm_cfg.o(i.gapm_op_setup_continue))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gapm_op_setup_continue &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller (via Veneer)
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_basic_cmd_send_2_controller (via Veneer)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_bd_addr_cmd_cmp_evt_handler
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_local_p256_public_key_cmp_evt_handler
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_basic_cmd_cmp_evt_rl_cfg_handler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_basic_cmd_cmp_evt_cfg_handler
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_dev_config_cmd_handler
</UL>

<P><STRONG><a name="[25]"></a>gapm_init_delete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gapm_init.o(i.gapm_init_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gapm_init_delete &rArr; gapm_actv_deleted &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_deleted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_init.o(i.gapm_init_create)
</UL>
<P><STRONG><a name="[446]"></a>gapm_init_send_hci_le_ext_create_con_cmd</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, gapm_init.o(i.gapm_init_send_hci_le_ext_create_con_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gapm_init_send_hci_le_ext_create_con_cmd &rArr; gapm_actv_get_hci_own_addr_type
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller (via Veneer)
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_get_hci_own_addr_type
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init_connection_ind
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init_start
</UL>

<P><STRONG><a name="[23]"></a>gapm_init_start</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, gapm_init.o(i.gapm_init_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gapm_init_start &rArr; gapm_init_send_hci_le_ext_create_con_cmd &rArr; gapm_actv_get_hci_own_addr_type
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set (via Veneer)
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init_send_hci_le_ext_create_con_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_init.o(i.gapm_init_create)
</UL>
<P><STRONG><a name="[24]"></a>gapm_init_stop</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gapm_init.o(i.gapm_init_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapm_init_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear (via Veneer)
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_basic_cmd_send_2_controller (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_init.o(i.gapm_init_create)
</UL>
<P><STRONG><a name="[448]"></a>gapm_list_add_next_entry</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, gapm_list.o(i.gapm_list_add_next_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapm_list_add_next_entry
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_cmd_cmp_evt_list_handler
</UL>

<P><STRONG><a name="[449]"></a>gapm_list_send_list_size_ind</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gapm_list.o(i.gapm_list_send_list_size_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapm_list_send_list_size_ind
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_requester
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_wlst_size_cmd_cmp_evt_handler
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_ral_size_cmd_cmp_evt_handler
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_pal_size_cmd_cmp_evt_handler
</UL>

<P><STRONG><a name="[28]"></a>gapm_per_sync_delete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gapm_per_sync.o(i.gapm_per_sync_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gapm_per_sync_delete &rArr; gapm_actv_deleted &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_deleted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_per_sync.o(i.gapm_per_sync_create)
</UL>
<P><STRONG><a name="[44f]"></a>gapm_per_sync_get_activity</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, gapm_per_sync.o(i.gapm_per_sync_get_activity))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gapm_per_sync_get_activity
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_per_adv_sync_lost_evt_handler
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_per_adv_sync_est_evt_handler
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_per_adv_report_evt_handler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_per_sync_start
</UL>

<P><STRONG><a name="[44e]"></a>gapm_per_sync_send_adv_report_ind</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, gapm_per_sync.o(i.gapm_per_sync_send_adv_report_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gapm_per_sync_send_adv_report_ind
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_per_adv_report_evt_handler
</UL>

<P><STRONG><a name="[26]"></a>gapm_per_sync_start</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, gapm_per_sync.o(i.gapm_per_sync_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = gapm_per_sync_start &rArr; gapm_per_sync_get_activity
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller (via Veneer)
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_per_sync_get_activity
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_per_sync.o(i.gapm_per_sync_create)
</UL>
<P><STRONG><a name="[27]"></a>gapm_per_sync_stop</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gapm_per_sync.o(i.gapm_per_sync_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapm_per_sync_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller (via Veneer)
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_basic_cmd_send_2_controller (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_per_sync.o(i.gapm_per_sync_create)
</UL>
<P><STRONG><a name="[458]"></a>gapm_scan_add_to_filter</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, gapm_scan.o(i.gapm_scan_add_to_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gapm_scan_add_to_filter
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_scan_filter_packet
</UL>

<P><STRONG><a name="[457]"></a>gapm_scan_clear_fragments</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gapm_scan.o(i.gapm_scan_clear_fragments))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gapm_scan_clear_fragments
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_ext_adv_report_evt_handler
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_scan_actv_clean
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_scan_store_fragment
</UL>

<P><STRONG><a name="[2b]"></a>gapm_scan_delete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gapm_scan.o(i.gapm_scan_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gapm_scan_delete &rArr; gapm_actv_deleted &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_deleted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_scan.o(i.gapm_scan_create)
</UL>
<P><STRONG><a name="[459]"></a>gapm_scan_filter_packet</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, gapm_scan.o(i.gapm_scan_filter_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gapm_scan_filter_packet &rArr; gapm_scan_add_to_filter
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_scan_add_to_filter
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_scan_send_adv_report_ind
</UL>

<P><STRONG><a name="[45a]"></a>gapm_scan_send_adv_report_ind</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, gapm_scan.o(i.gapm_scan_send_adv_report_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gapm_scan_send_adv_report_ind &rArr; gapm_scan_filter_packet &rArr; gapm_scan_add_to_filter
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_scan_filter_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_ext_adv_report_evt_handler
</UL>

<P><STRONG><a name="[45b]"></a>gapm_scan_send_hci_le_set_ext_scan_en_cmd</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, gapm_scan.o(i.gapm_scan_send_hci_le_set_ext_scan_en_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gapm_scan_send_hci_le_set_ext_scan_en_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_cmd_cmp_evt_scan_handler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_scan_stop
</UL>

<P><STRONG><a name="[45c]"></a>gapm_scan_send_hci_le_set_ext_scan_param_cmd</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, gapm_scan.o(i.gapm_scan_send_hci_le_set_ext_scan_param_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gapm_scan_send_hci_le_set_ext_scan_param_cmd &rArr; gapm_actv_get_hci_own_addr_type
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller (via Veneer)
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_actv_get_hci_own_addr_type
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_scan_start
</UL>

<P><STRONG><a name="[29]"></a>gapm_scan_start</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, gapm_scan.o(i.gapm_scan_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gapm_scan_start &rArr; gapm_scan_send_hci_le_set_ext_scan_param_cmd &rArr; gapm_actv_get_hci_own_addr_type
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_scan_send_hci_le_set_ext_scan_param_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_scan.o(i.gapm_scan_create)
</UL>
<P><STRONG><a name="[2a]"></a>gapm_scan_stop</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gapm_scan.o(i.gapm_scan_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gapm_scan_stop &rArr; gapm_scan_send_hci_le_set_ext_scan_en_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_scan_send_hci_le_set_ext_scan_en_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_scan.o(i.gapm_scan_create)
</UL>
<P><STRONG><a name="[45d]"></a>gapm_scan_store_fragment</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, gapm_scan.o(i.gapm_scan_store_fragment))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gapm_scan_store_fragment &rArr; gapm_scan_clear_fragments
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_scan_clear_fragments
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_ext_adv_report_evt_handler
</UL>

<P><STRONG><a name="[462]"></a>gapm_smp_encrypt_req</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gapm_smp.o(i.gapm_smp_encrypt_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gapm_smp_encrypt_req
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_use_enc_block_cmd_handler
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_smp_resolv_op_cont
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_smp_rand_rsp
</UL>

<P><STRONG><a name="[2c]"></a>gapm_smp_encrypt_rsp</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, gapm_smp.o(i.gapm_smp_encrypt_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gapm_smp_encrypt_rsp &rArr; gapm_smp_resolv_op_cont &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_requester
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_smp_resolv_op_cont
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_smp.o(i.gapm_smp_encrypt_req)
</UL>
<P><STRONG><a name="[43d]"></a>gapm_smp_rand_req</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gapm_smp.o(i.gapm_smp_rand_req))
<BR><BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_rand (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_use_enc_block_cmd_handler
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_gen_rand_addr_cmd_handler
</UL>

<P><STRONG><a name="[2d]"></a>gapm_smp_rand_rsp</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, gapm_smp.o(i.gapm_smp_rand_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gapm_smp_rand_rsp &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_requester
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_irk
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_smp_encrypt_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_smp.o(i.gapm_smp_rand_req)
</UL>
<P><STRONG><a name="[456]"></a>gapm_smp_resolv_op_cont</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, gapm_smp.o(i.gapm_smp_resolv_op_cont))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gapm_smp_resolv_op_cont &rArr; gapm_send_complete_evt &rArr; gapm_operation_cleanup &rArr; gapm_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_requester
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_smp_encrypt_req
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_resolv_addr_cmd_handler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_smp_encrypt_rsp
</UL>

<P><STRONG><a name="[1dd]"></a>smpc_construcpublic_key_t_pdu</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, smpc_util.o(i.smpc_construcpublic_key_t_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpc_construcpublic_key_t_pdu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[1de]"></a>smpc_construct_dhkey_check_pdu</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, smpc_util.o(i.smpc_construct_dhkey_check_pdu))
<BR><BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[1d7]"></a>smpc_construct_enc_info_pdu</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, smpc_util.o(i.smpc_construct_enc_info_pdu))
<BR><BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[1da]"></a>smpc_construct_id_addr_info_pdu</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, smpc_util.o(i.smpc_construct_id_addr_info_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpc_construct_id_addr_info_pdu
</UL>
<BR>[Calls]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_bdaddr
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_address_type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[1d9]"></a>smpc_construct_id_info_pdu</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, smpc_util.o(i.smpc_construct_id_info_pdu))
<BR><BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[1df]"></a>smpc_construct_keypress_notification_pdu</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, smpc_util.o(i.smpc_construct_keypress_notification_pdu))
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[1d8]"></a>smpc_construct_mst_id_pdu</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, smpc_util.o(i.smpc_construct_mst_id_pdu))
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[1d4]"></a>smpc_construct_pair_cfm_pdu</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, smpc_util.o(i.smpc_construct_pair_cfm_pdu))
<BR><BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[1d6]"></a>smpc_construct_pair_fail_pdu</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, smpc_util.o(i.smpc_construct_pair_fail_pdu))
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[1d5]"></a>smpc_construct_pair_rand_pdu</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, smpc_util.o(i.smpc_construct_pair_rand_pdu))
<BR><BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[1d2]"></a>smpc_construct_pair_req_pdu</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, smpc_util.o(i.smpc_construct_pair_req_pdu))
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[1d3]"></a>smpc_construct_pair_rsp_pdu</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, smpc_util.o(i.smpc_construct_pair_rsp_pdu))
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[1dc]"></a>smpc_construct_sec_req_pdu</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, smpc_util.o(i.smpc_construct_sec_req_pdu))
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[1db]"></a>smpc_construct_sign_info_pdu</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, smpc_util.o(i.smpc_construct_sign_info_pdu))
<BR><BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[1ec]"></a>smpc_recv_dhkey_check_pdu</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, smpc_util.o(i.smpc_recv_dhkey_check_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = smpc_recv_dhkey_check_pdu &rArr; smpc_initiate_dhkey_verification &rArr; smpc_f6_init &rArr; smpc_aes_cmac_init &rArr; smpc_send_use_enc_block_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_initiate_dhkey_verification
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_initiate_dhkey_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[1e5]"></a>smpc_recv_enc_info_pdu</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, smpc_util.o(i.smpc_recv_enc_info_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = smpc_recv_enc_info_pdu &rArr; smpc_tkdp_rcp_continue &rArr; smpc_pairing_end &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_rcp_continue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[1e8]"></a>smpc_recv_id_addr_info_pdu</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, smpc_util.o(i.smpc_recv_id_addr_info_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = smpc_recv_id_addr_info_pdu &rArr; smpc_tkdp_rcp_continue &rArr; smpc_pairing_end &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_rcp_continue
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_ind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[1e7]"></a>smpc_recv_id_info_pdu</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, smpc_util.o(i.smpc_recv_id_info_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = smpc_recv_id_info_pdu &rArr; smpc_tkdp_rcp_continue &rArr; smpc_pairing_end &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_rcp_continue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[1ed]"></a>smpc_recv_keypress_notification_pdu</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, smpc_util.o(i.smpc_recv_keypress_notification_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = smpc_recv_keypress_notification_pdu &rArr; smpc_key_press_notification_ind
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set (via Veneer)
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_active (via Veneer)
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_key_press_notification_ind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[1e6]"></a>smpc_recv_mst_id_pdu</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, smpc_util.o(i.smpc_recv_mst_id_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = smpc_recv_mst_id_pdu &rArr; smpc_tkdp_rcp_continue &rArr; smpc_pairing_end &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_enc_keysize_get
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_rcp_continue
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_ind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[1e2]"></a>smpc_recv_pair_cfm_pdu</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, smpc_util.o(i.smpc_recv_pair_cfm_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = smpc_recv_pair_cfm_pdu &rArr; smpc_pdu_send &rArr; l2cc_pdu_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_secure_connections_enabled
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_rand
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[1e4]"></a>smpc_recv_pair_fail_pdu</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, smpc_util.o(i.smpc_recv_pair_fail_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = smpc_recv_pair_fail_pdu &rArr; smpc_pairing_end &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_ind
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_end
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[1e3]"></a>smpc_recv_pair_rand_pdu</STRONG> (Thumb, 496 bytes, Stack size 32 bytes, smpc_util.o(i.smpc_recv_pair_rand_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = smpc_recv_pair_rand_pdu &rArr; smpc_init_mac_key_calculation &rArr; smpc_f5_init &rArr; smpc_aes_cmac_init &rArr; smpc_send_use_enc_block_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_local_public_key
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_init_mac_key_calculation
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_get_next_passkey_bit
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_rand
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_e1
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_g2_init
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_f4_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[1e0]"></a>smpc_recv_pair_req_pdu</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, smpc_util.o(i.smpc_recv_pair_req_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = smpc_recv_pair_req_pdu &rArr; smpc_pdu_send &rArr; l2cc_pdu_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_is_sec_con_pairing_supp
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_is_legacy_pairing_supp
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_ind
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_check_repeated_attempts
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[1e1]"></a>smpc_recv_pair_rsp_pdu</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, smpc_util.o(i.smpc_recv_pair_rsp_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = smpc_recv_pair_rsp_pdu &rArr; smpc_pairing_end &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_is_legacy_pairing_supp
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_local_public_key
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_req_ind
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_secure_connections_enabled
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_is_sec_mode_reached
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_get_key_sec_prop
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_rand
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_check_pairing_feat
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_check_max_key_size
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_check_key_distrib
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_end
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[1eb]"></a>smpc_recv_public_key_pdu</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, smpc_util.o(i.smpc_recv_public_key_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = smpc_recv_public_key_pdu &rArr; smpc_pdu_send &rArr; l2cc_pdu_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_printf (via Veneer)
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_local_public_key
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_req_ind
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_gen_dh_key_cmd
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_rand
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[1ea]"></a>smpc_recv_sec_req_pdu</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, smpc_util.o(i.smpc_recv_sec_req_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = smpc_recv_sec_req_pdu &rArr; smpc_pdu_send &rArr; l2cc_pdu_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_is_legacy_pairing_supp
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_dest_task
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_ind
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_check_repeated_attempts
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[1e9]"></a>smpc_recv_sign_info_pdu</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, smpc_util.o(i.smpc_recv_sign_info_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = smpc_recv_sign_info_pdu &rArr; smpc_tkdp_rcp_continue &rArr; smpc_pairing_end &rArr; gapc_send_complete_evt &rArr; gapc_operation_cleanup &rArr; smpc_clear_timeout_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_rcp_continue
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_ind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[1f8]"></a>attc_err_rsp_handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, attc.o(i.attc_err_rsp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = attc_err_rsp_handler &rArr; gattc_send_complete_evt &rArr; gattc_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attc.o(.constdata)
</UL>
<P><STRONG><a name="[1ee]"></a>attc_exc_mtu_rsp_handler</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, attc.o(i.attc_exc_mtu_rsp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = attc_exc_mtu_rsp_handler &rArr; gattc_send_complete_evt &rArr; gattc_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_set_mtu
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_max_mtu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attc.o(.constdata)
</UL>
<P><STRONG><a name="[1f7]"></a>attc_exe_wr_rsp_handler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, attc.o(i.attc_exe_wr_rsp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = attc_exe_wr_rsp_handler &rArr; gattc_send_complete_evt &rArr; gattc_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation_ptr
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attc.o(.constdata)
</UL>
<P><STRONG><a name="[1f0]"></a>attc_find_by_type_rsp_handler</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, attc.o(i.attc_find_by_type_rsp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = attc_find_by_type_rsp_handler &rArr; gattc_send_complete_evt &rArr; gattc_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_reschedule_operation
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_requester
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation_ptr
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attc.o(.constdata)
</UL>
<P><STRONG><a name="[1ef]"></a>attc_find_info_rsp_handler</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, attc.o(i.attc_find_info_rsp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = attc_find_info_rsp_handler &rArr; gattc_send_complete_evt &rArr; gattc_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_reschedule_operation
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_requester
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation_ptr
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attc.o(.constdata)
</UL>
<P><STRONG><a name="[1f9]"></a>attc_hdl_val_ntf_ind_handler</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, attc.o(i.attc_hdl_val_ntf_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = attc_hdl_val_ntf_ind_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_dest_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attc.o(.constdata)
</UL>
<P><STRONG><a name="[1f6]"></a>attc_prep_wr_rsp_handler</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, attc.o(i.attc_prep_wr_rsp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = attc_prep_wr_rsp_handler &rArr; gattc_send_complete_evt &rArr; gattc_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_reschedule_operation
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation_ptr
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attc.o(.constdata)
</UL>
<P><STRONG><a name="[1f2]"></a>attc_rd_by_grp_type_rsp_handler</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, attc.o(i.attc_rd_by_grp_type_rsp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = attc_rd_by_grp_type_rsp_handler &rArr; attm_uuid_comp &rArr; attm_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_reschedule_operation
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_requester
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation_ptr
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_uuid_comp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attc.o(.constdata)
</UL>
<P><STRONG><a name="[1f1]"></a>attc_rd_by_type_rsp_handler</STRONG> (Thumb, 616 bytes, Stack size 48 bytes, attc.o(i.attc_rd_by_type_rsp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = attc_rd_by_type_rsp_handler &rArr; attm_uuid_comp &rArr; attm_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_mtu
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_reschedule_operation
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_requester
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation_ptr
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_uuid_comp
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_att_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attc.o(.constdata)
</UL>
<P><STRONG><a name="[1f4]"></a>attc_rd_mult_rsp_handler</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, attc.o(i.attc_rd_mult_rsp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = attc_rd_mult_rsp_handler &rArr; gattc_send_complete_evt &rArr; gattc_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_requester
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation_ptr
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attc.o(.constdata)
</UL>
<P><STRONG><a name="[1f3]"></a>attc_rd_rsp_handler</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, attc.o(i.attc_rd_rsp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = attc_rd_rsp_handler &rArr; gattc_send_complete_evt &rArr; gattc_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_mtu
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_reschedule_operation
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation_ptr
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_read_ind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attc.o(.constdata)
</UL>
<P><STRONG><a name="[1f5]"></a>attc_wr_rsp_handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, attc.o(i.attc_wr_rsp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = attc_wr_rsp_handler &rArr; gattc_send_complete_evt &rArr; gattc_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attc.o(.constdata)
</UL>
<P><STRONG><a name="[1fb]"></a>l2c_code_conn_param_upd_req_handler</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, l2cc_sig.o(i.l2c_code_conn_param_upd_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = l2c_code_conn_param_upd_req_handler &rArr; l2cc_sig_send_cmd_reject &rArr; l2cc_pdu_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_forward (via Veneer)
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_sig_send_cmd_reject
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2cc_sig.o(.constdata)
</UL>
<P><STRONG><a name="[1fc]"></a>l2c_code_conn_param_upd_resp_handler</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, l2cc_sig.o(i.l2c_code_conn_param_upd_resp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = l2c_code_conn_param_upd_resp_handler &rArr; l2cc_sig_send_cmd_reject &rArr; l2cc_pdu_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_forward (via Veneer)
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_sig_send_cmd_reject
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2cc_sig.o(.constdata)
</UL>
<P><STRONG><a name="[1fa]"></a>l2c_code_reject_handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, l2cc_sig.o(i.l2c_code_reject_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = l2c_code_reject_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_forward (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2cc_sig.o(.constdata)
</UL>
<P><STRONG><a name="[51e]"></a>m_api_basic_cmp_evt_send</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, m_api_msg.o(i.m_api_basic_cmp_evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = m_api_basic_cmp_evt_send &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_msg_send
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_loaded_cb
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_exec_cmd
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_enabled_cb
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_disabled_cb
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_model_rsp_send_cmd_handler
</UL>

<P><STRONG><a name="[55e]"></a>m_api_model_rsp_send_cmd_handler</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, m_api_msg.o(i.m_api_model_rsp_send_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = m_api_model_rsp_send_cmd_handler &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_model_rsp_send
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_basic_cmp_evt_send
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_buf_release
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_buf_data_get
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_buf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_exec_cmd
</UL>

<P><STRONG><a name="[202]"></a>m_api_msg_buf_block_freed_cb</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, m_api_msg.o(i.m_api_msg_buf_block_freed_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = m_api_msg_buf_block_freed_cb &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_msg_send
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_msg_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_api_msg.o(.constdata)
</UL>
<P><STRONG><a name="[1fe]"></a>m_api_msg_disabled_cb</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, m_api_msg.o(i.m_api_msg_disabled_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = m_api_msg_disabled_cb &rArr; m_api_basic_cmp_evt_send &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_basic_cmp_evt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_api_msg.o(.constdata)
</UL>
<P><STRONG><a name="[1fd]"></a>m_api_msg_enabled_cb</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, m_api_msg.o(i.m_api_msg_enabled_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = m_api_msg_enabled_cb &rArr; m_api_basic_cmp_evt_send &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_basic_cmp_evt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_api_msg.o(.constdata)
</UL>
<P><STRONG><a name="[560]"></a>m_api_msg_exec_cmd</STRONG> (Thumb, 676 bytes, Stack size 48 bytes, m_api_msg.o(i.m_api_msg_exec_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = m_api_msg_exec_cmd &rArr; m_api_load_stored_info &rArr; m_tb_store_load &rArr; m_tb_store_load_fsm &rArr; m_tb_store_load_states &rArr; m_tb_state_set_beacon_state &rArr; m_bcn_state_update &rArr; m_bcn_adv_tx_check &rArr; m_bcn_prep_secure_bcn &rArr; m_bcn_insert_encrypt_queue &rArr; m_tb_sec_cmac_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_model_bind
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_register_model
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_msg_send
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_msg_alloc
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_app_find
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_set_publi_param
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_delete_subscription_virt
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_delete_subscription
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_bind
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_add_subscription_virt
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_add_subscription
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_model_rsp_send_cmd_handler
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_basic_cmp_evt_send
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_set_run_time
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_proxy_ctrl
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_prov_stop_link_timeout
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_prov_pub_key_read
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_model_publish
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_lpn_stop
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_lpn_start
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_lpn_select_friend
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_load_stored_info
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_iv_upd_test_mode
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_health_status_send
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_get_run_time
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_enable
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_disable
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_buf_release
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_buf_free_block
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_buf_data_get
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_buf_alloc_block
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_buf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_msg_handler
</UL>

<P><STRONG><a name="[203]"></a>m_api_msg_loaded_cb</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, m_api_msg.o(i.m_api_msg_loaded_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = m_api_msg_loaded_cb &rArr; m_api_basic_cmp_evt_send &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_basic_cmp_evt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_api_msg.o(.constdata)
</UL>
<P><STRONG><a name="[206]"></a>m_api_msg_model_opcode_check_cb</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, m_api_msg.o(i.m_api_msg_model_opcode_check_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = m_api_msg_model_opcode_check_cb &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_msg_send
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_msg_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_api_msg.o(.constdata)
</UL>
<P><STRONG><a name="[207]"></a>m_api_msg_model_publish_period_cb</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, m_api_msg.o(i.m_api_msg_model_publish_period_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = m_api_msg_model_publish_period_cb &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_msg_send
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_msg_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_api_msg.o(.constdata)
</UL>
<P><STRONG><a name="[204]"></a>m_api_msg_model_rx_cb</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, m_api_msg.o(i.m_api_msg_model_rx_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = m_api_msg_model_rx_cb &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_msg_send
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_msg_alloc
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_buf_data_len_get
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_buf_data_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_api_msg.o(.constdata)
</UL>
<P><STRONG><a name="[205]"></a>m_api_msg_model_sent_cb</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, m_api_msg.o(i.m_api_msg_model_sent_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = m_api_msg_model_sent_cb &rArr; m_api_buf_release &rArr; m_tb_buf_release &rArr; m_tb_buf_block_free
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_msg_send
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_msg_alloc
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_buf_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_api_msg.o(.constdata)
</UL>
<P><STRONG><a name="[201]"></a>m_api_msg_prov_oob_auth_req_cb</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, m_api_msg.o(i.m_api_msg_prov_oob_auth_req_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = m_api_msg_prov_oob_auth_req_cb &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_msg_send
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_msg_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_api_msg.o(.constdata)
</UL>
<P><STRONG><a name="[200]"></a>m_api_msg_prov_param_req_cb</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, m_api_msg.o(i.m_api_msg_prov_param_req_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = m_api_msg_prov_param_req_cb &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_msg_send
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_msg_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_api_msg.o(.constdata)
</UL>
<P><STRONG><a name="[1ff]"></a>m_api_msg_prov_state_cb</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, m_api_msg.o(i.m_api_msg_prov_state_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = m_api_msg_prov_state_cb &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_msg_send
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_msg_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_api_msg.o(.constdata)
</UL>
<P><STRONG><a name="[584]"></a>m_bcn_adv_tx_check</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, m_bcn.o(i.m_bcn_adv_tx_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = m_bcn_adv_tx_check &rArr; m_bcn_prep_secure_bcn &rArr; m_bcn_insert_encrypt_queue &rArr; m_tb_sec_cmac_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_send
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_prep_secure_bcn
</UL>
<BR>[Called By]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_subnet_update_ind
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_start_tx_unprov_bcn
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_proxy_tx_check
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_cmac_finished_cb
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_cb_timer_bcn_expired
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_cb_sent
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_cb_opened
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_state_update
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_restart_tx_unprov_bcn
</UL>

<P><STRONG><a name="[592]"></a>m_bcn_buf_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, m_bcn.o(i.m_bcn_buf_init))
<BR><BR>[Called By]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_init
</UL>

<P><STRONG><a name="[589]"></a>m_bcn_buf_rts_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, m_bcn.o(i.m_bcn_buf_rts_set))
<BR><BR>[Called By]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_start_tx_unprov_bcn
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_cb_timer_bcn_expired
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_cb_opened
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_stop_tx_unprov_bcn
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_restart_tx_unprov_bcn
</UL>

<P><STRONG><a name="[20b]"></a>m_bcn_cb_closed</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, m_bcn.o(i.m_bcn_cb_closed))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = m_bcn_cb_closed &rArr; m_tb_timer_clear &rArr; m_tb_timer_remove &rArr; m_tb_timer_prog &rArr; m_al_timer_get_delay &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_bcn.o(.constdata)
</UL>
<P><STRONG><a name="[20a]"></a>m_bcn_cb_opened</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, m_bcn.o(i.m_bcn_cb_opened))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = m_bcn_cb_opened &rArr; m_bcn_proxy_tx_check &rArr; m_bcn_adv_tx_check &rArr; m_bcn_prep_secure_bcn &rArr; m_bcn_insert_encrypt_queue &rArr; m_tb_sec_cmac_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_set
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_proxy_tx_check
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_buf_rts_set
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_adv_tx_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_bcn.o(.constdata)
</UL>
<P><STRONG><a name="[209]"></a>m_bcn_cb_rx</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, m_bcn.o(i.m_bcn_cb_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = m_bcn_cb_rx &rArr; m_bcn_insert_encrypt_queue &rArr; m_tb_sec_cmac_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_get_net_from_net_id
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_acquire
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_insert_encrypt_queue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_bcn.o(.constdata)
</UL>
<P><STRONG><a name="[208]"></a>m_bcn_cb_sent</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, m_bcn.o(i.m_bcn_cb_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = m_bcn_cb_sent &rArr; m_bcn_proxy_tx_check &rArr; m_bcn_adv_tx_check &rArr; m_bcn_prep_secure_bcn &rArr; m_bcn_insert_encrypt_queue &rArr; m_tb_sec_cmac_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_proxy_tx_check
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_adv_tx_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_bcn.o(.constdata)
</UL>
<P><STRONG><a name="[3e]"></a>m_bcn_cb_timer_bcn_expired</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, m_bcn.o(i.m_bcn_cb_timer_bcn_expired))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = m_bcn_cb_timer_bcn_expired &rArr; m_bcn_adv_tx_check &rArr; m_bcn_prep_secure_bcn &rArr; m_bcn_insert_encrypt_queue &rArr; m_tb_sec_cmac_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_set
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_buf_rts_set
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_adv_tx_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_bcn.o(i.m_bcn_init)
</UL>
<P><STRONG><a name="[3d]"></a>m_bcn_cb_timer_obs_expired</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, m_bcn.o(i.m_bcn_cb_timer_obs_expired))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = m_bcn_cb_timer_obs_expired &rArr; m_tb_timer_set &rArr; m_tb_timer_insert &rArr; m_tb_timer_prog &rArr; m_al_timer_get_delay &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_bcn.o(i.m_bcn_init)
</UL>
<P><STRONG><a name="[3b]"></a>m_bcn_cmac_finished_cb</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, m_bcn.o(i.m_bcn_cmac_finished_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = m_bcn_cmac_finished_cb &rArr; m_bcn_proxy_con_start &rArr; m_bcn_proxy_tx_check &rArr; m_bcn_adv_tx_check &rArr; m_bcn_prep_secure_bcn &rArr; m_bcn_insert_encrypt_queue &rArr; m_tb_sec_cmac_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_secure_bcn_rx_ind
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_cmac_start
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_proxy_con_start
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_proxy_tx_check
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_adv_tx_check
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m_bcn.o(i.m_bcn_cmac_finished_cb)
<LI> m_bcn.o(i.m_bcn_insert_encrypt_queue)
</UL>
<P><STRONG><a name="[3c]"></a>m_bcn_cmac_ready_cb</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, m_bcn.o(i.m_bcn_cmac_ready_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = m_bcn_cmac_ready_cb &rArr; m_tb_key_net_get
</UL>
<BR>[Calls]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_get
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m_bcn.o(i.m_bcn_cmac_finished_cb)
<LI> m_bcn.o(i.m_bcn_insert_encrypt_queue)
</UL>
<P><STRONG><a name="[58d]"></a>m_bcn_insert_encrypt_queue</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, m_bcn.o(i.m_bcn_insert_encrypt_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = m_bcn_insert_encrypt_queue &rArr; m_tb_sec_cmac_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_cmac_start
</UL>
<BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_prep_secure_bcn
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_cb_rx
</UL>

<P><STRONG><a name="[586]"></a>m_bcn_prep_secure_bcn</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, m_bcn.o(i.m_bcn_prep_secure_bcn))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = m_bcn_prep_secure_bcn &rArr; m_bcn_insert_encrypt_queue &rArr; m_tb_sec_cmac_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_get_net_info
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_insert_encrypt_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_proxy_tx_check
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_adv_tx_check
</UL>

<P><STRONG><a name="[588]"></a>m_bcn_proxy_tx_check</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, m_bcn.o(i.m_bcn_proxy_tx_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = m_bcn_proxy_tx_check &rArr; m_bcn_adv_tx_check &rArr; m_bcn_prep_secure_bcn &rArr; m_bcn_insert_encrypt_queue &rArr; m_tb_sec_cmac_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_send
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_prep_secure_bcn
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_adv_tx_check
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_proxy_con_start
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_cmac_finished_cb
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_cb_sent
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_cb_opened
</UL>

<P><STRONG><a name="[585]"></a>m_bcn_send</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, m_bcn.o(i.m_bcn_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_bcn_send
</UL>
<BR>[Called By]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_proxy_tx_check
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_adv_tx_check
</UL>

<P><STRONG><a name="[20c]"></a>m_bearer_send</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, m_bearer.o(i.m_bearer_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = m_bearer_send &rArr; m_al_djob_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_acquire
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_djob_reg
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_gatt_tx_prepare
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_adv_tx_prepare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_bearer.o(.constdata)
</UL>
<P><STRONG><a name="[3f]"></a>m_bearer_send_continue</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, m_bearer.o(i.m_bearer_send_continue))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = m_bearer_send_continue &rArr; m_tb_buf_release &rArr; m_tb_buf_block_free
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_djob_reg
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_gatt_send
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_adv_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_bearer.o(i.m_bearer_init)
</UL>
<P><STRONG><a name="[20d]"></a>m_bearer_update</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, m_bearer.o(i.m_bearer_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = m_bearer_update &rArr; m_bearer_adv_update &rArr; m_bearer_adv_stopped &rArr; m_bearer_closed &rArr; m_tb_buf_release &rArr; m_tb_buf_block_free
</UL>
<BR>[Calls]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_gatt_update
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_adv_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_bearer.o(.constdata)
</UL>
<P><STRONG><a name="[601]"></a>m_fnd_hlths_buf_alloc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, m_fnd_hlths.o(i.m_fnd_hlths_buf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = m_fnd_hlths_buf_alloc &rArr; m_tb_buf_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_send_status
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_send_attention_status
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_handler_period
</UL>

<P><STRONG><a name="[210]"></a>m_fnd_hlths_cb_opcode_check</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, m_fnd_hlths.o(i.m_fnd_hlths_cb_opcode_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = m_fnd_hlths_cb_opcode_check &rArr; m_api_model_opcode_status &rArr; m_lay_access_opcode_status &rArr; m_al_djob_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_model_opcode_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_fnd_hlths.o(.constdata)
</UL>
<P><STRONG><a name="[211]"></a>m_fnd_hlths_cb_publish_period</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, m_fnd_hlths.o(i.m_fnd_hlths_cb_publish_period))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = m_fnd_hlths_cb_publish_period &rArr; m_api_send_fault_period_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_send_fault_period_ind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_fnd_hlths.o(.constdata)
</UL>
<P><STRONG><a name="[20e]"></a>m_fnd_hlths_cb_rx</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, m_fnd_hlths.o(i.m_fnd_hlths_cb_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = m_fnd_hlths_cb_rx &rArr; m_fnd_hlths_process &rArr;  m_fnd_hlths_send_status (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_copy
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_alloc
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_fnd_hlths.o(.constdata)
</UL>
<P><STRONG><a name="[20f]"></a>m_fnd_hlths_cb_sent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, m_fnd_hlths.o(i.m_fnd_hlths_cb_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = m_fnd_hlths_cb_sent &rArr; m_tb_buf_release &rArr; m_tb_buf_block_free
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_fnd_hlths.o(.constdata)
</UL>
<P><STRONG><a name="[605]"></a>m_fnd_hlths_handler_period</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, m_fnd_hlths.o(i.m_fnd_hlths_handler_period))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + In Cycle
<LI>Call Chain = m_fnd_hlths_handler_period &rArr;  m_fnd_hlths_process_next (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_send_fault_period_ind
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_period
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_send
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_process_next
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_buf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_process
</UL>

<P><STRONG><a name="[602]"></a>m_fnd_hlths_process</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, m_fnd_hlths.o(i.m_fnd_hlths_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + In Cycle
<LI>Call Chain = m_fnd_hlths_process &rArr;  m_fnd_hlths_send_status (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_send_fault_test_req_ind
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_send_fault_get_req_ind
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_send_fault_clear_ind
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_set_attention_state
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_send_status
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_send_attention_status
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_process_next
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_handler_period
</UL>
<BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_process_next
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_cb_rx
</UL>

<P><STRONG><a name="[604]"></a>m_fnd_hlths_process_next</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, m_fnd_hlths.o(i.m_fnd_hlths_process_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = m_fnd_hlths_process_next &rArr; m_fnd_hlths_process &rArr;  m_fnd_hlths_send_status (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_process
</UL>
<BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_cfm
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_send_status
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_send_attention_status
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_process
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_handler_period
</UL>

<P><STRONG><a name="[607]"></a>m_fnd_hlths_send</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, m_fnd_hlths.o(i.m_fnd_hlths_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = m_fnd_hlths_send &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_model_rsp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_send_status
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_send_attention_status
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_handler_period
</UL>

<P><STRONG><a name="[60a]"></a>m_fnd_hlths_send_attention_status</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, m_fnd_hlths.o(i.m_fnd_hlths_send_attention_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + In Cycle
<LI>Call Chain = m_fnd_hlths_send_attention_status &rArr;  m_fnd_hlths_process_next (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_attention_state
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_send
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_process_next
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_buf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_process
</UL>

<P><STRONG><a name="[603]"></a>m_fnd_hlths_send_status</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, m_fnd_hlths.o(i.m_fnd_hlths_send_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = m_fnd_hlths_send_status &rArr; m_fnd_hlths_process_next &rArr; m_fnd_hlths_process &rArr;  m_fnd_hlths_send_status (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_model_publish
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_send
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_process_next
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_buf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_status_ind
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_cfm
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_hlths_process
</UL>

<P><STRONG><a name="[4a]"></a>m_lay_access_model_check</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, m_lay_access.o(i.m_lay_access_model_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = m_lay_access_model_check &rArr; m_tb_buf_release &rArr; m_tb_buf_block_free
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_model_bind_check
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_djob_reg
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_is_dest_addr
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_nb_model
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_cb_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_access.o(i.m_lay_access_init)
</UL>
<P><STRONG><a name="[625]"></a>m_lay_access_opcode_set</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, m_lay_access.o(i.m_lay_access_opcode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = m_lay_access_opcode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_head_reserve
</UL>
<BR>[Called By]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_rsp_send
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_access_publish
</UL>

<P><STRONG><a name="[49]"></a>m_lay_access_retx_timer_cb</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, m_lay_access.o(i.m_lay_access_retx_timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = m_lay_access_retx_timer_cb &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_get_iv_seq
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_app_get
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_cb_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_access.o(i.m_lay_access_init)
</UL>
<P><STRONG><a name="[213]"></a>m_lay_access_rx</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, m_lay_access.o(i.m_lay_access_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = m_lay_access_rx &rArr; m_al_djob_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_head_release
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_acquire
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_djob_reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_access.o(.constdata)
</UL>
<P><STRONG><a name="[212]"></a>m_lay_access_sent</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, m_lay_access.o(i.m_lay_access_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = m_lay_access_sent &rArr; m_tb_timer_set &rArr; m_tb_timer_insert &rArr; m_tb_timer_prog &rArr; m_al_timer_get_delay &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_set
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_cb_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_access.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>m_lay_lpn_cb_key</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, m_lay_lpn.o(i.m_lay_lpn_cb_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = m_lay_lpn_cb_key &rArr; m_lay_lpn_send_poll &rArr; m_lay_lpn_pack &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_send_lpn_status_ind
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_send_poll
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_clean_env
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_lpn.o(i.m_lay_lpn_select_friend)
</UL>
<P><STRONG><a name="[56]"></a>m_lay_lpn_cb_subs_list_add</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, m_lay_lpn.o(i.m_lay_lpn_cb_subs_list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = m_lay_lpn_cb_subs_list_add &rArr; m_lay_lpn_send_subs_list &rArr; m_lay_lpn_pack &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_send_subs_list
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_lpn.o(i.m_lay_lpn_handler_update)
</UL>
<P><STRONG><a name="[55]"></a>m_lay_lpn_cb_subs_list_rem</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, m_lay_lpn.o(i.m_lay_lpn_cb_subs_list_rem))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = m_lay_lpn_cb_subs_list_rem &rArr; m_lay_lpn_send_subs_list &rArr; m_lay_lpn_pack &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_send_subs_list
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_lpn.o(i.m_lay_lpn_handler_update)
</UL>
<P><STRONG><a name="[5b]"></a>m_lay_lpn_cb_timer</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, m_lay_lpn.o(i.m_lay_lpn_cb_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = m_lay_lpn_cb_timer &rArr; m_lay_lpn_send_req &rArr; m_lay_lpn_pack &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_set
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_send_lpn_status_ind
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_set_lpn_state
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_send_req
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_send_poll
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_clean_env
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_lpn.o(i.m_lay_lpn_start)
</UL>
<P><STRONG><a name="[54]"></a>m_lay_lpn_cb_timer_offer</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, m_lay_lpn.o(i.m_lay_lpn_cb_timer_offer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = m_lay_lpn_cb_timer_offer &rArr; m_api_send_lpn_status_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_extract (via Veneer)
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_send_lpn_status_ind
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_clean_env
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_lpn.o(i.m_lay_lpn_handler_offer)
</UL>
<P><STRONG><a name="[66b]"></a>m_lay_lpn_check_tx_list</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, m_lay_lpn.o(i.m_lay_lpn_check_tx_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = m_lay_lpn_check_tx_list &rArr; m_tb_timer_set &rArr; m_tb_timer_insert &rArr; m_tb_timer_prog &rArr; m_al_timer_get_delay &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_set
</UL>
<BR>[Called By]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_send_subs_list
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_send_poll
</UL>

<P><STRONG><a name="[667]"></a>m_lay_lpn_clean_env</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, m_lay_lpn.o(i.m_lay_lpn_clean_env))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = m_lay_lpn_clean_env &rArr; m_tb_key_friend_end_ind &rArr; m_tb_key_friend_nid_tbl_del
</UL>
<BR>[Calls]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_free
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_friend_end_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_stop
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_start
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_cb_timer_offer
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_cb_timer
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_cb_key
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_init
</UL>

<P><STRONG><a name="[66c]"></a>m_lay_lpn_clean_list_offer</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, m_lay_lpn.o(i.m_lay_lpn_clean_list_offer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = m_lay_lpn_clean_list_offer &rArr; m_tb_timer_clear &rArr; m_tb_timer_remove &rArr; m_tb_timer_prog &rArr; m_al_timer_get_delay &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_clear
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_stop
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_select_friend
</UL>

<P><STRONG><a name="[58]"></a>m_lay_lpn_handler_offer</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, m_lay_lpn.o(i.m_lay_lpn_handler_offer))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = m_lay_lpn_handler_offer &rArr; m_tb_timer_set &rArr; m_tb_timer_insert &rArr; m_tb_timer_prog &rArr; m_al_timer_get_delay &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_set
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_acquire
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_send_lpn_offer_ind
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_seek_offer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_lpn.o(i.m_lay_lpn_rx_ctl)
</UL>
<P><STRONG><a name="[57]"></a>m_lay_lpn_handler_subs_list_cfm</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, m_lay_lpn.o(i.m_lay_lpn_handler_subs_list_cfm))
<BR>[Address Reference Count : 1]<UL><LI> m_lay_lpn.o(i.m_lay_lpn_rx_ctl)
</UL>
<P><STRONG><a name="[59]"></a>m_lay_lpn_handler_update</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, m_lay_lpn.o(i.m_lay_lpn_handler_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = m_lay_lpn_handler_update &rArr; m_lay_lpn_send_subs_list &rArr; m_lay_lpn_pack &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_free
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_set
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_clear
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_secure_bcn_rx_ind
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_send_lpn_status_ind
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_set_lpn_state
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_addr_list_start
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_addr_list_get_size
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_send_subs_list
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_send_poll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_lpn.o(i.m_lay_lpn_rx_ctl)
</UL>
<P><STRONG><a name="[216]"></a>m_lay_lpn_net_rx_cb</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, m_lay_lpn.o(i.m_lay_lpn_net_rx_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = m_lay_lpn_net_rx_cb &rArr; m_lay_lpn_send_poll &rArr; m_lay_lpn_pack &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_send_poll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_lpn.o(.constdata)
</UL>
<P><STRONG><a name="[670]"></a>m_lay_lpn_pack</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, m_lay_lpn.o(i.m_lay_lpn_pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = m_lay_lpn_pack &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_util_pack (via Veneer)
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_alloc
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_get_iv_seq
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_prim_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_stop
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_send_subs_list
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_send_req
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_send_poll
</UL>

<P><STRONG><a name="[215]"></a>m_lay_lpn_rx_ctl</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, m_lay_lpn.o(i.m_lay_lpn_rx_ctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = m_lay_lpn_rx_ctl
</UL>
<BR>[Calls]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_util_unpack (via Veneer)
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_prim_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_lpn.o(.constdata)
</UL>
<P><STRONG><a name="[66d]"></a>m_lay_lpn_seek_offer</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, m_lay_lpn.o(i.m_lay_lpn_seek_offer))
<BR><BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_select_friend
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_handler_offer
</UL>

<P><STRONG><a name="[666]"></a>m_lay_lpn_send_poll</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, m_lay_lpn.o(i.m_lay_lpn_send_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = m_lay_lpn_send_poll &rArr; m_lay_lpn_pack &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_pack
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_check_tx_list
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_net_rx_cb
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_handler_update
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_cb_timer
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_cb_key
</UL>

<P><STRONG><a name="[669]"></a>m_lay_lpn_send_req</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, m_lay_lpn.o(i.m_lay_lpn_send_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = m_lay_lpn_send_req &rArr; m_lay_lpn_pack &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_set
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_nb_elements
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_pack
</UL>
<BR>[Called By]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_start
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_cb_timer
</UL>

<P><STRONG><a name="[668]"></a>m_lay_lpn_send_subs_list</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, m_lay_lpn.o(i.m_lay_lpn_send_subs_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = m_lay_lpn_send_subs_list &rArr; m_lay_lpn_pack &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_malloc
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_free
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_pack
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_check_tx_list
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_handler_update
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_cb_subs_list_rem
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_lpn_cb_subs_list_add
</UL>

<P><STRONG><a name="[214]"></a>m_lay_lpn_sent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_lay_lpn.o(i.m_lay_lpn_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = m_lay_lpn_sent &rArr; m_tb_buf_release &rArr; m_tb_buf_block_free
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_lpn.o(.constdata)
</UL>
<P><STRONG><a name="[690]"></a>m_lay_proxy_addr_in_filt_list</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, m_lay_proxy.o(i.m_lay_proxy_addr_in_filt_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = m_lay_proxy_addr_in_filt_list
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_rx
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_filt_addr_rem
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_filt_addr_add
</UL>

<P><STRONG><a name="[68a]"></a>m_lay_proxy_adv_data_set</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, m_lay_proxy.o(i.m_lay_proxy_adv_data_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = m_lay_proxy_adv_data_set &rArr; m_tb_sec_rand_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_set
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_next
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_get
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_rand_start
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_bearer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_bearer_adv_ctrl
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_bearer_closed_cb
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_bearer_adv_update_timer_handler
</UL>

<P><STRONG><a name="[6c]"></a>m_lay_proxy_aes_finished</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, m_lay_proxy.o(i.m_lay_proxy_aes_finished))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = m_lay_proxy_aes_finished &rArr; m_lay_proxy_bearer_start &rArr; m_tb_buf_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_bearer_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_proxy.o(i.m_lay_proxy_rand_finished)
</UL>
<P><STRONG><a name="[6d]"></a>m_lay_proxy_aes_ready</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, m_lay_proxy.o(i.m_lay_proxy_aes_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_lay_proxy_aes_ready
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_proxy.o(i.m_lay_proxy_rand_finished)
</UL>
<P><STRONG><a name="[69]"></a>m_lay_proxy_bearer_adv_timer_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m_lay_proxy.o(i.m_lay_proxy_bearer_adv_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = m_lay_proxy_bearer_adv_timer_handler &rArr; m_lay_proxy_bearer_adv_ctrl &rArr; m_lay_proxy_adv_data_set &rArr; m_tb_sec_rand_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_bearer_adv_ctrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_proxy.o(i.m_lay_proxy_bearer_init)
</UL>
<P><STRONG><a name="[6a]"></a>m_lay_proxy_bearer_adv_update_timer_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_lay_proxy.o(i.m_lay_proxy_bearer_adv_update_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = m_lay_proxy_bearer_adv_update_timer_handler &rArr; m_lay_proxy_adv_data_set &rArr; m_tb_sec_rand_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_adv_data_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_proxy.o(i.m_lay_proxy_bearer_init)
</UL>
<P><STRONG><a name="[21a]"></a>m_lay_proxy_bearer_closed_cb</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, m_lay_proxy.o(i.m_lay_proxy_bearer_closed_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = m_lay_proxy_bearer_closed_cb &rArr; m_lay_proxy_adv_data_set &rArr; m_tb_sec_rand_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_free
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_proxy_end_ind
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_adv_data_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_proxy.o(.constdata)
</UL>
<P><STRONG><a name="[68d]"></a>m_lay_proxy_bearer_init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, m_lay_proxy.o(i.m_lay_proxy_bearer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_lay_proxy_bearer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init (via Veneer)
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_free
</UL>
<BR>[Called By]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_init
</UL>

<P><STRONG><a name="[219]"></a>m_lay_proxy_bearer_opened_cb</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, m_lay_proxy.o(i.m_lay_proxy_bearer_opened_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = m_lay_proxy_bearer_opened_cb &rArr; m_bcn_proxy_con_start &rArr; m_bcn_proxy_tx_check &rArr; m_bcn_adv_tx_check &rArr; m_bcn_prep_secure_bcn &rArr; m_bcn_insert_encrypt_queue &rArr; m_tb_sec_cmac_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_malloc
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_set
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_proxy_con_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_proxy.o(.constdata)
</UL>
<P><STRONG><a name="[68c]"></a>m_lay_proxy_bearer_start</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, m_lay_proxy.o(i.m_lay_proxy_bearer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = m_lay_proxy_bearer_start &rArr; m_tb_buf_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_alloc
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_aes_finished
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_adv_data_set
</UL>

<P><STRONG><a name="[6b]"></a>m_lay_proxy_bearer_started</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, m_lay_proxy.o(i.m_lay_proxy_bearer_started))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = m_lay_proxy_bearer_started &rArr; m_bearer_stop &rArr; m_bearer_adv_stop &rArr; m_bearer_adv_update &rArr; m_bearer_adv_stopped &rArr; m_bearer_closed &rArr; m_tb_buf_release &rArr; m_tb_buf_block_free
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_proxy.o(i.m_lay_proxy_bearer_start)
</UL>
<P><STRONG><a name="[68]"></a>m_lay_proxy_bearer_stopped</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_lay_proxy.o(i.m_lay_proxy_bearer_stopped))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = m_lay_proxy_bearer_stopped &rArr; m_api_proxy_end_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_proxy_end_ind
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m_lay_proxy.o(i.m_lay_proxy_bearer_started)
<LI> m_lay_proxy.o(i.m_lay_proxy_bearer_adv_ctrl)
</UL>
<P><STRONG><a name="[68e]"></a>m_lay_proxy_check_relay</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, m_lay_proxy.o(i.m_lay_proxy_check_relay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = m_lay_proxy_check_relay &rArr; m_tb_buf_release &rArr; m_tb_buf_block_free
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_sent
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_rx
</UL>

<P><STRONG><a name="[68f]"></a>m_lay_proxy_filt_addr_add</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, m_lay_proxy.o(i.m_lay_proxy_filt_addr_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = m_lay_proxy_filt_addr_add &rArr; m_lay_proxy_addr_in_filt_list
</UL>
<BR>[Calls]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_addr_in_filt_list
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_rx
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_prot_rx
</UL>

<P><STRONG><a name="[691]"></a>m_lay_proxy_filt_addr_rem</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, m_lay_proxy.o(i.m_lay_proxy_filt_addr_rem))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = m_lay_proxy_filt_addr_rem &rArr; m_lay_proxy_addr_in_filt_list
</UL>
<BR>[Calls]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_addr_in_filt_list
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_rx
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_prot_rx
</UL>

<P><STRONG><a name="[692]"></a>m_lay_proxy_filt_status_send</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, m_lay_proxy.o(i.m_lay_proxy_filt_status_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = m_lay_proxy_filt_status_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_alloc
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_get_iv_seq
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_prim_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_prot_rx
</UL>

<P><STRONG><a name="[693]"></a>m_lay_proxy_prot_rx</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, m_lay_proxy.o(i.m_lay_proxy_prot_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = m_lay_proxy_prot_rx &rArr; m_lay_proxy_filt_status_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_filt_status_send
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_filt_addr_rem
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_filt_addr_add
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_rx
</UL>

<P><STRONG><a name="[67]"></a>m_lay_proxy_rand_finished</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, m_lay_proxy.o(i.m_lay_proxy_rand_finished))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = m_lay_proxy_rand_finished &rArr; m_tb_sec_aes_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_aes_start
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_prim_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_proxy.o(i.m_lay_proxy_adv_data_set)
</UL>
<P><STRONG><a name="[218]"></a>m_lay_proxy_rx</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, m_lay_proxy.o(i.m_lay_proxy_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = m_lay_proxy_rx &rArr; m_lay_proxy_prot_rx &rArr; m_lay_proxy_filt_status_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_copy
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_alloc
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_prot_rx
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_filt_addr_rem
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_filt_addr_add
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_check_relay
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_addr_in_filt_list
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_proxy.o(.constdata)
</UL>
<P><STRONG><a name="[217]"></a>m_lay_proxy_sent</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, m_lay_proxy.o(i.m_lay_proxy_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = m_lay_proxy_sent &rArr; m_lay_proxy_check_relay &rArr; m_tb_buf_release &rArr; m_tb_buf_block_free
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_proxy_check_relay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_proxy.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>m_prov_ccm_finished_cb</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, m_prov.o(i.m_prov_ccm_finished_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = m_prov_ccm_finished_cb &rArr; m_tb_key_net_add &rArr; m_tb_sec_k2_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_util_unpack (via Veneer)
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_model_bind
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_pbrs_bind
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_set_iv_seq
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_add
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_dev_add
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_set_prim_addr
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_error_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_prov.o(i.m_prov_pdu_data_handler)
</UL>
<P><STRONG><a name="[81]"></a>m_prov_ccm_ready_cb</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, m_prov.o(i.m_prov_ccm_ready_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = m_prov_ccm_ready_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_prov.o(i.m_prov_pdu_data_handler)
</UL>
<P><STRONG><a name="[82]"></a>m_prov_cfm_salt_finished_cb</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, m_prov.o(i.m_prov_cfm_salt_finished_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = m_prov_cfm_salt_finished_cb &rArr; m_prov_error_handle &rArr; m_prov_pdu_send &rArr; m_prov_adv_trans_send &rArr; m_prov_adv_trans_tx_set &rArr; m_tb_timer_set &rArr; m_tb_timer_insert &rArr; m_tb_timer_prog &rArr; m_al_timer_get_delay &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_sec_ecdh_secret
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_error_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_prov.o(i.m_prov_pdu_pub_key_handler)
</UL>
<P><STRONG><a name="[7b]"></a>m_prov_cmac_finished_cb</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, m_prov.o(i.m_prov_cmac_finished_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = m_prov_cmac_finished_cb &rArr; m_tb_sec_s1_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_s1_start
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pdu_send
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_error_handle
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m_prov.o(i.m_prov_k1_finished_cb)
<LI> m_prov.o(i.m_prov_pdu_random_handler)
</UL>
<P><STRONG><a name="[7c]"></a>m_prov_cmac_ready_cb</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, m_prov.o(i.m_prov_cmac_ready_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_prov_cmac_ready_cb
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m_prov.o(i.m_prov_k1_finished_cb)
<LI> m_prov.o(i.m_prov_pdu_random_handler)
</UL>
<P><STRONG><a name="[77]"></a>m_prov_ecdh_secret_res_cb</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, m_prov.o(i.m_prov_ecdh_secret_res_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = m_prov_ecdh_secret_res_cb &rArr; m_tb_sec_rand_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_error_handle
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_rand_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_prov.o(i.m_prov_cfm_salt_finished_cb)
</UL>
<P><STRONG><a name="[6af]"></a>m_prov_error_handle</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, m_prov.o(i.m_prov_error_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = m_prov_error_handle &rArr; m_prov_pdu_send &rArr; m_prov_adv_trans_send &rArr; m_prov_adv_trans_tx_set &rArr; m_tb_timer_set &rArr; m_tb_timer_insert &rArr; m_tb_timer_prog &rArr; m_al_timer_get_delay &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_set
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_set_prov_state
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_state_send
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pdu_send
</UL>
<BR>[Called By]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_oob_auth_rsp
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pdu_rx
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_rand_finished_cb
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pub_key_res_cb
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_psalt_finished_cb
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pdu_failed_handler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_net_key_added_cb
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_k1_finished_cb
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_ecdh_secret_res_cb
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_cmac_finished_cb
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_cfm_salt_finished_cb
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_ccm_finished_cb
</UL>

<P><STRONG><a name="[7d]"></a>m_prov_k1_finished_cb</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, m_prov.o(i.m_prov_k1_finished_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = m_prov_k1_finished_cb &rArr; m_tb_sec_k1_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_k1_start
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_cmac_start
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pdu_send
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_error_handle
</UL>
<BR>[Address Reference Count : 3]<UL><LI> m_prov.o(i.m_prov_k1_finished_cb)
<LI> m_prov.o(i.m_prov_psalt_finished_cb)
<LI> m_prov.o(i.m_prov_rand_finished_cb)
</UL>
<P><STRONG><a name="[7e]"></a>m_prov_k1_ready_cb</STRONG> (Thumb, 142 bytes, Stack size 20 bytes, m_prov.o(i.m_prov_k1_ready_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = m_prov_k1_ready_cb
</UL>
<BR>[Address Reference Count : 3]<UL><LI> m_prov.o(i.m_prov_k1_finished_cb)
<LI> m_prov.o(i.m_prov_psalt_finished_cb)
<LI> m_prov.o(i.m_prov_rand_finished_cb)
</UL>
<P><STRONG><a name="[83]"></a>m_prov_link_timeout_cb</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, m_prov.o(i.m_prov_link_timeout_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = m_prov_link_timeout_cb &rArr; m_prov_link_closed &rArr; m_bcn_state_update &rArr; m_bcn_adv_tx_check &rArr; m_bcn_prep_secure_bcn &rArr; m_bcn_insert_encrypt_queue &rArr; m_tb_sec_cmac_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_set
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_bearer_close
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_link_closed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_prov.o(i.m_prov_start)
</UL>
<P><STRONG><a name="[76]"></a>m_prov_net_key_added_cb</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, m_prov.o(i.m_prov_net_key_added_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = m_prov_net_key_added_cb &rArr; m_prov_error_handle &rArr; m_prov_pdu_send &rArr; m_prov_adv_trans_send &rArr; m_prov_adv_trans_tx_set &rArr; m_tb_timer_set &rArr; m_tb_timer_insert &rArr; m_tb_timer_prog &rArr; m_al_timer_get_delay &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pdu_send
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_error_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_prov.o(i.m_prov_ccm_finished_cb)
</UL>
<P><STRONG><a name="[86]"></a>m_prov_param_req</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m_prov.o(i.m_prov_param_req))
<BR>[Address Reference Count : 1]<UL><LI> m_prov.o(i.m_prov_start)
</UL>
<P><STRONG><a name="[21c]"></a>m_prov_pdu_capabilities_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, m_prov.o(i.m_prov_pdu_capabilities_handler))
<BR>[Address Reference Count : 1]<UL><LI> m_prov.o(.constdata)
</UL>
<P><STRONG><a name="[220]"></a>m_prov_pdu_cfm_handler</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, m_prov.o(i.m_prov_pdu_cfm_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = m_prov_pdu_cfm_handler &rArr; m_tb_sec_rand_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_rand_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_prov.o(.constdata)
</UL>
<P><STRONG><a name="[223]"></a>m_prov_pdu_cmp_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, m_prov.o(i.m_prov_pdu_cmp_handler))
<BR>[Address Reference Count : 1]<UL><LI> m_prov.o(.constdata)
</UL>
<P><STRONG><a name="[222]"></a>m_prov_pdu_data_handler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, m_prov.o(i.m_prov_pdu_data_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = m_prov_pdu_data_handler &rArr; m_tb_sec_ccm_dec_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_ccm_dec_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_prov.o(.constdata)
</UL>
<P><STRONG><a name="[224]"></a>m_prov_pdu_failed_handler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, m_prov.o(i.m_prov_pdu_failed_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = m_prov_pdu_failed_handler &rArr; m_prov_error_handle &rArr; m_prov_pdu_send &rArr; m_prov_adv_trans_send &rArr; m_prov_adv_trans_tx_set &rArr; m_tb_timer_set &rArr; m_tb_timer_insert &rArr; m_tb_timer_prog &rArr; m_al_timer_get_delay &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_error_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_prov.o(.constdata)
</UL>
<P><STRONG><a name="[6b8]"></a>m_prov_pdu_handle</STRONG> (Thumb, 116 bytes, Stack size 96 bytes, m_prov.o(i.m_prov_pdu_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = m_prov_pdu_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_util_unpack (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pdu_rx
</UL>

<P><STRONG><a name="[21f]"></a>m_prov_pdu_input_cmp_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, m_prov.o(i.m_prov_pdu_input_cmp_handler))
<BR>[Address Reference Count : 1]<UL><LI> m_prov.o(.constdata)
</UL>
<P><STRONG><a name="[21b]"></a>m_prov_pdu_invite_handler</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, m_prov.o(i.m_prov_pdu_invite_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = m_prov_pdu_invite_handler &rArr; m_prov_pdu_send &rArr; m_prov_adv_trans_send &rArr; m_prov_adv_trans_tx_set &rArr; m_tb_timer_set &rArr; m_tb_timer_insert &rArr; m_tb_timer_prog &rArr; m_al_timer_get_delay &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pdu_send
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_set_attention_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_prov.o(.constdata)
</UL>
<P><STRONG><a name="[21e]"></a>m_prov_pdu_pub_key_handler</STRONG> (Thumb, 148 bytes, Stack size 80 bytes, m_prov.o(i.m_prov_pdu_pub_key_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = m_prov_pdu_pub_key_handler &rArr; m_tb_sec_s1_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_s1_start
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pdu_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_prov.o(.constdata)
</UL>
<P><STRONG><a name="[221]"></a>m_prov_pdu_random_handler</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, m_prov.o(i.m_prov_pdu_random_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = m_prov_pdu_random_handler &rArr; m_tb_sec_cmac_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_cmac_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_prov.o(.constdata)
</UL>
<P><STRONG><a name="[6b1]"></a>m_prov_pdu_send</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, m_prov.o(i.m_prov_pdu_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = m_prov_pdu_send &rArr; m_prov_adv_trans_send &rArr; m_prov_adv_trans_tx_set &rArr; m_tb_timer_set &rArr; m_tb_timer_insert &rArr; m_tb_timer_prog &rArr; m_al_timer_get_delay &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_util_pack (via Veneer)
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_set
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_alloc
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_bearer_gatt_send
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_send
</UL>
<BR>[Called By]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_oob_auth_rsp
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_trans_restart_cb
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pdu_pub_key_handler
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pdu_invite_handler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_net_key_added_cb
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_k1_finished_cb
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_error_handle
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_cmac_finished_cb
</UL>

<P><STRONG><a name="[21d]"></a>m_prov_pdu_start_handler</STRONG> (Thumb, 202 bytes, Stack size 20 bytes, m_prov.o(i.m_prov_pdu_start_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = m_prov_pdu_start_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_prov.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>m_prov_psalt_finished_cb</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, m_prov.o(i.m_prov_psalt_finished_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = m_prov_psalt_finished_cb &rArr; m_tb_sec_k1_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_k1_start
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_error_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_prov.o(i.m_prov_cmac_finished_cb)
</UL>
<P><STRONG><a name="[7f]"></a>m_prov_pub_key_res_cb</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, m_prov.o(i.m_prov_pub_key_res_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = m_prov_pub_key_res_cb &rArr; m_bcn_start_tx_unprov_bcn &rArr; m_bcn_adv_tx_check &rArr; m_bcn_prep_secure_bcn &rArr; m_bcn_insert_encrypt_queue &rArr; m_tb_sec_cmac_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_free
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_is_feature_sup
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bcn_start_tx_unprov_bcn
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_bearer_gatt_start
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_bearer_scan_start
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_error_handle
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m_prov.o(i.m_prov_link_closed)
<LI> m_prov.o(i.m_prov_param_rsp)
</UL>
<P><STRONG><a name="[7a]"></a>m_prov_rand_finished_cb</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, m_prov.o(i.m_prov_rand_finished_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = m_prov_rand_finished_cb &rArr; m_tb_sec_k1_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_k1_start
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_error_handle
</UL>
<BR>[Address Reference Count : 3]<UL><LI> m_prov.o(i.m_prov_oob_auth_rsp)
<LI> m_prov.o(i.m_prov_pdu_cfm_handler)
<LI> m_prov.o(i.m_prov_ecdh_secret_res_cb)
</UL>
<P><STRONG><a name="[79]"></a>m_prov_s1_ready_cb</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, m_prov.o(i.m_prov_s1_ready_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_prov_s1_ready_cb
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m_prov.o(i.m_prov_pdu_pub_key_handler)
<LI> m_prov.o(i.m_prov_cmac_finished_cb)
</UL>
<P><STRONG><a name="[6b4]"></a>m_prov_state_send</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, m_prov.o(i.m_prov_state_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = m_prov_state_send &rArr; m_tb_state_set_attention_state &rArr; m_tb_timer_set &rArr; m_tb_timer_insert &rArr; m_tb_timer_prog &rArr; m_al_timer_get_delay &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_set_attention_state
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_attention_state
</UL>
<BR>[Called By]<UL><LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_link_closed
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_error_handle
</UL>

<P><STRONG><a name="[85]"></a>m_prov_trans_restart_cb</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, m_prov.o(i.m_prov_trans_restart_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = m_prov_trans_restart_cb &rArr; m_prov_pdu_send &rArr; m_prov_adv_trans_send &rArr; m_prov_adv_trans_tx_set &rArr; m_tb_timer_set &rArr; m_tb_timer_insert &rArr; m_tb_timer_prog &rArr; m_al_timer_get_delay &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pdu_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_prov.o(i.m_prov_start)
</UL>
<P><STRONG><a name="[84]"></a>m_prov_trans_timeout_cb</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, m_prov.o(i.m_prov_trans_timeout_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = m_prov_trans_timeout_cb &rArr; m_prov_bearer_close &rArr; m_prov_adv_trans_link_close_send &rArr; m_prov_adv_trans_tx_set &rArr; m_tb_timer_set &rArr; m_tb_timer_insert &rArr; m_tb_timer_prog &rArr; m_al_timer_get_delay &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_set
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_bearer_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_prov.o(i.m_prov_start)
</UL>
<P><STRONG><a name="[228]"></a>m_prov_bearer_closed_cb</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, m_prov_bearer.o(i.m_prov_bearer_closed_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = m_prov_bearer_closed_cb &rArr; m_prov_link_closed &rArr; m_bcn_state_update &rArr; m_bcn_adv_tx_check &rArr; m_bcn_prep_secure_bcn &rArr; m_bcn_insert_encrypt_queue &rArr; m_tb_sec_cmac_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_link_closed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_prov_bearer.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>m_prov_bearer_gatt_started</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, m_prov_bearer.o(i.m_prov_bearer_gatt_started))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = m_prov_bearer_gatt_started &rArr; m_tb_buf_release &rArr; m_tb_buf_block_free
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_prov_bearer.o(i.m_prov_bearer_gatt_start)
</UL>
<P><STRONG><a name="[75]"></a>m_prov_bearer_gatt_stopped</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, m_prov_bearer.o(i.m_prov_bearer_gatt_stopped))
<BR>[Address Reference Count : 1]<UL><LI> m_prov_bearer.o(i.m_prov_bearer_gatt_stop)
</UL>
<P><STRONG><a name="[227]"></a>m_prov_bearer_opened_cb</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, m_prov_bearer.o(i.m_prov_bearer_opened_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = m_prov_bearer_opened_cb &rArr; m_prov_link_open &rArr; m_prov_bearer_gatt_stop &rArr; m_bearer_stop &rArr; m_bearer_adv_stop &rArr; m_bearer_adv_update &rArr; m_bearer_adv_stopped &rArr; m_bearer_closed &rArr; m_tb_buf_release &rArr; m_tb_buf_block_free
</UL>
<BR>[Calls]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_link_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_prov_bearer.o(.constdata)
</UL>
<P><STRONG><a name="[226]"></a>m_prov_bearer_rx_cb</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, m_prov_bearer.o(i.m_prov_bearer_rx_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = m_prov_bearer_rx_cb &rArr; m_prov_adv_trans_rx &rArr; m_prov_link_closed &rArr; m_bcn_state_update &rArr; m_bcn_adv_tx_check &rArr; m_bcn_prep_secure_bcn &rArr; m_bcn_insert_encrypt_queue &rArr; m_tb_sec_cmac_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_head_release
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_rx
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pdu_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_prov_bearer.o(.constdata)
</UL>
<P><STRONG><a name="[225]"></a>m_prov_bearer_sent_cb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, m_prov_bearer.o(i.m_prov_bearer_sent_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = m_prov_bearer_sent_cb &rArr; m_prov_adv_trans_sent &rArr; m_prov_link_closed &rArr; m_bcn_state_update &rArr; m_bcn_adv_tx_check &rArr; m_bcn_prep_secure_bcn &rArr; m_bcn_insert_encrypt_queue &rArr; m_tb_sec_cmac_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_sent
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pdu_sent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_prov_bearer.o(.constdata)
</UL>
<P><STRONG><a name="[6e2]"></a>m_tb_mio_add_virt_addr</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, m_tb_mio.o(i.m_tb_mio_add_virt_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = m_tb_mio_add_virt_addr &rArr; m_tb_mio_find_label_uuid
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_find_label_uuid
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_set_publi_param
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_add_subscription_virt
</UL>

<P><STRONG><a name="[6df]"></a>m_tb_mio_addr_list_add</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, m_tb_mio.o(i.m_tb_mio_addr_list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_tb_mio_addr_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_add_subscription_virt
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_add_subscription
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_addr_list_start
</UL>

<P><STRONG><a name="[6e3]"></a>m_tb_mio_addr_list_rem</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, m_tb_mio.o(i.m_tb_mio_addr_list_rem))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_tb_mio_addr_list_rem
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_delete_subscription
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_delete_all_subscription
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_rem_virt_addr
</UL>

<P><STRONG><a name="[6e5]"></a>m_tb_mio_convert_period</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, m_tb_mio.o(i.m_tb_mio_convert_period))
<BR><BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_set_publi_param
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_period
</UL>

<P><STRONG><a name="[6e0]"></a>m_tb_mio_find_label_uuid</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, m_tb_mio.o(i.m_tb_mio_find_label_uuid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = m_tb_mio_find_label_uuid
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_delete_subscription_virt
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_add_subscription_virt
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_add_virt_addr
</UL>

<P><STRONG><a name="[6e4]"></a>m_tb_mio_rem_virt_addr</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, m_tb_mio.o(i.m_tb_mio_rem_virt_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = m_tb_mio_rem_virt_addr &rArr; m_tb_mio_addr_list_rem
</UL>
<BR>[Calls]<UL><LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_addr_list_rem
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_set_publi_param
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_delete_subscription_virt
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_delete_all_subscription
</UL>

<P><STRONG><a name="[6de]"></a>m_tb_mio_subs_find_addr</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, m_tb_mio.o(i.m_tb_mio_subs_find_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = m_tb_mio_subs_find_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_delete_subscription
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_add_subscription
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_is_dest_addr
</UL>

<P><STRONG><a name="[6e1]"></a>m_tb_mio_subs_find_va_lid</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, m_tb_mio.o(i.m_tb_mio_subs_find_va_lid))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = m_tb_mio_subs_find_va_lid
</UL>
<BR>[Called By]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_delete_subscription_virt
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_add_subscription_virt
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_is_dest_addr
</UL>

<P><STRONG><a name="[8f]"></a>m_tb_sec_aes_ccm_cb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, m_tb_sec.o(i.m_tb_sec_aes_ccm_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = m_tb_sec_aes_ccm_cb &rArr; m_tb_sec_func_end_handler &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_func_end_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_tb_sec.o(i.m_tb_sec_execute)
</UL>
<P><STRONG><a name="[8e]"></a>m_tb_sec_aes_res_cb</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m_tb_sec.o(i.m_tb_sec_aes_res_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = m_tb_sec_aes_res_cb &rArr; m_tb_sec_func_end_handler &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_func_end_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_tb_sec.o(i.m_tb_sec_execute)
</UL>
<P><STRONG><a name="[6e8]"></a>m_tb_sec_execute</STRONG> (Thumb, 438 bytes, Stack size 112 bytes, m_tb_sec.o(i.m_tb_sec_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_sec_rand
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_sec_aes_s1
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_sec_aes_k4
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_sec_aes_k3
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_sec_aes_k2
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_sec_aes_k1
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_sec_aes_cmac
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_sec_aes_ccm
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_sec_aes
</UL>
<BR>[Called By]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_start
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_func_end_handler
</UL>

<P><STRONG><a name="[6e6]"></a>m_tb_sec_func_end_handler</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, m_tb_sec.o(i.m_tb_sec_func_end_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = m_tb_sec_func_end_handler &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_aes_res_cb
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_aes_ccm_cb
</UL>

<P><STRONG><a name="[90]"></a>m_tb_sec_ready_rand_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_tb_sec.o(i.m_tb_sec_ready_rand_cb))
<BR>[Address Reference Count : 1]<UL><LI> m_tb_sec.o(i.m_tb_sec_rand_start)
</UL>
<P><STRONG><a name="[6e7]"></a>m_tb_sec_start</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, m_tb_sec.o(i.m_tb_sec_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_k4_start
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_k3_start
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_k2_start
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_k1_start
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_cmac_start
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_ccm_enc_start
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_s1_start
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_ccm_dec_start
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_rand_start
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_aes_start
</UL>

<P><STRONG><a name="[91]"></a>m_tb_state_cb_timer_attention</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, m_tb_state.o(i.m_tb_state_cb_timer_attention))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = m_tb_state_cb_timer_attention &rArr; m_tb_timer_set &rArr; m_tb_timer_insert &rArr; m_tb_timer_prog &rArr; m_al_timer_get_delay &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_set
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_send_attention_update_ind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_tb_state.o(i.m_tb_state_init)
</UL>
<P><STRONG><a name="[6ea]"></a>m_tb_check_stored_info</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, m_tb_store_wvt.o(i.m_tb_check_stored_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = m_tb_check_stored_info
</UL>
<BR>[Called By]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_load
</UL>

<P><STRONG><a name="[92]"></a>m_tb_store_cb_appkey_added</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, m_tb_store_wvt.o(i.m_tb_store_cb_appkey_added))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = m_tb_store_cb_appkey_added &rArr; m_tb_store_load_fsm &rArr; m_tb_store_load_states &rArr; m_tb_state_set_beacon_state &rArr; m_bcn_state_update &rArr; m_bcn_adv_tx_check &rArr; m_bcn_prep_secure_bcn &rArr; m_bcn_insert_encrypt_queue &rArr; m_tb_sec_cmac_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_find
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_app_update
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_load_fsm
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m_tb_store_wvt.o(i.m_tb_store_load_fsm)
<LI> m_tb_store_wvt.o(i.m_tb_store_cb_appkey_added)
</UL>
<P><STRONG><a name="[93]"></a>m_tb_store_cb_netkey_added</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, m_tb_store_wvt.o(i.m_tb_store_cb_netkey_added))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = m_tb_store_cb_netkey_added &rArr; m_tb_store_load_fsm &rArr; m_tb_store_load_states &rArr; m_tb_state_set_beacon_state &rArr; m_bcn_state_update &rArr; m_bcn_adv_tx_check &rArr; m_bcn_prep_secure_bcn &rArr; m_bcn_insert_encrypt_queue &rArr; m_tb_sec_cmac_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_update
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_load_fsm
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m_tb_store_wvt.o(i.m_tb_store_load_fsm)
<LI> m_tb_store_wvt.o(i.m_tb_store_cb_netkey_added)
</UL>
<P><STRONG><a name="[6eb]"></a>m_tb_store_load_binding</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, m_tb_store_wvt.o(i.m_tb_store_load_binding))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = m_tb_store_load_binding &rArr; m_tb_mio_bind &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_model_bind
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_app_find
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_bind
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_local_id
</UL>
<BR>[Called By]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_load_fsm
</UL>

<P><STRONG><a name="[6e9]"></a>m_tb_store_load_fsm</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, m_tb_store_wvt.o(i.m_tb_store_load_fsm))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = m_tb_store_load_fsm &rArr; m_tb_store_load_states &rArr; m_tb_state_set_beacon_state &rArr; m_bcn_state_update &rArr; m_bcn_adv_tx_check &rArr; m_bcn_prep_secure_bcn &rArr; m_bcn_insert_encrypt_queue &rArr; m_tb_sec_cmac_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_free
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_find
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_add
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_app_add
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_load_subs_list
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_load_states
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_load_publi_param
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_load_binding
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_set_prov_state
</UL>
<BR>[Called By]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_load
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_cb_netkey_added
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_cb_appkey_added
</UL>

<P><STRONG><a name="[6ed]"></a>m_tb_store_load_publi_param</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, m_tb_store_wvt.o(i.m_tb_store_load_publi_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = m_tb_store_load_publi_param &rArr; m_tb_mio_set_publi_param &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_app_find
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_set_publi_param
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_local_id
</UL>
<BR>[Called By]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_load_fsm
</UL>

<P><STRONG><a name="[6ec]"></a>m_tb_store_load_states</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, m_tb_store_wvt.o(i.m_tb_store_load_states))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = m_tb_store_load_states &rArr; m_tb_state_set_beacon_state &rArr; m_bcn_state_update &rArr; m_bcn_adv_tx_check &rArr; m_bcn_prep_secure_bcn &rArr; m_bcn_insert_encrypt_queue &rArr; m_tb_sec_cmac_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_model_bind
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_set_iv_seq
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_dev_add
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_set_relay_state
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_set_net_tx_state
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_set_friend_state
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_set_default_ttl
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_set_beacon_state
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_set_gatt_proxy_state
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_set_prim_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_load_fsm
</UL>

<P><STRONG><a name="[6ee]"></a>m_tb_store_load_subs_list</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, m_tb_store_wvt.o(i.m_tb_store_load_subs_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = m_tb_store_load_subs_list &rArr; m_tb_mio_add_subscription_virt &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_add_subscription_virt
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_add_subscription
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_local_id
</UL>
<BR>[Called By]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_load_fsm
</UL>

<P><STRONG><a name="[6ef]"></a>m_tb_store_update_app_key_ind</STRONG> (Thumb, 138 bytes, Stack size 72 bytes, m_tb_store_wvt.o(i.m_tb_store_update_app_key_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = m_tb_store_update_app_key_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_get
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_app_get
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_send_update_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_ind
</UL>

<P><STRONG><a name="[6f0]"></a>m_tb_store_update_binding_ind</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, m_tb_store_wvt.o(i.m_tb_store_update_binding_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = m_tb_store_update_binding_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_malloc
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_free
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_get_model_appkey_ids
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_send_update_ind
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_nb_bound_app
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_model_id
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_element_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_ind
</UL>

<P><STRONG><a name="[6f2]"></a>m_tb_store_update_net_key_ind</STRONG> (Thumb, 136 bytes, Stack size 64 bytes, m_tb_store_wvt.o(i.m_tb_store_update_net_key_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = m_tb_store_update_net_key_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_get
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_send_update_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_ind
</UL>

<P><STRONG><a name="[6f3]"></a>m_tb_store_update_publi_param_ind</STRONG> (Thumb, 152 bytes, Stack size 80 bytes, m_tb_store_wvt.o(i.m_tb_store_update_publi_param_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_app_get
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_send_update_ind
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_vaddr
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_model_id
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_publi_param
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_element_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_ind
</UL>

<P><STRONG><a name="[6f5]"></a>m_tb_store_update_state_ind</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, m_tb_store_wvt.o(i.m_tb_store_update_state_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = m_tb_store_update_state_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_get_iv_seq_no_inc
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_dev_get
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_beacon_state
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_send_update_ind
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_relay_state
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_net_tx_state
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_gatt_proxy_state
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_friend_state
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_default_ttl
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_prim_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_ind
</UL>

<P><STRONG><a name="[6f4]"></a>m_tb_store_update_subs_list_ind</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, m_tb_store_wvt.o(i.m_tb_store_update_subs_list_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = m_tb_store_update_subs_list_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_malloc
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_free
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_send_update_ind
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_subscription_list_size_vaddr
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_subscription_list_size
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_subscription_list
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_model_id
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_element_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_update_ind
</UL>

<P><STRONG><a name="[22b]"></a>m_bearer_adv_rx</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, m_bearer_adv.o(i.m_bearer_adv_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = m_bearer_adv_rx &rArr; m_bearer_rx &rArr; m_tb_buf_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_bearer_adv.o(.constdata)
</UL>
<P><STRONG><a name="[22c]"></a>m_bearer_adv_sent</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, m_bearer_adv.o(i.m_bearer_adv_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = m_bearer_adv_sent &rArr; m_bearer_sent &rArr; m_tb_buf_release &rArr; m_tb_buf_block_free
</UL>
<BR>[Calls]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_sent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_bearer_adv.o(.constdata)
</UL>
<P><STRONG><a name="[229]"></a>m_bearer_adv_started</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, m_bearer_adv.o(i.m_bearer_adv_started))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = m_bearer_adv_started &rArr; m_bearer_opened
</UL>
<BR>[Calls]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_started
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_opened
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_bearer_adv.o(.constdata)
</UL>
<P><STRONG><a name="[22a]"></a>m_bearer_adv_stopped</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, m_bearer_adv.o(i.m_bearer_adv_stopped))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = m_bearer_adv_stopped &rArr; m_bearer_closed &rArr; m_tb_buf_release &rArr; m_tb_buf_block_free
</UL>
<BR>[Calls]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_stopped
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_closed
</UL>
<BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_adv_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_bearer_adv.o(.constdata)
</UL>
<P><STRONG><a name="[230]"></a>m_bearer_gatt_closed</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, m_bearer_gatt.o(i.m_bearer_gatt_closed))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = m_bearer_gatt_closed &rArr; m_bearer_closed &rArr; m_tb_buf_release &rArr; m_tb_buf_block_free
</UL>
<BR>[Calls]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_closed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_bearer_gatt.o(.constdata)
</UL>
<P><STRONG><a name="[22f]"></a>m_bearer_gatt_created</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, m_bearer_gatt.o(i.m_bearer_gatt_created))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = m_bearer_gatt_created &rArr; m_bearer_opened
</UL>
<BR>[Calls]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_opened
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_bearer_gatt.o(.constdata)
</UL>
<P><STRONG><a name="[231]"></a>m_bearer_gatt_rx</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, m_bearer_gatt.o(i.m_bearer_gatt_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = m_bearer_gatt_rx &rArr; m_bearer_rx &rArr; m_tb_buf_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_bearer_gatt.o(.constdata)
</UL>
<P><STRONG><a name="[232]"></a>m_bearer_gatt_sent</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, m_bearer_gatt.o(i.m_bearer_gatt_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = m_bearer_gatt_sent &rArr; m_bearer_sent &rArr; m_tb_buf_release &rArr; m_tb_buf_block_free
</UL>
<BR>[Calls]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_sent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_bearer_gatt.o(.constdata)
</UL>
<P><STRONG><a name="[22d]"></a>m_bearer_gatt_started</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, m_bearer_gatt.o(i.m_bearer_gatt_started))
<BR><BR>[Calls]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_started
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_bearer_gatt.o(.constdata)
</UL>
<P><STRONG><a name="[22e]"></a>m_bearer_gatt_stopped</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, m_bearer_gatt.o(i.m_bearer_gatt_stopped))
<BR><BR>[Calls]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_bearer_stopped
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_bearer_gatt.o(.constdata)
</UL>
<P><STRONG><a name="[5ad]"></a>m_fnd_confs_buf_alloc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, m_fnd_confs.o(i.m_fnd_confs_buf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = m_fnd_confs_buf_alloc &rArr; m_tb_buf_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_netkey_status
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_model_subs_status
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_model_subs_list
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_model_pub_status
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_model_app_status
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_model_app_list
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_lpn_polltimeout_status
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_hbeat_subs_status
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_hbeat_pub_status
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_compo_data_status
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_appkey_status
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_appkey_list
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_node_id
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_key_refresh_phase
</UL>

<P><STRONG><a name="[40]"></a>m_fnd_confs_cb_appkey_added</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, m_fnd_confs.o(i.m_fnd_confs_cb_appkey_added))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = m_fnd_confs_cb_appkey_added &rArr; m_fnd_confs_send_appkey_status &rArr; m_fnd_confs_send &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_appkey_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_fnd_confs.o(i.m_fnd_confs_handler_appkey)
</UL>
<P><STRONG><a name="[41]"></a>m_fnd_confs_cb_compo_data</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, m_fnd_confs.o(i.m_fnd_confs_cb_compo_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = m_fnd_confs_cb_compo_data &rArr; m_fnd_confs_send_compo_data_status &rArr; m_fnd_confs_send &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_compo_data_status
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_nb_cdata_page
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_fnd_confs.o(i.m_fnd_confs_handler_compo_data_get)
</UL>
<P><STRONG><a name="[44]"></a>m_fnd_confs_cb_netkey_added</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, m_fnd_confs.o(i.m_fnd_confs_cb_netkey_added))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = m_fnd_confs_cb_netkey_added &rArr; m_fnd_confs_send_netkey_status &rArr; m_fnd_confs_send &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_netkey_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_fnd_confs.o(i.m_fnd_confs_handler_netkey)
</UL>
<P><STRONG><a name="[235]"></a>m_fnd_confs_cb_opcode_check</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, m_fnd_confs.o(i.m_fnd_confs_cb_opcode_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = m_fnd_confs_cb_opcode_check &rArr; m_api_model_opcode_status &rArr; m_lay_access_opcode_status &rArr; m_al_djob_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_model_opcode_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_fnd_confs.o(.constdata)
</UL>
<P><STRONG><a name="[233]"></a>m_fnd_confs_cb_rx</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, m_fnd_confs.o(i.m_fnd_confs_cb_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = m_fnd_confs_cb_rx &rArr; m_tb_buf_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_copy
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_alloc
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_djob_reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_fnd_confs.o(.constdata)
</UL>
<P><STRONG><a name="[46]"></a>m_fnd_confs_cb_sec_cmac_pub_finished</STRONG> (Thumb, 176 bytes, Stack size 64 bytes, m_fnd_confs.o(i.m_fnd_confs_cb_sec_cmac_pub_finished))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = m_fnd_confs_cb_sec_cmac_pub_finished &rArr; m_fnd_confs_send_model_pub_status &rArr; m_fnd_confs_send &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_app_find
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_set_publi_param
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_model_pub_status
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_is_local_addr
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_local_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_fnd_confs.o(i.m_fnd_confs_process)
</UL>
<P><STRONG><a name="[43]"></a>m_fnd_confs_cb_sec_cmac_ready</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, m_fnd_confs.o(i.m_fnd_confs_cb_sec_cmac_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_fnd_confs_cb_sec_cmac_ready
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m_fnd_confs.o(i.m_fnd_confs_handler_model_subs_vaddr)
<LI> m_fnd_confs.o(i.m_fnd_confs_process)
</UL>
<P><STRONG><a name="[42]"></a>m_fnd_confs_cb_sec_cmac_subs_finished</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, m_fnd_confs.o(i.m_fnd_confs_cb_sec_cmac_subs_finished))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = m_fnd_confs_cb_sec_cmac_subs_finished &rArr; m_fnd_confs_send_model_subs_status &rArr; m_fnd_confs_send &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_add_subscription_virt
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_model_subs_status
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_local_id
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_delete_all_subscription
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_fnd_confs.o(i.m_fnd_confs_handler_model_subs_vaddr)
</UL>
<P><STRONG><a name="[234]"></a>m_fnd_confs_cb_sent</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, m_fnd_confs.o(i.m_fnd_confs_cb_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = m_fnd_confs_cb_sent &rArr; m_tb_buf_release &rArr; m_tb_buf_block_free
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_send_node_reset_ind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_fnd_confs.o(.constdata)
</UL>
<P><STRONG><a name="[5c6]"></a>m_fnd_confs_get_air_status</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, m_fnd_confs.o(i.m_fnd_confs_get_air_status))
<BR><BR>[Called By]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_netkey_status
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_model_subs_status
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_model_subs_list
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_model_pub_status
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_model_app_status
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_model_app_list
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_hbeat_subs_status
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_hbeat_pub_status
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_appkey_status
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_appkey_list
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_node_id
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_key_refresh_phase
</UL>

<P><STRONG><a name="[5de]"></a>m_fnd_confs_get_ids_length</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, m_fnd_confs.o(i.m_fnd_confs_get_ids_length))
<BR><BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_model_app_list
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_appkey_list
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process
</UL>

<P><STRONG><a name="[5b8]"></a>m_fnd_confs_handler_appkey</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, m_fnd_confs.o(i.m_fnd_confs_handler_appkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = m_fnd_confs_handler_appkey &rArr; m_fnd_confs_send_appkey_status &rArr; m_fnd_confs_send &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_find
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_app_update
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_app_find
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_app_delete
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_app_add
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_appkey_status
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_app_key_rem_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process
</UL>

<P><STRONG><a name="[5be]"></a>m_fnd_confs_handler_compo_data_get</STRONG> (Thumb, 310 bytes, Stack size 56 bytes, m_fnd_confs.o(i.m_fnd_confs_handler_compo_data_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = m_fnd_confs_handler_compo_data_get &rArr; m_fnd_confs_send_compo_data_status &rArr; m_fnd_confs_send &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_malloc
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_free
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_compo_data_status
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_store_get_compo_data
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_nb_cdata_page
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_compo_info
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_nb_models
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_model_ids
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_nb_elements
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process
</UL>

<P><STRONG><a name="[5c4]"></a>m_fnd_confs_handler_key_refresh_phase</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, m_fnd_confs.o(i.m_fnd_confs_handler_key_refresh_phase))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = m_fnd_confs_handler_key_refresh_phase &rArr; m_fnd_confs_send &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_phase_transition_ind
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_find
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_get_phase
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process_next
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_get_air_status
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_buf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process
</UL>

<P><STRONG><a name="[5ca]"></a>m_fnd_confs_handler_model_app</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, m_fnd_confs.o(i.m_fnd_confs_handler_model_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = m_fnd_confs_handler_model_app &rArr; m_fnd_confs_send_model_app_status &rArr; m_fnd_confs_send &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_model_bind
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_model_unbind
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_app_find
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_bind
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_model_app_status
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_unbind
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_is_local_addr
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_local_id
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process
</UL>

<P><STRONG><a name="[5ce]"></a>m_fnd_confs_handler_model_pub_set</STRONG> (Thumb, 156 bytes, Stack size 64 bytes, m_fnd_confs.o(i.m_fnd_confs_handler_model_pub_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = m_fnd_confs_handler_model_pub_set &rArr; m_fnd_confs_send_model_pub_status &rArr; m_fnd_confs_send &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_app_find
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_set_publi_param
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_model_pub_status
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_is_local_addr
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_local_id
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process
</UL>

<P><STRONG><a name="[5cf]"></a>m_fnd_confs_handler_model_subs</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, m_fnd_confs.o(i.m_fnd_confs_handler_model_subs))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = m_fnd_confs_handler_model_subs &rArr; m_fnd_confs_send_model_subs_status &rArr; m_fnd_confs_send &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_delete_subscription
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_add_subscription
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_model_subs_status
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_is_local_addr
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_local_id
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_delete_all_subscription
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process
</UL>

<P><STRONG><a name="[5d0]"></a>m_fnd_confs_handler_model_subs_vaddr</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, m_fnd_confs.o(i.m_fnd_confs_handler_model_subs_vaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = m_fnd_confs_handler_model_subs_vaddr &rArr; m_fnd_confs_send_model_subs_status &rArr; m_fnd_confs_send &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_cmac_start
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_delete_subscription_virt
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_model_subs_status
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_is_local_addr
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_local_id
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process
</UL>

<P><STRONG><a name="[5d1]"></a>m_fnd_confs_handler_netkey</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, m_fnd_confs.o(i.m_fnd_confs_handler_netkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = m_fnd_confs_handler_netkey &rArr; m_tb_key_net_delete &rArr; m_bcn_subnet_update_ind &rArr; m_bcn_adv_tx_check &rArr; m_bcn_prep_secure_bcn &rArr; m_bcn_insert_encrypt_queue &rArr; m_tb_sec_cmac_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_update
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_find
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_delete
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_add
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_get_nb_app_keys
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_app_get_lids
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_app_delete
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_netkey_status
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_net_key_rem_ind
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_app_key_rem_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process
</UL>

<P><STRONG><a name="[5d8]"></a>m_fnd_confs_handler_node_id</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, m_fnd_confs.o(i.m_fnd_confs_handler_node_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = m_fnd_confs_handler_node_id &rArr; m_fnd_confs_send &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_set_node_identity
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_find
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_get_node_identity
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process_next
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_get_air_status
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_buf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process
</UL>

<P><STRONG><a name="[45]"></a>m_fnd_confs_process</STRONG> (Thumb, 1186 bytes, Stack size 40 bytes, m_fnd_confs.o(i.m_fnd_confs_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = m_fnd_confs_process &rArr; m_fnd_confs_handler_model_pub_set &rArr; m_fnd_confs_send_model_pub_status &rArr; m_fnd_confs_send &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_get_ids
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_find
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_get_nb_net_keys
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_beacon_state
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_cmac_start
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_model_subs_status
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_model_subs_list
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_model_pub_status
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_model_app_list
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_lpn_polltimeout_status
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_hbeat_subs_status
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_hbeat_pub_status
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_appkey_list
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process_next
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_node_id
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_netkey
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_model_subs_vaddr
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_model_subs
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_model_pub_set
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_model_app
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_key_refresh_phase
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_compo_data_get
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_appkey
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_get_ids_length
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_buf_alloc
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_set_relay_state
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_set_net_tx_state
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_set_hb_subs_params
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_set_hb_pub_params
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_set_friend_state
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_set_default_ttl
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_set_beacon_state
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_hb_check_features
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_relay_state
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_net_tx_state
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_gatt_proxy_state
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_friend_state
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_default_ttl
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_is_local_addr
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_local_id
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_delete_all_subscription
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_set_gatt_proxy_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_fnd_confs.o(i.m_fnd_confs_init)
</UL>
<P><STRONG><a name="[5c8]"></a>m_fnd_confs_process_next</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, m_fnd_confs.o(i.m_fnd_confs_process_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = m_fnd_confs_process_next &rArr; m_tb_buf_release &rArr; m_tb_buf_block_free
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_djob_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_netkey_status
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_model_subs_status
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_model_subs_list
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_model_pub_status
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_model_app_status
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_model_app_list
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_lpn_polltimeout_status
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_compo_data_status
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_appkey_status
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_appkey_list
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_node_id
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_key_refresh_phase
</UL>

<P><STRONG><a name="[5c7]"></a>m_fnd_confs_send</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, m_fnd_confs.o(i.m_fnd_confs_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = m_fnd_confs_send &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_api_model_rsp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_netkey_status
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_model_subs_status
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_model_subs_list
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_model_pub_status
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_model_app_status
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_model_app_list
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_lpn_polltimeout_status
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_hbeat_subs_status
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_hbeat_pub_status
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_compo_data_status
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_appkey_status
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send_appkey_list
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_node_id
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_key_refresh_phase
</UL>

<P><STRONG><a name="[5dc]"></a>m_fnd_confs_send_appkey_list</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, m_fnd_confs.o(i.m_fnd_confs_send_appkey_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = m_fnd_confs_send_appkey_list &rArr; m_fnd_confs_send &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_get_nb_app_keys
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_app_get_ids
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process_next
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_get_ids_length
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_get_air_status
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_buf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process
</UL>

<P><STRONG><a name="[5ae]"></a>m_fnd_confs_send_appkey_status</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, m_fnd_confs.o(i.m_fnd_confs_send_appkey_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = m_fnd_confs_send_appkey_status &rArr; m_fnd_confs_send &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process_next
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_get_air_status
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_buf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_appkey
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_cb_appkey_added
</UL>

<P><STRONG><a name="[5b0]"></a>m_fnd_confs_send_compo_data_status</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, m_fnd_confs.o(i.m_fnd_confs_send_compo_data_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = m_fnd_confs_send_compo_data_status &rArr; m_fnd_confs_send &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process_next
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_buf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_compo_data_get
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_cb_compo_data
</UL>

<P><STRONG><a name="[5ee]"></a>m_fnd_confs_send_hbeat_pub_status</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, m_fnd_confs.o(i.m_fnd_confs_send_hbeat_pub_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = m_fnd_confs_send_hbeat_pub_status &rArr; m_fnd_confs_send &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_get_netkey_id
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_get_air_status
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_buf_alloc
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_hb_pub_params
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process
</UL>

<P><STRONG><a name="[5f0]"></a>m_fnd_confs_send_hbeat_subs_status</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, m_fnd_confs.o(i.m_fnd_confs_send_hbeat_subs_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = m_fnd_confs_send_hbeat_subs_status &rArr; m_fnd_confs_send &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_get_air_status
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_buf_alloc
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_hb_subs_params
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process
</UL>

<P><STRONG><a name="[5f1]"></a>m_fnd_confs_send_lpn_polltimeout_status</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, m_fnd_confs.o(i.m_fnd_confs_send_lpn_polltimeout_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = m_fnd_confs_send_lpn_polltimeout_status &rArr; m_fnd_confs_send &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_friend_is_lpn
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_friend_get_polltimeout_ms
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process_next
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_buf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process
</UL>

<P><STRONG><a name="[5e0]"></a>m_fnd_confs_send_model_app_list</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, m_fnd_confs.o(i.m_fnd_confs_send_model_app_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = m_fnd_confs_send_model_app_list &rArr; m_fnd_confs_send &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_get_model_appkey_ids
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process_next
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_get_ids_length
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_get_air_status
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_buf_alloc
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_nb_bound_app
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process
</UL>

<P><STRONG><a name="[5cd]"></a>m_fnd_confs_send_model_app_status</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, m_fnd_confs.o(i.m_fnd_confs_send_model_app_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = m_fnd_confs_send_model_app_status &rArr; m_fnd_confs_send &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process_next
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_get_air_status
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_buf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_model_app
</UL>

<P><STRONG><a name="[5b5]"></a>m_fnd_confs_send_model_pub_status</STRONG> (Thumb, 234 bytes, Stack size 88 bytes, m_fnd_confs.o(i.m_fnd_confs_send_model_pub_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = m_fnd_confs_send_model_pub_status &rArr; m_fnd_confs_send &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_app_get
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process_next
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_get_air_status
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_buf_alloc
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_publi_param
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_model_pub_set
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_cb_sec_cmac_pub_finished
</UL>

<P><STRONG><a name="[5db]"></a>m_fnd_confs_send_model_subs_list</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, m_fnd_confs.o(i.m_fnd_confs_send_model_subs_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = m_fnd_confs_send_model_subs_list &rArr; m_fnd_confs_send &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process_next
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_get_air_status
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_buf_alloc
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_subscription_list_size
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_subscription_list
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process
</UL>

<P><STRONG><a name="[5b6]"></a>m_fnd_confs_send_model_subs_status</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, m_fnd_confs.o(i.m_fnd_confs_send_model_subs_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = m_fnd_confs_send_model_subs_status &rArr; m_fnd_confs_send &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process_next
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_get_air_status
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_buf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_model_subs_vaddr
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_model_subs
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_cb_sec_cmac_subs_finished
</UL>

<P><STRONG><a name="[5b1]"></a>m_fnd_confs_send_netkey_status</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, m_fnd_confs.o(i.m_fnd_confs_send_netkey_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = m_fnd_confs_send_netkey_status &rArr; m_fnd_confs_send &rArr; m_api_model_rsp_send &rArr; m_lay_access_rsp_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_send
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_process_next
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_get_air_status
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_buf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_handler_netkey
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_fnd_confs_cb_netkey_added
</UL>

<P><STRONG><a name="[4d]"></a>m_lay_friend_cb_key</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, m_lay_friend.o(i.m_lay_friend_cb_key))
<BR>[Address Reference Count : 1]<UL><LI> m_lay_friend.o(i.m_lay_friend_handler_request)
</UL>
<P><STRONG><a name="[4c]"></a>m_lay_friend_cb_repeat_timer</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, m_lay_friend.o(i.m_lay_friend_cb_repeat_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = m_lay_friend_cb_repeat_timer &rArr; m_lay_friend_send_clear &rArr; m_lay_friend_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_free
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_send_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_friend.o(i.m_lay_friend_handler_request)
</UL>
<P><STRONG><a name="[4b]"></a>m_lay_friend_cb_timer</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, m_lay_friend.o(i.m_lay_friend_cb_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = m_lay_friend_cb_timer &rArr; m_lay_friend_send_update &rArr; m_lay_friend_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_set
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_send_update
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_send
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_end_friendship
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_friend.o(i.m_lay_friend_handler_request)
</UL>
<P><STRONG><a name="[62c]"></a>m_lay_friend_check_queue_length</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, m_lay_friend.o(i.m_lay_friend_check_queue_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = m_lay_friend_check_queue_length &rArr; m_tb_buf_release &rArr; m_tb_buf_block_free
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
</UL>
<BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_rx_seg_all
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_rx_ltrans_unseg
</UL>

<P><STRONG><a name="[629]"></a>m_lay_friend_end_friendship</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, m_lay_friend.o(i.m_lay_friend_end_friendship))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = m_lay_friend_end_friendship &rArr; m_tb_timer_clear &rArr; m_tb_timer_remove &rArr; m_tb_timer_prog &rArr; m_al_timer_get_delay &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_free
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_clear
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_friend_end_ind
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_friend_lpn_rem
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_cb_state_updated
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_handler_request
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_handler_clear
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_cb_timer
</UL>

<P><STRONG><a name="[50]"></a>m_lay_friend_handler_clear</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, m_lay_friend.o(i.m_lay_friend_handler_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = m_lay_friend_handler_clear &rArr; m_lay_friend_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_send
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_seek_lpn
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_end_friendship
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_friend.o(i.m_lay_friend_rx_utrans)
</UL>
<P><STRONG><a name="[51]"></a>m_lay_friend_handler_clear_cfm</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, m_lay_friend.o(i.m_lay_friend_handler_clear_cfm))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = m_lay_friend_handler_clear_cfm &rArr; m_tb_timer_clear &rArr; m_tb_timer_remove &rArr; m_tb_timer_prog &rArr; m_al_timer_get_delay &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_free
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_clear
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_seek_lpn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_friend.o(i.m_lay_friend_rx_utrans)
</UL>
<P><STRONG><a name="[4e]"></a>m_lay_friend_handler_poll</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, m_lay_friend.o(i.m_lay_friend_handler_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = m_lay_friend_handler_poll &rArr; m_lay_friend_send_clear &rArr; m_lay_friend_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_front (via Veneer)
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_set
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_acquire
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_friend_lpn_estab
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_send_clear
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_seek_lpn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_friend.o(i.m_lay_friend_rx_utrans)
</UL>
<P><STRONG><a name="[4f]"></a>m_lay_friend_handler_request</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, m_lay_friend.o(i.m_lay_friend_handler_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = m_lay_friend_handler_request &rArr; m_tb_key_friend_new_ind &rArr; m_tb_sec_k2_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_malloc
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_set
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_friend_new_ind
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_prim_addr
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_friend_lpn_add
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_friend_get_nb_lpn_known
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_friend_get_friend_cnt
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_seek_lpn
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_end_friendship
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_friend.o(i.m_lay_friend_rx_utrans)
</UL>
<P><STRONG><a name="[636]"></a>m_lay_friend_handler_subs_list</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, m_lay_friend.o(i.m_lay_friend_handler_subs_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = m_lay_friend_handler_subs_list &rArr; m_tb_timer_set &rArr; m_tb_timer_insert &rArr; m_tb_timer_prog &rArr; m_al_timer_get_delay &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_front (via Veneer)
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_set
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_acquire
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_friend_subs_list_update
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_seek_lpn
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_rx_utrans
</UL>

<P><STRONG><a name="[239]"></a>m_lay_friend_rx_ltrans</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, m_lay_friend.o(i.m_lay_friend_rx_ltrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = m_lay_friend_rx_ltrans &rArr; m_lay_friend_rx_ltrans_seg &rArr; m_lay_friend_rx_seg_all &rArr; m_lay_friend_check_queue_length &rArr; m_tb_buf_release &rArr; m_tb_buf_block_free
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_friend_state
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_is_local_addr
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_rx_ltrans_unseg
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_rx_ltrans_seg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_friend.o(.constdata)
</UL>
<P><STRONG><a name="[639]"></a>m_lay_friend_rx_ltrans_seg</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, m_lay_friend.o(i.m_lay_friend_rx_ltrans_seg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = m_lay_friend_rx_ltrans_seg &rArr; m_lay_friend_rx_seg_all &rArr; m_lay_friend_check_queue_length &rArr; m_tb_buf_release &rArr; m_tb_buf_block_free
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_copy
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_alloc
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_acquire
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_rx_seg_all
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_rx_ltrans
</UL>

<P><STRONG><a name="[63a]"></a>m_lay_friend_rx_ltrans_unseg</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, m_lay_friend.o(i.m_lay_friend_rx_ltrans_unseg))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = m_lay_friend_rx_ltrans_unseg &rArr; m_lay_friend_check_queue_length &rArr; m_tb_buf_release &rArr; m_tb_buf_block_free
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_extract (via Veneer)
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_copy
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_alloc
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_acquire
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_friend_is_subs_dst
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_check_queue_length
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_rx_ltrans
</UL>

<P><STRONG><a name="[63b]"></a>m_lay_friend_rx_seg_all</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, m_lay_friend.o(i.m_lay_friend_rx_seg_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = m_lay_friend_rx_seg_all &rArr; m_lay_friend_check_queue_length &rArr; m_tb_buf_release &rArr; m_tb_buf_block_free
</UL>
<BR>[Calls]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back_sublist (via Veneer)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init (via Veneer)
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_copy
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_alloc
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_friend_is_subs_dst
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_check_queue_length
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_rx_ltrans_seg
</UL>

<P><STRONG><a name="[237]"></a>m_lay_friend_rx_utrans</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, m_lay_friend.o(i.m_lay_friend_rx_utrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = m_lay_friend_rx_utrans &rArr; m_lay_friend_handler_subs_list &rArr; m_tb_timer_set &rArr; m_tb_timer_insert &rArr; m_tb_timer_prog &rArr; m_al_timer_get_delay &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_util_unpack (via Veneer)
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_friend_state
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_prim_addr
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_handler_subs_list
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_friend.o(.constdata)
</UL>
<P><STRONG><a name="[62f]"></a>m_lay_friend_seek_lpn</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, m_lay_friend.o(i.m_lay_friend_seek_lpn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_lay_friend_seek_lpn
</UL>
<BR>[Calls]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_friend_get_nb_lpn_known
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_handler_subs_list
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_handler_request
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_handler_poll
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_handler_clear_cfm
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_handler_clear
</UL>

<P><STRONG><a name="[62a]"></a>m_lay_friend_send</STRONG> (Thumb, 230 bytes, Stack size 64 bytes, m_lay_friend.o(i.m_lay_friend_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = m_lay_friend_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_util_pack (via Veneer)
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_alloc
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_get_iv_seq
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_reuse
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_prim_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_send_update
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_send_clear
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_handler_clear
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_cb_timer
</UL>

<P><STRONG><a name="[628]"></a>m_lay_friend_send_clear</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, m_lay_friend.o(i.m_lay_friend_send_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = m_lay_friend_send_clear &rArr; m_lay_friend_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_set
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_send
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_handler_poll
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_cb_repeat_timer
</UL>

<P><STRONG><a name="[62b]"></a>m_lay_friend_send_update</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, m_lay_friend.o(i.m_lay_friend_send_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = m_lay_friend_send_update &rArr; m_lay_friend_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_get_net_info
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_send
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_friend_cb_timer
</UL>

<P><STRONG><a name="[238]"></a>m_lay_friend_sent_net</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, m_lay_friend.o(i.m_lay_friend_sent_net))
<BR>[Address Reference Count : 1]<UL><LI> m_lay_friend.o(.constdata)
</UL>
<P><STRONG><a name="[236]"></a>m_lay_friend_sent_utrans</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_lay_friend.o(i.m_lay_friend_sent_utrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = m_lay_friend_sent_utrans &rArr; m_tb_buf_release &rArr; m_tb_buf_block_free
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_friend.o(.constdata)
</UL>
<P><STRONG><a name="[23c]"></a>m_lay_hb_cb_rx</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, m_lay_hb.o(i.m_lay_hb_cb_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_lay_hb_cb_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_hb_rx_ind
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_hb_subs_params
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_hb.o(.constdata)
</UL>
<P><STRONG><a name="[23b]"></a>m_lay_hb_cb_sent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_lay_hb.o(i.m_lay_hb_cb_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = m_lay_hb_cb_sent &rArr; m_tb_buf_release &rArr; m_tb_buf_block_free
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_hb.o(.constdata)
</UL>
<P><STRONG><a name="[53]"></a>m_lay_hb_cb_timer_pub</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, m_lay_hb.o(i.m_lay_hb_cb_timer_pub))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = m_lay_hb_cb_timer_pub &rArr; m_lay_hb_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_set
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_hb_pub_params
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_hb_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_hb.o(i.m_lay_hb_init)
</UL>
<P><STRONG><a name="[52]"></a>m_lay_hb_cb_timer_subs</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, m_lay_hb.o(i.m_lay_hb_cb_timer_subs))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = m_lay_hb_cb_timer_subs &rArr; m_tb_timer_set &rArr; m_tb_timer_insert &rArr; m_tb_timer_prog &rArr; m_al_timer_get_delay &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_set
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_hb_subs_params
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_hb.o(i.m_lay_hb_init)
</UL>
<P><STRONG><a name="[64a]"></a>m_lay_hb_send</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, m_lay_hb.o(i.m_lay_hb_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = m_lay_hb_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_alloc
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_get_iv_seq
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_hb_tx_ind
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_relay_state
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_hb_pub_params
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_gatt_proxy_state
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_friend_state
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_lpn_state
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_prim_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_hb_cb_state_updated
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_hb_cb_timer_pub
</UL>

<P><STRONG><a name="[671]"></a>m_lay_ltrans_block_ack_send</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, m_lay_ltrans.o(i.m_lay_ltrans_block_ack_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = m_lay_ltrans_block_ack_send &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_get_iv_seq
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_reuse
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_acquire
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_friend_state
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_is_local_addr
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_lpn_state
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_prim_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_tx_handler
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_rx
</UL>

<P><STRONG><a name="[672]"></a>m_lay_ltrans_filt_add</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, m_lay_ltrans.o(i.m_lay_ltrans_filt_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = m_lay_ltrans_filt_add
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_trans_incomp_timer
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_rx
</UL>

<P><STRONG><a name="[240]"></a>m_lay_ltrans_rx</STRONG> (Thumb, 1112 bytes, Stack size 72 bytes, m_lay_ltrans.o(i.m_lay_ltrans_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = m_lay_ltrans_rx &rArr; m_lay_ltrans_tx_handler &rArr; m_lay_ltrans_send_seg &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_set
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_clear
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_alloc
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_head_release
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_is_local_addr
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_trans_incomp_timer
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_tx_handler
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_filt_add
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_block_ack_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_ltrans.o(.constdata)
</UL>
<P><STRONG><a name="[674]"></a>m_lay_ltrans_seg_finished</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, m_lay_ltrans.o(i.m_lay_ltrans_seg_finished))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = m_lay_ltrans_seg_finished &rArr; m_tb_timer_clear &rArr; m_tb_timer_remove &rArr; m_tb_timer_prog &rArr; m_al_timer_get_delay &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_extract (via Veneer)
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_clear
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_trans_seg_timer
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_tx_handler
</UL>

<P><STRONG><a name="[23e]"></a>m_lay_ltrans_send</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, m_lay_ltrans.o(i.m_lay_ltrans_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = m_lay_ltrans_send &rArr; m_lay_ltrans_tx_handler &rArr; m_lay_ltrans_send_seg &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_head_reserve
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_acquire
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_tx_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_ltrans.o(.constdata)
</UL>
<P><STRONG><a name="[675]"></a>m_lay_ltrans_send_seg</STRONG> (Thumb, 298 bytes, Stack size 40 bytes, m_lay_ltrans.o(i.m_lay_ltrans_send_seg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = m_lay_ltrans_send_seg &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_get_iv_seq
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_reuse
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_tx_handler
</UL>

<P><STRONG><a name="[23f]"></a>m_lay_ltrans_sent</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, m_lay_ltrans.o(i.m_lay_ltrans_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = m_lay_ltrans_sent &rArr; m_lay_ltrans_tx_handler &rArr; m_lay_ltrans_send_seg &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_tx_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_ltrans.o(.constdata)
</UL>
<P><STRONG><a name="[673]"></a>m_lay_ltrans_tx_handler</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, m_lay_ltrans.o(i.m_lay_ltrans_tx_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = m_lay_ltrans_tx_handler &rArr; m_lay_ltrans_send_seg &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_set
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_send_seg
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_seg_finished
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_block_ack_send
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_trans_seg_timer
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_trans_ack_timer
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_sent
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_send
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_rx
</UL>

<P><STRONG><a name="[5d]"></a>m_lay_trans_ack_timer</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, m_lay_ltrans.o(i.m_lay_trans_ack_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = m_lay_trans_ack_timer &rArr; m_lay_ltrans_tx_handler &rArr; m_lay_ltrans_send_seg &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_tx_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_ltrans.o(i.m_lay_ltrans_init)
</UL>
<P><STRONG><a name="[5e]"></a>m_lay_trans_incomp_timer</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, m_lay_ltrans.o(i.m_lay_trans_incomp_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = m_lay_trans_incomp_timer &rArr; m_tb_timer_clear &rArr; m_tb_timer_remove &rArr; m_tb_timer_prog &rArr; m_al_timer_get_delay &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_extract (via Veneer)
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_clear
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_filt_add
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_ltrans.o(i.m_lay_ltrans_init)
</UL>
<P><STRONG><a name="[5c]"></a>m_lay_trans_seg_timer</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, m_lay_ltrans.o(i.m_lay_trans_seg_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = m_lay_trans_seg_timer &rArr; m_lay_ltrans_tx_handler &rArr; m_lay_ltrans_send_seg &rArr; m_tb_key_get_iv_seq &rArr; m_tb_store_update_ind &rArr; m_tb_store_update_publi_param_ind &rArr; m_api_send_update_ind &rArr; m_al_msg_send &rArr; m_al_local_id_get &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_tx_handler
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_ltrans_seg_finished
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_ltrans.o(i.m_lay_ltrans_init)
</UL>
<P><STRONG><a name="[676]"></a>m_lay_net_add_header</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, m_lay_net.o(i.m_lay_net_add_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = m_lay_net_add_header &rArr; m_tb_key_friend_get_nid &rArr; m_tb_key_friend_get_cred
</UL>
<BR>[Calls]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_friend_get_nid
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_head_reserve
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_send
</UL>

<P><STRONG><a name="[65]"></a>m_lay_net_ccm_dec_finished_cb</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, m_lay_net.o(i.m_lay_net_ccm_dec_finished_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = m_lay_net_ccm_dec_finished_cb &rArr; m_lay_net_check_relay &rArr; m_lay_net_send &rArr; m_tb_sec_ccm_enc_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_tail_release
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_head_release
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_friend_is_lpn
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_is_local_addr
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_lpn_state
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_is_addr_valid
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_decrypt_err
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_check_relay
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_check_group_dst
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_check_encrypt_queue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_net.o(i.m_lay_net_desobfusc_finished_cb)
</UL>
<P><STRONG><a name="[66]"></a>m_lay_net_ccm_dec_ready_cb</STRONG> (Thumb, 286 bytes, Stack size 64 bytes, m_lay_net.o(i.m_lay_net_ccm_dec_ready_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = m_lay_net_ccm_dec_ready_cb &rArr; m_tb_key_friend_get_key &rArr; m_tb_key_friend_get_cred
</UL>
<BR>[Calls]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_get
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_friend_get_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_net.o(i.m_lay_net_desobfusc_finished_cb)
</UL>
<P><STRONG><a name="[63]"></a>m_lay_net_ccm_enc_finished_cb</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, m_lay_net.o(i.m_lay_net_ccm_enc_finished_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = m_lay_net_ccm_enc_finished_cb &rArr; m_lay_net_encrypt_err &rArr; m_lay_net_check_encrypt_queue &rArr; m_tb_sec_ccm_enc_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_aes_start
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_encrypt_err
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m_lay_net.o(i.m_lay_net_send)
<LI> m_lay_net.o(i.m_lay_net_check_encrypt_queue)
</UL>
<P><STRONG><a name="[64]"></a>m_lay_net_ccm_enc_ready_cb</STRONG> (Thumb, 324 bytes, Stack size 64 bytes, m_lay_net.o(i.m_lay_net_ccm_enc_ready_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = m_lay_net_ccm_enc_ready_cb &rArr; m_tb_buf_copy &rArr; m_tb_buf_copy_data
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_copy
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_get
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_friend_get_key
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m_lay_net.o(i.m_lay_net_send)
<LI> m_lay_net.o(i.m_lay_net_check_encrypt_queue)
</UL>
<P><STRONG><a name="[67d]"></a>m_lay_net_check_encrypt_queue</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, m_lay_net.o(i.m_lay_net_check_encrypt_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = m_lay_net_check_encrypt_queue &rArr; m_tb_sec_ccm_enc_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_ccm_enc_start
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_aes_start
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_obfusc_finished_cb
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_encrypt_err
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_decrypt_err
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_ccm_dec_finished_cb
</UL>

<P><STRONG><a name="[67c]"></a>m_lay_net_check_group_dst</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, m_lay_net.o(i.m_lay_net_check_group_dst))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = m_lay_net_check_group_dst &rArr; m_tb_mio_get_label_uuid
</UL>
<BR>[Calls]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_relay_state
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_gatt_proxy_state
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_friend_state
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_label_uuid
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_ccm_dec_finished_cb
</UL>

<P><STRONG><a name="[67b]"></a>m_lay_net_check_relay</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, m_lay_net.o(i.m_lay_net_check_relay))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = m_lay_net_check_relay &rArr; m_lay_net_send &rArr; m_tb_sec_ccm_enc_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_copy
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_alloc
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_relay_state
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_send
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_ccm_dec_finished_cb
</UL>

<P><STRONG><a name="[245]"></a>m_lay_net_closed</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, m_lay_net.o(i.m_lay_net_closed))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = m_lay_net_closed &rArr; m_lay_net_sent &rArr; m_tb_buf_release &rArr; m_tb_buf_block_free
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_sent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_net.o(.constdata)
</UL>
<P><STRONG><a name="[678]"></a>m_lay_net_decrypt_err</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, m_lay_net.o(i.m_lay_net_decrypt_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = m_lay_net_decrypt_err &rArr; m_lay_net_check_encrypt_queue &rArr; m_tb_sec_ccm_enc_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_lid_from_nid
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_friend_net_lid_from_nid
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_lpn_state
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_check_encrypt_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_desobfusc_finished_cb
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_ccm_dec_finished_cb
</UL>

<P><STRONG><a name="[61]"></a>m_lay_net_desobfusc_finished_cb</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, m_lay_net.o(i.m_lay_net_desobfusc_finished_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = m_lay_net_desobfusc_finished_cb &rArr; m_lay_net_decrypt_err &rArr; m_lay_net_check_encrypt_queue &rArr; m_tb_sec_ccm_enc_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_copy
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_alloc
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_is_local_addr
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_ccm_dec_start
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_is_in_cache
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_is_addr_valid
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_decrypt_err
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m_lay_net.o(i.m_lay_net_rx)
<LI> m_lay_net.o(i.m_lay_net_check_encrypt_queue)
</UL>
<P><STRONG><a name="[62]"></a>m_lay_net_desobfusc_ready_cb</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, m_lay_net.o(i.m_lay_net_desobfusc_ready_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = m_lay_net_desobfusc_ready_cb &rArr; m_tb_key_friend_get_key &rArr; m_tb_key_friend_get_cred
</UL>
<BR>[Calls]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_get
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_friend_get_key
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m_lay_net.o(i.m_lay_net_rx)
<LI> m_lay_net.o(i.m_lay_net_check_encrypt_queue)
</UL>
<P><STRONG><a name="[67f]"></a>m_lay_net_encrypt_err</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, m_lay_net.o(i.m_lay_net_encrypt_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = m_lay_net_encrypt_err &rArr; m_lay_net_check_encrypt_queue &rArr; m_tb_sec_ccm_enc_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_check_encrypt_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_obfusc_finished_cb
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_ccm_enc_finished_cb
</UL>

<P><STRONG><a name="[683]"></a>m_lay_net_intf_type_to_idx</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, m_lay_net.o(i.m_lay_net_intf_type_to_idx))
<BR><BR>[Called By]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_connect_cb
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_send
</UL>

<P><STRONG><a name="[67a]"></a>m_lay_net_is_addr_valid</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, m_lay_net.o(i.m_lay_net_is_addr_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_lay_net_is_addr_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_desobfusc_finished_cb
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_ccm_dec_finished_cb
</UL>

<P><STRONG><a name="[686]"></a>m_lay_net_is_in_cache</STRONG> (Thumb, 152 bytes, Stack size 20 bytes, m_lay_net.o(i.m_lay_net_is_in_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = m_lay_net_is_in_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_desobfusc_finished_cb
</UL>

<P><STRONG><a name="[688]"></a>m_lay_net_is_in_pre_filt</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, m_lay_net.o(i.m_lay_net_is_in_pre_filt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = m_lay_net_is_in_pre_filt
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_rx
</UL>

<P><STRONG><a name="[5f]"></a>m_lay_net_obfusc_finished_cb</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, m_lay_net.o(i.m_lay_net_obfusc_finished_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = m_lay_net_obfusc_finished_cb &rArr; m_lay_net_encrypt_err &rArr; m_lay_net_check_encrypt_queue &rArr; m_tb_sec_ccm_enc_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_encrypt_err
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_check_encrypt_queue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_net.o(i.m_lay_net_ccm_enc_finished_cb)
</UL>
<P><STRONG><a name="[60]"></a>m_lay_net_obfusc_ready_cb</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, m_lay_net.o(i.m_lay_net_obfusc_ready_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = m_lay_net_obfusc_ready_cb &rArr; m_tb_key_friend_get_key &rArr; m_tb_key_friend_get_cred
</UL>
<BR>[Calls]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_get
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_friend_get_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_net.o(i.m_lay_net_ccm_enc_finished_cb)
</UL>
<P><STRONG><a name="[244]"></a>m_lay_net_opened</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, m_lay_net.o(i.m_lay_net_opened))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_lay_net_opened
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_net.o(.constdata)
</UL>
<P><STRONG><a name="[243]"></a>m_lay_net_rx</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, m_lay_net.o(i.m_lay_net_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = m_lay_net_rx &rArr; m_tb_sec_aes_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_lid_from_nid
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_get_iv_rx
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_friend_net_lid_from_nid
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_acquire
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_aes_start
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_state_get_lpn_state
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_is_in_pre_filt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_net.o(.constdata)
</UL>
<P><STRONG><a name="[241]"></a>m_lay_net_send</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, m_lay_net.o(i.m_lay_net_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = m_lay_net_send &rArr; m_tb_sec_ccm_enc_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_alloc
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_net_get
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_acquire
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_ccm_enc_start
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_intf_type_to_idx
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_add_header
</UL>
<BR>[Called By]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_check_relay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_net.o(.constdata)
</UL>
<P><STRONG><a name="[242]"></a>m_lay_net_sent</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, m_lay_net.o(i.m_lay_net_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = m_lay_net_sent &rArr; m_tb_buf_release &rArr; m_tb_buf_block_free
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_head_release
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_net_closed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_net.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>m_lay_utrans_ccm_dec_finished_cb</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, m_lay_utrans.o(i.m_lay_utrans_ccm_dec_finished_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = m_lay_utrans_ccm_dec_finished_cb &rArr; m_lay_utrans_decrypt_err &rArr; m_lay_utrans_check_decrypt_queue &rArr; m_tb_sec_ccm_dec_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_decrypt_err
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_check_decrypt_queue
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m_lay_utrans.o(i.m_lay_utrans_rx)
<LI> m_lay_utrans.o(i.m_lay_utrans_check_decrypt_queue)
</UL>
<P><STRONG><a name="[6f]"></a>m_lay_utrans_ccm_dec_ready_cb</STRONG> (Thumb, 306 bytes, Stack size 64 bytes, m_lay_utrans.o(i.m_lay_utrans_ccm_dec_ready_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = m_lay_utrans_ccm_dec_ready_cb &rArr; m_tb_buf_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_copy
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_alloc
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_dev_get
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_app_get
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_label_uuid
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m_lay_utrans.o(i.m_lay_utrans_rx)
<LI> m_lay_utrans.o(i.m_lay_utrans_check_decrypt_queue)
</UL>
<P><STRONG><a name="[71]"></a>m_lay_utrans_ccm_enc_finished_cb</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, m_lay_utrans.o(i.m_lay_utrans_ccm_enc_finished_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = m_lay_utrans_ccm_enc_finished_cb &rArr; m_tb_buf_release &rArr; m_tb_buf_block_free
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_front (via Veneer)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_djob_reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_utrans.o(i.m_lay_utrans_tx)
</UL>
<P><STRONG><a name="[72]"></a>m_lay_utrans_ccm_enc_ready_cb</STRONG> (Thumb, 356 bytes, Stack size 64 bytes, m_lay_utrans.o(i.m_lay_utrans_ccm_enc_ready_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = m_lay_utrans_ccm_enc_ready_cb &rArr; m_tb_buf_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_copy
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_alloc
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_dev_get
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_app_get
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_mio_get_label_uuid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_utrans.o(i.m_lay_utrans_tx)
</UL>
<P><STRONG><a name="[695]"></a>m_lay_utrans_check_decrypt_queue</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, m_lay_utrans.o(i.m_lay_utrans_check_decrypt_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = m_lay_utrans_check_decrypt_queue &rArr; m_tb_sec_ccm_dec_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_ccm_dec_start
</UL>
<BR>[Called By]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_decrypt_err
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_ccm_dec_finished_cb
</UL>

<P><STRONG><a name="[694]"></a>m_lay_utrans_decrypt_err</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, m_lay_utrans.o(i.m_lay_utrans_decrypt_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = m_lay_utrans_decrypt_err &rArr; m_lay_utrans_check_decrypt_queue &rArr; m_tb_sec_ccm_dec_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_app_lid_from_net_aid
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_check_decrypt_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_ccm_dec_finished_cb
</UL>

<P><STRONG><a name="[697]"></a>m_lay_utrans_intf_type_to_idx</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, m_lay_utrans.o(i.m_lay_utrans_intf_type_to_idx))
<BR><BR>[Called By]<UL><LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_connect_cb
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_send
</UL>

<P><STRONG><a name="[248]"></a>m_lay_utrans_rx</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, m_lay_utrans.o(i.m_lay_utrans_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = m_lay_utrans_rx &rArr; m_tb_sec_ccm_dec_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_key_app_lid_from_net_aid
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_acquire
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_ccm_dec_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_utrans.o(.constdata)
</UL>
<P><STRONG><a name="[246]"></a>m_lay_utrans_send</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, m_lay_utrans.o(i.m_lay_utrans_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = m_lay_utrans_send &rArr; m_al_djob_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_acquire
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_djob_reg
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_lay_utrans_intf_type_to_idx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_utrans.o(.constdata)
</UL>
<P><STRONG><a name="[247]"></a>m_lay_utrans_sent</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, m_lay_utrans.o(i.m_lay_utrans_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = m_lay_utrans_sent &rArr; m_tb_buf_release &rArr; m_tb_buf_block_free
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_front (via Veneer)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_utrans.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>m_lay_utrans_tx</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, m_lay_utrans.o(i.m_lay_utrans_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = m_lay_utrans_tx &rArr; m_tb_sec_ccm_enc_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_front (via Veneer)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_al_djob_reg
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_sec_ccm_enc_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_lay_utrans.o(i.m_lay_utrans_init)
</UL>
<P><STRONG><a name="[6a5]"></a>m_prov_adv_trans_fcs_compute</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, m_prov_adv_trans.o(i.m_prov_adv_trans_fcs_compute))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m_prov_adv_trans_fcs_compute
</UL>
<BR>[Called By]<UL><LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_send
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_rx_check
</UL>

<P><STRONG><a name="[6a4]"></a>m_prov_adv_trans_rx_check</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, m_prov_adv_trans.o(i.m_prov_adv_trans_rx_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = m_prov_adv_trans_rx_check &rArr; m_prov_pdu_rx &rArr; m_prov_error_handle &rArr; m_prov_pdu_send &rArr; m_prov_adv_trans_send &rArr; m_prov_adv_trans_tx_set &rArr; m_tb_timer_set &rArr; m_tb_timer_insert &rArr; m_tb_timer_prog &rArr; m_al_timer_get_delay &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_pdu_rx
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_tx_set
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_fcs_compute
</UL>
<BR>[Called By]<UL><LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_rx
</UL>

<P><STRONG><a name="[73]"></a>m_prov_adv_trans_tx_cb</STRONG> (Thumb, 634 bytes, Stack size 32 bytes, m_prov_adv_trans.o(i.m_prov_adv_trans_tx_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = m_prov_adv_trans_tx_cb &rArr; m_prov_link_closed &rArr; m_bcn_state_update &rArr; m_bcn_adv_tx_check &rArr; m_bcn_prep_secure_bcn &rArr; m_bcn_insert_encrypt_queue &rArr; m_tb_sec_cmac_start &rArr; m_tb_sec_start &rArr; m_tb_sec_execute &rArr; m_al_sec_aes_ccm
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_release
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_reuse
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_buf_acquire
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_bearer_send
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_link_closed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_prov_adv_trans.o(i.m_prov_adv_trans_rx)
</UL>
<P><STRONG><a name="[6a0]"></a>m_prov_adv_trans_tx_set</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, m_prov_adv_trans.o(i.m_prov_adv_trans_tx_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = m_prov_adv_trans_tx_set &rArr; m_tb_timer_set &rArr; m_tb_timer_insert &rArr; m_tb_timer_prog &rArr; m_al_timer_get_delay &rArr; m_al_timer_update_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand (via Veneer)
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_tb_timer_set
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_sent
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_rx
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_link_close_send
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_send
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_prov_adv_trans_rx_check
</UL>

<P><STRONG><a name="[766]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[75b]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[7e0]"></a>ddiv_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Called By]<UL></UL>

<P><STRONG><a name="[772]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[76a]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[7e5]"></a>_fdiv1</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Called By]<UL></UL>

<P><STRONG><a name="[4]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[8a0]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED)
<BR><BR>[Called By]<UL></UL>
<HR></body></html>
